// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package brk.create_fill_metadata_table_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.Settings;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: create_fill_metadata_table Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class create_fill_metadata_table implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(inzichtDataSchemaName != null){
				
					this.setProperty("inzichtDataSchemaName", inzichtDataSchemaName.toString());
				
			}
			
			if(inzichtDataOwner != null){
				
					this.setProperty("inzichtDataOwner", inzichtDataOwner.toString());
				
			}
			
			if(inzichtDataOwnerPassword != null){
				
					this.setProperty("inzichtDataOwnerPassword", inzichtDataOwnerPassword.toString());
				
			}
			
			if(xmlType != null){
				
					this.setProperty("xmlType", xmlType.toString());
				
			}
			
			if(xmlLocation != null){
				
					this.setProperty("xmlLocation", xmlLocation.toString());
				
			}
			
			if(break_job != null){
				
					this.setProperty("break_job", break_job.toString());
				
			}
			
			if(jobName != null){
				
					this.setProperty("jobName", jobName.toString());
				
			}
			
			if(result != null){
				
					this.setProperty("result", result.toString());
				
			}
			
			if(jobnumber != null){
				
					this.setProperty("jobnumber", jobnumber.toString());
				
			}
			
		}

public String inzichtDataSchemaName;
public String getInzichtDataSchemaName(){
	return this.inzichtDataSchemaName;
}
public String inzichtDataOwner;
public String getInzichtDataOwner(){
	return this.inzichtDataOwner;
}
public String inzichtDataOwnerPassword;
public String getInzichtDataOwnerPassword(){
	return this.inzichtDataOwnerPassword;
}
public String xmlType;
public String getXmlType(){
	return this.xmlType;
}
public String xmlLocation;
public String getXmlLocation(){
	return this.xmlLocation;
}
public Boolean break_job;
public Boolean getBreak_job(){
	return this.break_job;
}
public String jobName;
public String getJobName(){
	return this.jobName;
}
public Boolean result;
public Boolean getResult(){
	return this.result;
}
public String jobnumber;
public String getJobnumber(){
	return this.jobnumber;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "create_fill_metadata_table";
	private final String projectName = "BRK";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_KJVBoI-ZEequHepCzpIbFA", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				create_fill_metadata_table.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(create_fill_metadata_table.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_4_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_4_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_4_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_1_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_1_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_1_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "";
            String url_tDBConnection_1 = "jdbc:postgresql://"+Settings.get("CONNECTION_DEFINITION", "host")+":"+Settings.get("CONNECTION_DEFINITION", "port")+"/"+Settings.get("CONNECTION_DEFINITION", "database");
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
		String dbUser_tDBConnection_1 = context.inzichtDataOwner;
		
		
			
	final String decryptedPassword_tDBConnection_1 = context.inzichtDataOwnerPassword; 
			String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
		
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
		
				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_1",context.inzichtDataSchemaName);

	globalMap.put("conn_" + "tDBConnection_1",conn_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

   			if (context.xmlType.equals("/GemeenteGebaseerdeStand/stand/KadastraalObjectSnapshot")) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tJava_5Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if (context.xmlType.equals("/Stand/stand/KadastraalObjectSnapshot")) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tJava_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		


System.out.println(TalendDate.formatDate("HH:mm:ss dd-MM-yyyy", TalendDate.getCurrentDate()) + " - Metadata tabel creeëren en vullen "+context.jobnumber+": Gemeente gebaseerde stand inlezen");
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFileInputXML_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public String bestand;

				public String getBestand () {
					return this.bestand;
				}
				
			    public String soort_bestand;

				public String getSoort_bestand () {
					return this.soort_bestand;
				}
				
			    public java.util.Date startdatum_verwerking;

				public java.util.Date getStartdatum_verwerking () {
					return this.startdatum_verwerking;
				}
				
			    public String resultaat_verwerking;

				public String getResultaat_verwerking () {
					return this.resultaat_verwerking;
				}
				
			    public String selectiecriteria_type_totaalstand;

				public String getSelectiecriteria_type_totaalstand () {
					return this.selectiecriteria_type_totaalstand;
				}
				
			    public String selectiecriteria_kenmerknaam;

				public String getSelectiecriteria_kenmerknaam () {
					return this.selectiecriteria_kenmerknaam;
				}
				
			    public String selectiecriteria_kenmerkwaarde;

				public String getSelectiecriteria_kenmerkwaarde () {
					return this.selectiecriteria_kenmerkwaarde;
				}
				
			    public java.util.Date brk_datum;

				public java.util.Date getBrk_datum () {
					return this.brk_datum;
				}
				
			    public Integer volgnummer;

				public Integer getVolgnummer () {
					return this.volgnummer;
				}
				
			    public String mutatiesoort;

				public String getMutatiesoort () {
					return this.mutatiesoort;
				}
				
			    public String was_snapshot_referentie;

				public String getWas_snapshot_referentie () {
					return this.was_snapshot_referentie;
				}
				
			    public java.util.Date was_snapshot_toestandsdatum;

				public java.util.Date getWas_snapshot_toestandsdatum () {
					return this.was_snapshot_toestandsdatum;
				}
				
			    public String wordt_snapshot_referentie;

				public String getWordt_snapshot_referentie () {
					return this.wordt_snapshot_referentie;
				}
				
			    public java.util.Date wordt_snapshot_toestandsdatum;

				public java.util.Date getWordt_snapshot_toestandsdatum () {
					return this.wordt_snapshot_toestandsdatum;
				}
				
			    public String sectie;

				public String getSectie () {
					return this.sectie;
				}
				
			    public Integer perceelnummer;

				public Integer getPerceelnummer () {
					return this.perceelnummer;
				}
				
			    public Integer appartementsrechtvolgnummer;

				public Integer getAppartementsrechtvolgnummer () {
					return this.appartementsrechtvolgnummer;
				}
				
			    public Boolean indicatie_deelperceel;

				public Boolean getIndicatie_deelperceel () {
					return this.indicatie_deelperceel;
				}
				
			    public String object_referentie;

				public String getObject_referentie () {
					return this.object_referentie;
				}
				
			    public String object_soort;

				public String getObject_soort () {
					return this.object_soort;
				}
				
			    public String burgerlijke_gemeente_code;

				public String getBurgerlijke_gemeente_code () {
					return this.burgerlijke_gemeente_code;
				}
				
			    public String burgerlijke_gemeente_waarde;

				public String getBurgerlijke_gemeente_waarde () {
					return this.burgerlijke_gemeente_waarde;
				}
				
			    public String akr_kadastrale_gemeente_code;

				public String getAkr_kadastrale_gemeente_code () {
					return this.akr_kadastrale_gemeente_code;
				}
				
			    public String akr_kadastrale_gemeente_waarde;

				public String getAkr_kadastrale_gemeente_waarde () {
					return this.akr_kadastrale_gemeente_waarde;
				}
				
			    public String kadastrale_gemeente_code;

				public String getKadastrale_gemeente_code () {
					return this.kadastrale_gemeente_code;
				}
				
			    public String kadastrale_gemeente_waarde;

				public String getKadastrale_gemeente_waarde () {
					return this.kadastrale_gemeente_waarde;
				}
				
			    public String perceelref_type;

				public String getPerceelref_type () {
					return this.perceelref_type;
				}
				
			    public String perceelref_href;

				public String getPerceelref_href () {
					return this.perceelref_href;
				}
				
			    public String appartementsrecht_type;

				public String getAppartementsrecht_type () {
					return this.appartementsrecht_type;
				}
				
			    public String appartementsrecht_href;

				public String getAppartementsrecht_href () {
					return this.appartementsrecht_href;
				}
				
			    public String aardstukdeel_code;

				public String getAardstukdeel_code () {
					return this.aardstukdeel_code;
				}
				
			    public String aardstukdeel_waarde;

				public String getAardstukdeel_waarde () {
					return this.aardstukdeel_waarde;
				}
				
			    public String ingeschreven_kadaster_stuk_kadaster_referentie_type;

				public String getIngeschreven_kadaster_stuk_kadaster_referentie_type () {
					return this.ingeschreven_kadaster_stuk_kadaster_referentie_type;
				}
				
			    public String ingeschreven_kadaster_stuk_kadaster_referentie_href;

				public String getIngeschreven_kadaster_stuk_kadaster_referentie_href () {
					return this.ingeschreven_kadaster_stuk_kadaster_referentie_href;
				}
				
			    public String ingeschreven_kadaster_stuk_stuk_referentie_type;

				public String getIngeschreven_kadaster_stuk_stuk_referentie_type () {
					return this.ingeschreven_kadaster_stuk_stuk_referentie_type;
				}
				
			    public String ingeschreven_kadaster_stuk_stuk_referentie_href;

				public String getIngeschreven_kadaster_stuk_stuk_referentie_href () {
					return this.ingeschreven_kadaster_stuk_stuk_referentie_href;
				}
				
			    public String ingeschreven_kadaster_akrportefeuillenr;

				public String getIngeschreven_kadaster_akrportefeuillenr () {
					return this.ingeschreven_kadaster_akrportefeuillenr;
				}
				
			    public String ingeschreven_tia_stuk_kadastester_referentie_type;

				public String getIngeschreven_tia_stuk_kadastester_referentie_type () {
					return this.ingeschreven_tia_stuk_kadastester_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_kadastester_referentie_href;

				public String getIngeschreven_tia_stuk_kadastester_referentie_href () {
					return this.ingeschreven_tia_stuk_kadastester_referentie_href;
				}
				
			    public String ingeschreven_tia_stuk_tia_referentie_type;

				public String getIngeschreven_tia_stuk_tia_referentie_type () {
					return this.ingeschreven_tia_stuk_tia_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_tia_referentie_href;

				public String getIngeschreven_tia_stuk_tia_referentie_href () {
					return this.ingeschreven_tia_stuk_tia_referentie_href;
				}
				
			    public String ingeschreven_tia_stuk_stuk_referentie_type;

				public String getIngeschreven_tia_stuk_stuk_referentie_type () {
					return this.ingeschreven_tia_stuk_stuk_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_stuk_referentie_href;

				public String getIngeschreven_tia_stuk_stuk_referentie_href () {
					return this.ingeschreven_tia_stuk_stuk_referentie_href;
				}
				
			    public String ingeschreven_tia_deel;

				public String getIngeschreven_tia_deel () {
					return this.ingeschreven_tia_deel;
				}
				
			    public String ingeschreven_tia_nummer;

				public String getIngeschreven_tia_nummer () {
					return this.ingeschreven_tia_nummer;
				}
				
			    public String ingeschreven_tia_deelnummer_reeks_code;

				public String getIngeschreven_tia_deelnummer_reeks_code () {
					return this.ingeschreven_tia_deelnummer_reeks_code;
				}
				
			    public String ingeschreven_tia_deelnummer_reeks_waarde;

				public String getIngeschreven_tia_deelnummer_reeks_waarde () {
					return this.ingeschreven_tia_deelnummer_reeks_waarde;
				}
				
			    public String ingeschreven_tia_deelnummer_register_code;

				public String getIngeschreven_tia_deelnummer_register_code () {
					return this.ingeschreven_tia_deelnummer_register_code;
				}
				
			    public String ingeschreven_tia_deelnummer_register_waarde;

				public String getIngeschreven_tia_deelnummer_register_waarde () {
					return this.ingeschreven_tia_deelnummer_register_waarde;
				}
				
			    public String ingeschreven_tia_deelnummer_soort_register_code;

				public String getIngeschreven_tia_deelnummer_soort_register_code () {
					return this.ingeschreven_tia_deelnummer_soort_register_code;
				}
				
			    public String ingeschreven_tia_deelnummer_soort_register_waarde;

				public String getIngeschreven_tia_deelnummer_soort_register_waarde () {
					return this.ingeschreven_tia_deelnummer_soort_register_waarde;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_create_fill_metadata_table.length) {
				if(length < 1024 && commonByteArray_BRK_create_fill_metadata_table.length == 0) {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[1024];
				} else {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_create_fill_metadata_table, 0, length);
			strReturn = new String(commonByteArray_BRK_create_fill_metadata_table, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
					this.bestand = readString(dis);
					
					this.soort_bestand = readString(dis);
					
					this.startdatum_verwerking = readDate(dis);
					
					this.resultaat_verwerking = readString(dis);
					
					this.selectiecriteria_type_totaalstand = readString(dis);
					
					this.selectiecriteria_kenmerknaam = readString(dis);
					
					this.selectiecriteria_kenmerkwaarde = readString(dis);
					
					this.brk_datum = readDate(dis);
					
						this.volgnummer = readInteger(dis);
					
					this.mutatiesoort = readString(dis);
					
					this.was_snapshot_referentie = readString(dis);
					
					this.was_snapshot_toestandsdatum = readDate(dis);
					
					this.wordt_snapshot_referentie = readString(dis);
					
					this.wordt_snapshot_toestandsdatum = readDate(dis);
					
					this.sectie = readString(dis);
					
						this.perceelnummer = readInteger(dis);
					
						this.appartementsrechtvolgnummer = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.indicatie_deelperceel = null;
           				} else {
           			    	this.indicatie_deelperceel = dis.readBoolean();
           				}
					
					this.object_referentie = readString(dis);
					
					this.object_soort = readString(dis);
					
					this.burgerlijke_gemeente_code = readString(dis);
					
					this.burgerlijke_gemeente_waarde = readString(dis);
					
					this.akr_kadastrale_gemeente_code = readString(dis);
					
					this.akr_kadastrale_gemeente_waarde = readString(dis);
					
					this.kadastrale_gemeente_code = readString(dis);
					
					this.kadastrale_gemeente_waarde = readString(dis);
					
					this.perceelref_type = readString(dis);
					
					this.perceelref_href = readString(dis);
					
					this.appartementsrecht_type = readString(dis);
					
					this.appartementsrecht_href = readString(dis);
					
					this.aardstukdeel_code = readString(dis);
					
					this.aardstukdeel_waarde = readString(dis);
					
					this.ingeschreven_kadaster_stuk_kadaster_referentie_type = readString(dis);
					
					this.ingeschreven_kadaster_stuk_kadaster_referentie_href = readString(dis);
					
					this.ingeschreven_kadaster_stuk_stuk_referentie_type = readString(dis);
					
					this.ingeschreven_kadaster_stuk_stuk_referentie_href = readString(dis);
					
					this.ingeschreven_kadaster_akrportefeuillenr = readString(dis);
					
					this.ingeschreven_tia_stuk_kadastester_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_kadastester_referentie_href = readString(dis);
					
					this.ingeschreven_tia_stuk_tia_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_tia_referentie_href = readString(dis);
					
					this.ingeschreven_tia_stuk_stuk_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_stuk_referentie_href = readString(dis);
					
					this.ingeschreven_tia_deel = readString(dis);
					
					this.ingeschreven_tia_nummer = readString(dis);
					
					this.ingeschreven_tia_deelnummer_reeks_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_reeks_waarde = readString(dis);
					
					this.ingeschreven_tia_deelnummer_register_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_register_waarde = readString(dis);
					
					this.ingeschreven_tia_deelnummer_soort_register_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_soort_register_waarde = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.bestand,dos);
					
					// String
				
						writeString(this.soort_bestand,dos);
					
					// java.util.Date
				
						writeDate(this.startdatum_verwerking,dos);
					
					// String
				
						writeString(this.resultaat_verwerking,dos);
					
					// String
				
						writeString(this.selectiecriteria_type_totaalstand,dos);
					
					// String
				
						writeString(this.selectiecriteria_kenmerknaam,dos);
					
					// String
				
						writeString(this.selectiecriteria_kenmerkwaarde,dos);
					
					// java.util.Date
				
						writeDate(this.brk_datum,dos);
					
					// Integer
				
						writeInteger(this.volgnummer,dos);
					
					// String
				
						writeString(this.mutatiesoort,dos);
					
					// String
				
						writeString(this.was_snapshot_referentie,dos);
					
					// java.util.Date
				
						writeDate(this.was_snapshot_toestandsdatum,dos);
					
					// String
				
						writeString(this.wordt_snapshot_referentie,dos);
					
					// java.util.Date
				
						writeDate(this.wordt_snapshot_toestandsdatum,dos);
					
					// String
				
						writeString(this.sectie,dos);
					
					// Integer
				
						writeInteger(this.perceelnummer,dos);
					
					// Integer
				
						writeInteger(this.appartementsrechtvolgnummer,dos);
					
					// Boolean
				
						if(this.indicatie_deelperceel == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.indicatie_deelperceel);
		            	}
					
					// String
				
						writeString(this.object_referentie,dos);
					
					// String
				
						writeString(this.object_soort,dos);
					
					// String
				
						writeString(this.burgerlijke_gemeente_code,dos);
					
					// String
				
						writeString(this.burgerlijke_gemeente_waarde,dos);
					
					// String
				
						writeString(this.akr_kadastrale_gemeente_code,dos);
					
					// String
				
						writeString(this.akr_kadastrale_gemeente_waarde,dos);
					
					// String
				
						writeString(this.kadastrale_gemeente_code,dos);
					
					// String
				
						writeString(this.kadastrale_gemeente_waarde,dos);
					
					// String
				
						writeString(this.perceelref_type,dos);
					
					// String
				
						writeString(this.perceelref_href,dos);
					
					// String
				
						writeString(this.appartementsrecht_type,dos);
					
					// String
				
						writeString(this.appartementsrecht_href,dos);
					
					// String
				
						writeString(this.aardstukdeel_code,dos);
					
					// String
				
						writeString(this.aardstukdeel_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_kadaster_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_kadaster_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_stuk_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_stuk_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_akrportefeuillenr,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_kadastester_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_kadastester_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_tia_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_tia_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_stuk_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_stuk_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deel,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_nummer,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_reeks_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_reeks_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_register_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_register_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_soort_register_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_soort_register_waarde,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("bestand="+bestand);
		sb.append(",soort_bestand="+soort_bestand);
		sb.append(",startdatum_verwerking="+String.valueOf(startdatum_verwerking));
		sb.append(",resultaat_verwerking="+resultaat_verwerking);
		sb.append(",selectiecriteria_type_totaalstand="+selectiecriteria_type_totaalstand);
		sb.append(",selectiecriteria_kenmerknaam="+selectiecriteria_kenmerknaam);
		sb.append(",selectiecriteria_kenmerkwaarde="+selectiecriteria_kenmerkwaarde);
		sb.append(",brk_datum="+String.valueOf(brk_datum));
		sb.append(",volgnummer="+String.valueOf(volgnummer));
		sb.append(",mutatiesoort="+mutatiesoort);
		sb.append(",was_snapshot_referentie="+was_snapshot_referentie);
		sb.append(",was_snapshot_toestandsdatum="+String.valueOf(was_snapshot_toestandsdatum));
		sb.append(",wordt_snapshot_referentie="+wordt_snapshot_referentie);
		sb.append(",wordt_snapshot_toestandsdatum="+String.valueOf(wordt_snapshot_toestandsdatum));
		sb.append(",sectie="+sectie);
		sb.append(",perceelnummer="+String.valueOf(perceelnummer));
		sb.append(",appartementsrechtvolgnummer="+String.valueOf(appartementsrechtvolgnummer));
		sb.append(",indicatie_deelperceel="+String.valueOf(indicatie_deelperceel));
		sb.append(",object_referentie="+object_referentie);
		sb.append(",object_soort="+object_soort);
		sb.append(",burgerlijke_gemeente_code="+burgerlijke_gemeente_code);
		sb.append(",burgerlijke_gemeente_waarde="+burgerlijke_gemeente_waarde);
		sb.append(",akr_kadastrale_gemeente_code="+akr_kadastrale_gemeente_code);
		sb.append(",akr_kadastrale_gemeente_waarde="+akr_kadastrale_gemeente_waarde);
		sb.append(",kadastrale_gemeente_code="+kadastrale_gemeente_code);
		sb.append(",kadastrale_gemeente_waarde="+kadastrale_gemeente_waarde);
		sb.append(",perceelref_type="+perceelref_type);
		sb.append(",perceelref_href="+perceelref_href);
		sb.append(",appartementsrecht_type="+appartementsrecht_type);
		sb.append(",appartementsrecht_href="+appartementsrecht_href);
		sb.append(",aardstukdeel_code="+aardstukdeel_code);
		sb.append(",aardstukdeel_waarde="+aardstukdeel_waarde);
		sb.append(",ingeschreven_kadaster_stuk_kadaster_referentie_type="+ingeschreven_kadaster_stuk_kadaster_referentie_type);
		sb.append(",ingeschreven_kadaster_stuk_kadaster_referentie_href="+ingeschreven_kadaster_stuk_kadaster_referentie_href);
		sb.append(",ingeschreven_kadaster_stuk_stuk_referentie_type="+ingeschreven_kadaster_stuk_stuk_referentie_type);
		sb.append(",ingeschreven_kadaster_stuk_stuk_referentie_href="+ingeschreven_kadaster_stuk_stuk_referentie_href);
		sb.append(",ingeschreven_kadaster_akrportefeuillenr="+ingeschreven_kadaster_akrportefeuillenr);
		sb.append(",ingeschreven_tia_stuk_kadastester_referentie_type="+ingeschreven_tia_stuk_kadastester_referentie_type);
		sb.append(",ingeschreven_tia_stuk_kadastester_referentie_href="+ingeschreven_tia_stuk_kadastester_referentie_href);
		sb.append(",ingeschreven_tia_stuk_tia_referentie_type="+ingeschreven_tia_stuk_tia_referentie_type);
		sb.append(",ingeschreven_tia_stuk_tia_referentie_href="+ingeschreven_tia_stuk_tia_referentie_href);
		sb.append(",ingeschreven_tia_stuk_stuk_referentie_type="+ingeschreven_tia_stuk_stuk_referentie_type);
		sb.append(",ingeschreven_tia_stuk_stuk_referentie_href="+ingeschreven_tia_stuk_stuk_referentie_href);
		sb.append(",ingeschreven_tia_deel="+ingeschreven_tia_deel);
		sb.append(",ingeschreven_tia_nummer="+ingeschreven_tia_nummer);
		sb.append(",ingeschreven_tia_deelnummer_reeks_code="+ingeschreven_tia_deelnummer_reeks_code);
		sb.append(",ingeschreven_tia_deelnummer_reeks_waarde="+ingeschreven_tia_deelnummer_reeks_waarde);
		sb.append(",ingeschreven_tia_deelnummer_register_code="+ingeschreven_tia_deelnummer_register_code);
		sb.append(",ingeschreven_tia_deelnummer_register_waarde="+ingeschreven_tia_deelnummer_register_waarde);
		sb.append(",ingeschreven_tia_deelnummer_soort_register_code="+ingeschreven_tia_deelnummer_soort_register_code);
		sb.append(",ingeschreven_tia_deelnummer_soort_register_waarde="+ingeschreven_tia_deelnummer_soort_register_waarde);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public String bestand;

				public String getBestand () {
					return this.bestand;
				}
				
			    public String soort_bestand;

				public String getSoort_bestand () {
					return this.soort_bestand;
				}
				
			    public java.util.Date startdatum_verwerking;

				public java.util.Date getStartdatum_verwerking () {
					return this.startdatum_verwerking;
				}
				
			    public String resultaat_verwerking;

				public String getResultaat_verwerking () {
					return this.resultaat_verwerking;
				}
				
			    public String selectiecriteria_type_totaalstand;

				public String getSelectiecriteria_type_totaalstand () {
					return this.selectiecriteria_type_totaalstand;
				}
				
			    public String selectiecriteria_kenmerknaam;

				public String getSelectiecriteria_kenmerknaam () {
					return this.selectiecriteria_kenmerknaam;
				}
				
			    public String selectiecriteria_kenmerkwaarde;

				public String getSelectiecriteria_kenmerkwaarde () {
					return this.selectiecriteria_kenmerkwaarde;
				}
				
			    public Integer volgnummer;

				public Integer getVolgnummer () {
					return this.volgnummer;
				}
				
			    public String mutatiesoort;

				public String getMutatiesoort () {
					return this.mutatiesoort;
				}
				
			    public String was_snapshot_referentie;

				public String getWas_snapshot_referentie () {
					return this.was_snapshot_referentie;
				}
				
			    public java.util.Date was_snapshot_toestandsdatum;

				public java.util.Date getWas_snapshot_toestandsdatum () {
					return this.was_snapshot_toestandsdatum;
				}
				
			    public String wordt_snapshot_referentie;

				public String getWordt_snapshot_referentie () {
					return this.wordt_snapshot_referentie;
				}
				
			    public java.util.Date wordt_snapshot_toestandsdatum;

				public java.util.Date getWordt_snapshot_toestandsdatum () {
					return this.wordt_snapshot_toestandsdatum;
				}
				
			    public String sectie;

				public String getSectie () {
					return this.sectie;
				}
				
			    public Integer perceelnummer;

				public Integer getPerceelnummer () {
					return this.perceelnummer;
				}
				
			    public Integer appartementsrechtvolgnummer;

				public Integer getAppartementsrechtvolgnummer () {
					return this.appartementsrechtvolgnummer;
				}
				
			    public Boolean indicatie_deelperceel;

				public Boolean getIndicatie_deelperceel () {
					return this.indicatie_deelperceel;
				}
				
			    public String object_referentie;

				public String getObject_referentie () {
					return this.object_referentie;
				}
				
			    public String object_soort;

				public String getObject_soort () {
					return this.object_soort;
				}
				
			    public String akr_kadastrale_gemeente_code;

				public String getAkr_kadastrale_gemeente_code () {
					return this.akr_kadastrale_gemeente_code;
				}
				
			    public String akr_kadastrale_gemeente_waarde;

				public String getAkr_kadastrale_gemeente_waarde () {
					return this.akr_kadastrale_gemeente_waarde;
				}
				
			    public String kadastrale_gemeente_code;

				public String getKadastrale_gemeente_code () {
					return this.kadastrale_gemeente_code;
				}
				
			    public String kadastrale_gemeente_waarde;

				public String getKadastrale_gemeente_waarde () {
					return this.kadastrale_gemeente_waarde;
				}
				
			    public String perceelref_type;

				public String getPerceelref_type () {
					return this.perceelref_type;
				}
				
			    public String perceelref_href;

				public String getPerceelref_href () {
					return this.perceelref_href;
				}
				
			    public String appartementsrecht_type;

				public String getAppartementsrecht_type () {
					return this.appartementsrecht_type;
				}
				
			    public String appartementsrecht_href;

				public String getAppartementsrecht_href () {
					return this.appartementsrecht_href;
				}
				
			    public String aardstukdeel_code;

				public String getAardstukdeel_code () {
					return this.aardstukdeel_code;
				}
				
			    public String aardstukdeel_waarde;

				public String getAardstukdeel_waarde () {
					return this.aardstukdeel_waarde;
				}
				
			    public String ingeschreven_kadaster_stuk_kadaster_referentie_type;

				public String getIngeschreven_kadaster_stuk_kadaster_referentie_type () {
					return this.ingeschreven_kadaster_stuk_kadaster_referentie_type;
				}
				
			    public String ingeschreven_kadaster_stuk_kadaster_referentie_href;

				public String getIngeschreven_kadaster_stuk_kadaster_referentie_href () {
					return this.ingeschreven_kadaster_stuk_kadaster_referentie_href;
				}
				
			    public String ingeschreven_kadaster_stuk_stuk_referentie_type;

				public String getIngeschreven_kadaster_stuk_stuk_referentie_type () {
					return this.ingeschreven_kadaster_stuk_stuk_referentie_type;
				}
				
			    public String ingeschreven_kadaster_stuk_stuk_referentie_href;

				public String getIngeschreven_kadaster_stuk_stuk_referentie_href () {
					return this.ingeschreven_kadaster_stuk_stuk_referentie_href;
				}
				
			    public String ingeschreven_kadaster_akrportefeuillenr;

				public String getIngeschreven_kadaster_akrportefeuillenr () {
					return this.ingeschreven_kadaster_akrportefeuillenr;
				}
				
			    public String ingeschreven_tia_stuk_kadastester_referentie_type;

				public String getIngeschreven_tia_stuk_kadastester_referentie_type () {
					return this.ingeschreven_tia_stuk_kadastester_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_kadastester_referentie_href;

				public String getIngeschreven_tia_stuk_kadastester_referentie_href () {
					return this.ingeschreven_tia_stuk_kadastester_referentie_href;
				}
				
			    public String ingeschreven_tia_stuk_tia_referentie_type;

				public String getIngeschreven_tia_stuk_tia_referentie_type () {
					return this.ingeschreven_tia_stuk_tia_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_tia_referentie_href;

				public String getIngeschreven_tia_stuk_tia_referentie_href () {
					return this.ingeschreven_tia_stuk_tia_referentie_href;
				}
				
			    public String ingeschreven_tia_stuk_stuk_referentie_type;

				public String getIngeschreven_tia_stuk_stuk_referentie_type () {
					return this.ingeschreven_tia_stuk_stuk_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_stuk_referentie_href;

				public String getIngeschreven_tia_stuk_stuk_referentie_href () {
					return this.ingeschreven_tia_stuk_stuk_referentie_href;
				}
				
			    public String ingeschreven_tia_deel;

				public String getIngeschreven_tia_deel () {
					return this.ingeschreven_tia_deel;
				}
				
			    public String ingeschreven_tia_nummer;

				public String getIngeschreven_tia_nummer () {
					return this.ingeschreven_tia_nummer;
				}
				
			    public String ingeschreven_tia_deelnummer_reeks_code;

				public String getIngeschreven_tia_deelnummer_reeks_code () {
					return this.ingeschreven_tia_deelnummer_reeks_code;
				}
				
			    public String ingeschreven_tia_deelnummer_reeks_waarde;

				public String getIngeschreven_tia_deelnummer_reeks_waarde () {
					return this.ingeschreven_tia_deelnummer_reeks_waarde;
				}
				
			    public String ingeschreven_tia_deelnummer_register_code;

				public String getIngeschreven_tia_deelnummer_register_code () {
					return this.ingeschreven_tia_deelnummer_register_code;
				}
				
			    public String ingeschreven_tia_deelnummer_register_waarde;

				public String getIngeschreven_tia_deelnummer_register_waarde () {
					return this.ingeschreven_tia_deelnummer_register_waarde;
				}
				
			    public String ingeschreven_tia_deelnummer_soort_register_code;

				public String getIngeschreven_tia_deelnummer_soort_register_code () {
					return this.ingeschreven_tia_deelnummer_soort_register_code;
				}
				
			    public String ingeschreven_tia_deelnummer_soort_register_waarde;

				public String getIngeschreven_tia_deelnummer_soort_register_waarde () {
					return this.ingeschreven_tia_deelnummer_soort_register_waarde;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_create_fill_metadata_table.length) {
				if(length < 1024 && commonByteArray_BRK_create_fill_metadata_table.length == 0) {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[1024];
				} else {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_create_fill_metadata_table, 0, length);
			strReturn = new String(commonByteArray_BRK_create_fill_metadata_table, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
					this.bestand = readString(dis);
					
					this.soort_bestand = readString(dis);
					
					this.startdatum_verwerking = readDate(dis);
					
					this.resultaat_verwerking = readString(dis);
					
					this.selectiecriteria_type_totaalstand = readString(dis);
					
					this.selectiecriteria_kenmerknaam = readString(dis);
					
					this.selectiecriteria_kenmerkwaarde = readString(dis);
					
						this.volgnummer = readInteger(dis);
					
					this.mutatiesoort = readString(dis);
					
					this.was_snapshot_referentie = readString(dis);
					
					this.was_snapshot_toestandsdatum = readDate(dis);
					
					this.wordt_snapshot_referentie = readString(dis);
					
					this.wordt_snapshot_toestandsdatum = readDate(dis);
					
					this.sectie = readString(dis);
					
						this.perceelnummer = readInteger(dis);
					
						this.appartementsrechtvolgnummer = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.indicatie_deelperceel = null;
           				} else {
           			    	this.indicatie_deelperceel = dis.readBoolean();
           				}
					
					this.object_referentie = readString(dis);
					
					this.object_soort = readString(dis);
					
					this.akr_kadastrale_gemeente_code = readString(dis);
					
					this.akr_kadastrale_gemeente_waarde = readString(dis);
					
					this.kadastrale_gemeente_code = readString(dis);
					
					this.kadastrale_gemeente_waarde = readString(dis);
					
					this.perceelref_type = readString(dis);
					
					this.perceelref_href = readString(dis);
					
					this.appartementsrecht_type = readString(dis);
					
					this.appartementsrecht_href = readString(dis);
					
					this.aardstukdeel_code = readString(dis);
					
					this.aardstukdeel_waarde = readString(dis);
					
					this.ingeschreven_kadaster_stuk_kadaster_referentie_type = readString(dis);
					
					this.ingeschreven_kadaster_stuk_kadaster_referentie_href = readString(dis);
					
					this.ingeschreven_kadaster_stuk_stuk_referentie_type = readString(dis);
					
					this.ingeschreven_kadaster_stuk_stuk_referentie_href = readString(dis);
					
					this.ingeschreven_kadaster_akrportefeuillenr = readString(dis);
					
					this.ingeschreven_tia_stuk_kadastester_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_kadastester_referentie_href = readString(dis);
					
					this.ingeschreven_tia_stuk_tia_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_tia_referentie_href = readString(dis);
					
					this.ingeschreven_tia_stuk_stuk_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_stuk_referentie_href = readString(dis);
					
					this.ingeschreven_tia_deel = readString(dis);
					
					this.ingeschreven_tia_nummer = readString(dis);
					
					this.ingeschreven_tia_deelnummer_reeks_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_reeks_waarde = readString(dis);
					
					this.ingeschreven_tia_deelnummer_register_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_register_waarde = readString(dis);
					
					this.ingeschreven_tia_deelnummer_soort_register_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_soort_register_waarde = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.bestand,dos);
					
					// String
				
						writeString(this.soort_bestand,dos);
					
					// java.util.Date
				
						writeDate(this.startdatum_verwerking,dos);
					
					// String
				
						writeString(this.resultaat_verwerking,dos);
					
					// String
				
						writeString(this.selectiecriteria_type_totaalstand,dos);
					
					// String
				
						writeString(this.selectiecriteria_kenmerknaam,dos);
					
					// String
				
						writeString(this.selectiecriteria_kenmerkwaarde,dos);
					
					// Integer
				
						writeInteger(this.volgnummer,dos);
					
					// String
				
						writeString(this.mutatiesoort,dos);
					
					// String
				
						writeString(this.was_snapshot_referentie,dos);
					
					// java.util.Date
				
						writeDate(this.was_snapshot_toestandsdatum,dos);
					
					// String
				
						writeString(this.wordt_snapshot_referentie,dos);
					
					// java.util.Date
				
						writeDate(this.wordt_snapshot_toestandsdatum,dos);
					
					// String
				
						writeString(this.sectie,dos);
					
					// Integer
				
						writeInteger(this.perceelnummer,dos);
					
					// Integer
				
						writeInteger(this.appartementsrechtvolgnummer,dos);
					
					// Boolean
				
						if(this.indicatie_deelperceel == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.indicatie_deelperceel);
		            	}
					
					// String
				
						writeString(this.object_referentie,dos);
					
					// String
				
						writeString(this.object_soort,dos);
					
					// String
				
						writeString(this.akr_kadastrale_gemeente_code,dos);
					
					// String
				
						writeString(this.akr_kadastrale_gemeente_waarde,dos);
					
					// String
				
						writeString(this.kadastrale_gemeente_code,dos);
					
					// String
				
						writeString(this.kadastrale_gemeente_waarde,dos);
					
					// String
				
						writeString(this.perceelref_type,dos);
					
					// String
				
						writeString(this.perceelref_href,dos);
					
					// String
				
						writeString(this.appartementsrecht_type,dos);
					
					// String
				
						writeString(this.appartementsrecht_href,dos);
					
					// String
				
						writeString(this.aardstukdeel_code,dos);
					
					// String
				
						writeString(this.aardstukdeel_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_kadaster_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_kadaster_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_stuk_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_stuk_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_akrportefeuillenr,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_kadastester_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_kadastester_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_tia_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_tia_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_stuk_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_stuk_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deel,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_nummer,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_reeks_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_reeks_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_register_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_register_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_soort_register_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_soort_register_waarde,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("bestand="+bestand);
		sb.append(",soort_bestand="+soort_bestand);
		sb.append(",startdatum_verwerking="+String.valueOf(startdatum_verwerking));
		sb.append(",resultaat_verwerking="+resultaat_verwerking);
		sb.append(",selectiecriteria_type_totaalstand="+selectiecriteria_type_totaalstand);
		sb.append(",selectiecriteria_kenmerknaam="+selectiecriteria_kenmerknaam);
		sb.append(",selectiecriteria_kenmerkwaarde="+selectiecriteria_kenmerkwaarde);
		sb.append(",volgnummer="+String.valueOf(volgnummer));
		sb.append(",mutatiesoort="+mutatiesoort);
		sb.append(",was_snapshot_referentie="+was_snapshot_referentie);
		sb.append(",was_snapshot_toestandsdatum="+String.valueOf(was_snapshot_toestandsdatum));
		sb.append(",wordt_snapshot_referentie="+wordt_snapshot_referentie);
		sb.append(",wordt_snapshot_toestandsdatum="+String.valueOf(wordt_snapshot_toestandsdatum));
		sb.append(",sectie="+sectie);
		sb.append(",perceelnummer="+String.valueOf(perceelnummer));
		sb.append(",appartementsrechtvolgnummer="+String.valueOf(appartementsrechtvolgnummer));
		sb.append(",indicatie_deelperceel="+String.valueOf(indicatie_deelperceel));
		sb.append(",object_referentie="+object_referentie);
		sb.append(",object_soort="+object_soort);
		sb.append(",akr_kadastrale_gemeente_code="+akr_kadastrale_gemeente_code);
		sb.append(",akr_kadastrale_gemeente_waarde="+akr_kadastrale_gemeente_waarde);
		sb.append(",kadastrale_gemeente_code="+kadastrale_gemeente_code);
		sb.append(",kadastrale_gemeente_waarde="+kadastrale_gemeente_waarde);
		sb.append(",perceelref_type="+perceelref_type);
		sb.append(",perceelref_href="+perceelref_href);
		sb.append(",appartementsrecht_type="+appartementsrecht_type);
		sb.append(",appartementsrecht_href="+appartementsrecht_href);
		sb.append(",aardstukdeel_code="+aardstukdeel_code);
		sb.append(",aardstukdeel_waarde="+aardstukdeel_waarde);
		sb.append(",ingeschreven_kadaster_stuk_kadaster_referentie_type="+ingeschreven_kadaster_stuk_kadaster_referentie_type);
		sb.append(",ingeschreven_kadaster_stuk_kadaster_referentie_href="+ingeschreven_kadaster_stuk_kadaster_referentie_href);
		sb.append(",ingeschreven_kadaster_stuk_stuk_referentie_type="+ingeschreven_kadaster_stuk_stuk_referentie_type);
		sb.append(",ingeschreven_kadaster_stuk_stuk_referentie_href="+ingeschreven_kadaster_stuk_stuk_referentie_href);
		sb.append(",ingeschreven_kadaster_akrportefeuillenr="+ingeschreven_kadaster_akrportefeuillenr);
		sb.append(",ingeschreven_tia_stuk_kadastester_referentie_type="+ingeschreven_tia_stuk_kadastester_referentie_type);
		sb.append(",ingeschreven_tia_stuk_kadastester_referentie_href="+ingeschreven_tia_stuk_kadastester_referentie_href);
		sb.append(",ingeschreven_tia_stuk_tia_referentie_type="+ingeschreven_tia_stuk_tia_referentie_type);
		sb.append(",ingeschreven_tia_stuk_tia_referentie_href="+ingeschreven_tia_stuk_tia_referentie_href);
		sb.append(",ingeschreven_tia_stuk_stuk_referentie_type="+ingeschreven_tia_stuk_stuk_referentie_type);
		sb.append(",ingeschreven_tia_stuk_stuk_referentie_href="+ingeschreven_tia_stuk_stuk_referentie_href);
		sb.append(",ingeschreven_tia_deel="+ingeschreven_tia_deel);
		sb.append(",ingeschreven_tia_nummer="+ingeschreven_tia_nummer);
		sb.append(",ingeschreven_tia_deelnummer_reeks_code="+ingeschreven_tia_deelnummer_reeks_code);
		sb.append(",ingeschreven_tia_deelnummer_reeks_waarde="+ingeschreven_tia_deelnummer_reeks_waarde);
		sb.append(",ingeschreven_tia_deelnummer_register_code="+ingeschreven_tia_deelnummer_register_code);
		sb.append(",ingeschreven_tia_deelnummer_register_waarde="+ingeschreven_tia_deelnummer_register_waarde);
		sb.append(",ingeschreven_tia_deelnummer_soort_register_code="+ingeschreven_tia_deelnummer_soort_register_code);
		sb.append(",ingeschreven_tia_deelnummer_soort_register_waarde="+ingeschreven_tia_deelnummer_soort_register_waarde);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public routines.system.Document content;

				public routines.system.Document getContent () {
					return this.content;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
						this.content = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("content="+String.valueOf(content));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputXML_1Struct implements routines.system.IPersistableRow<after_tFileInputXML_1Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public routines.system.Document content;

				public routines.system.Document getContent () {
					return this.content;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
						this.content = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("content="+String.valueOf(content));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputXML_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputXML_4Process(globalMap);

		row1Struct row1 = new row1Struct();
out3Struct out3 = new out3Struct();
out5Struct out5 = new out5Struct();




	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tXMLMap_4_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_4_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_4_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_4_TXMLMAP_OUT__Struct Var__tXMLMap_4_TXMLMAP_OUT = new Var__tXMLMap_4_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
out3Struct out3_save = null;
//the aggregate variable
out3Struct out3_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_4 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_4",allOutsForAggregate_tXMLMap_4);
// ###############################
class TreeNode_API_tXMLMap_4_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
}
			TreeNode_API_tXMLMap_4_TXMLMAP_OUT treeNodeAPI_tXMLMap_4_TXMLMAP_OUT = new TreeNode_API_tXMLMap_4_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_4_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_4_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_4_TXMLMAP_OUT xml_api_tXMLMap_4_TXMLMAP_OUT = new XML_API_tXMLMap_4_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_4_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_4_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";

	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"."		
	,"."+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	true		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper(context.xmlType,queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("ISO-8859-15");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.xmlLocation;
} catch(java.lang.Exception e) {
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get(".");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("."+"/@xsi:nil")};	
										if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.content =null;
										}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1) || xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)){
											row1.content=null;
										}else{
		row1.content = ParserUtils.parseTo_Document(str_tFileInputXML_1);
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

			//row1
			//row1


			
				
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				}
				
				
				
			

		

	boolean rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_4_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_4_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setOriginalLoop("/KadastraalObjectSnapshot");
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setIsOptional(false);
				if(row1.content == null || row1.content.getDocument() == null) {
					throw new RuntimeException("row1.content can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_4_TXMLMAP_OUT = row1.content.getDocument();
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setDoc(doc_tXMLMap_4_TXMLMAP_OUT);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_4_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_4_TXMLMAP_OUT.countNSMap(doc_tXMLMap_4_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT = nsTool_tXMLMap_4_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_4_TXMLMAP_OUT = new String[21];
				String[] relativePathMappings_tXMLMap_4_TXMLMAP_OUT = new String[21];
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[0] = "row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/code";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[0] = "Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/code";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[1] = "row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[1] = "Appartementsrecht/identificatie/lokaalId";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[2] = "row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[2] = "Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[3] = "row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/code";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[3] = "Perceel/kadastraleAanduiding/naamKadastraleGemeente/code";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[4] = "row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[4] = "Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[5] = "row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[5] = "Appartementsrecht/identificatie/namespace";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[6] = "row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[6] = "Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[7] = "row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[7] = "Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[8] = "row1.content:/KadastraalObjectSnapshot/Perceel/identificatie/namespace";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[8] = "Perceel/identificatie/namespace";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[9] = "row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[9] = "Appartementsrecht/kadastraleAanduiding/sectie";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[10] = "row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/perceelnummer";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[10] = "Perceel/kadastraleAanduiding/perceelnummer";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[11] = "row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/sectie";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[11] = "Perceel/kadastraleAanduiding/sectie";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[12] = "row1.content:/KadastraalObjectSnapshot/Perceel/indicatieDeelperceel";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[12] = "Perceel/indicatieDeelperceel";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[13] = "row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/waarde";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[13] = "Perceel/kadastraleAanduiding/naamKadastraleGemeente/waarde";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[14] = "row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[14] = "Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[15] = "row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[15] = "Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[16] = "row1.content:/KadastraalObjectSnapshot/toestandsdatum";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[16] = "toestandsdatum";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[17] = "row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/appartementsrechtVolgnummer";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[17] = "Perceel/kadastraleAanduiding/appartementsrechtVolgnummer";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[18] = "row1.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[18] = "Perceel/identificatie/lokaalId";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[19] = "row1.content:/KadastraalObjectSnapshot/referentie";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[19] = "referentie";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[20] = "row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[20] = "Appartementsrecht/kadastraleAanduiding/perceelnummer";
				
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_4_TXMLMAP_OUT);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_4_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_4_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_4_TXMLMAP_OUT = docToFlat_tXMLMap_4_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_4_TXMLMAP_OUT: resultSet_tXMLMap_4_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_4_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_4_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_4_TXMLMAP_OUT : oneRow_tXMLMap_4_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.put(entry_tXMLMap_4_TXMLMAP_OUT.getKey(),entry_tXMLMap_4_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_4_TXMLMAP_OUT__Struct Var = Var__tXMLMap_4_TXMLMAP_OUT;
		// ###############################
		// # Output tables

out3 = null;


// # Output table : 'out3'

out3_tmp = new out3Struct();
out3_tmp.bestand = "brk_init.zip";
out3_tmp.soort_bestand = "Initieel bestand o.b.v gemeente" ;
out3_tmp.startdatum_verwerking = TalendDate.getCurrentDate();
out3_tmp.resultaat_verwerking = "Nog te verwerken";
out3_tmp.selectiecriteria_type_totaalstand = null;
out3_tmp.selectiecriteria_kenmerknaam = null;
out3_tmp.selectiecriteria_kenmerkwaarde = null;
out3_tmp.volgnummer = 0;
out3_tmp.mutatiesoort = "Geen";
out3_tmp.was_snapshot_referentie = null;
out3_tmp.was_snapshot_toestandsdatum = null;
out3_tmp.wordt_snapshot_referentie = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
out3_tmp.wordt_snapshot_toestandsdatum = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Date("row1.content:/KadastraalObjectSnapshot/toestandsdatum" , "yyyy-MM-dd");
out3_tmp.sectie = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/sectie")==null? treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie"):treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/sectie")  ;
out3_tmp.perceelnummer = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/perceelnummer")==null? treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer"):treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/perceelnummer") ;
out3_tmp.appartementsrechtvolgnummer = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/appartementsrechtVolgnummer")==null? treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer"):treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/appartementsrechtVolgnummer");
out3_tmp.indicatie_deelperceel = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Boolean("row1.content:/KadastraalObjectSnapshot/Perceel/indicatieDeelperceel");
out3_tmp.object_referentie = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId") == null? treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId"):treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId");
out3_tmp.object_soort = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId") == null? (treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId") == null? "Onbekend":"Appartementsrecht"):"Perceel";
out3_tmp.akr_kadastrale_gemeente_code = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/code") == null? treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code"):treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
out3_tmp.akr_kadastrale_gemeente_waarde = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde") == null? treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde"):treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
out3_tmp.kadastrale_gemeente_code = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/code") == null?  treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code"): treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/code");
out3_tmp.kadastrale_gemeente_waarde = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/waarde") == null?  treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde"): treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/waarde");
out3_tmp.perceelref_type = null;
out3_tmp.perceelref_href = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId") == null? null:treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/identificatie/namespace")+"."+treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId");
out3_tmp.appartementsrecht_type = null;
out3_tmp.appartementsrecht_href = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId") == null? null:treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace")+"."+treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId");
out3_tmp.aardstukdeel_code = null;
out3_tmp.aardstukdeel_waarde = null;
out3_tmp.ingeschreven_kadaster_stuk_kadaster_referentie_type = null;
out3_tmp.ingeschreven_kadaster_stuk_kadaster_referentie_href = null;
out3_tmp.ingeschreven_kadaster_stuk_stuk_referentie_type = null;
out3_tmp.ingeschreven_kadaster_stuk_stuk_referentie_href = null;
out3_tmp.ingeschreven_kadaster_akrportefeuillenr = null;
out3_tmp.ingeschreven_tia_stuk_kadastester_referentie_type = null;
out3_tmp.ingeschreven_tia_stuk_kadastester_referentie_href = null;
out3_tmp.ingeschreven_tia_stuk_tia_referentie_type = null;
out3_tmp.ingeschreven_tia_stuk_tia_referentie_href = null;
out3_tmp.ingeschreven_tia_stuk_stuk_referentie_type = null;
out3_tmp.ingeschreven_tia_stuk_stuk_referentie_href = null;
out3_tmp.ingeschreven_tia_deel = null;
out3_tmp.ingeschreven_tia_nummer = null;
out3_tmp.ingeschreven_tia_deelnummer_reeks_code = null;
out3_tmp.ingeschreven_tia_deelnummer_reeks_waarde = null;
out3_tmp.ingeschreven_tia_deelnummer_register_code = null;
out3_tmp.ingeschreven_tia_deelnummer_register_waarde = null;
out3_tmp.ingeschreven_tia_deelnummer_soort_register_code = null;
out3_tmp.ingeschreven_tia_deelnummer_soort_register_waarde = null;allOutsForAggregate_tXMLMap_4.add(out3_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_4_TXMLMAP_OUT++;

/**
 * [tXMLMap_4_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	
 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	




			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_4_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("out5"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = "metadata_bronbestanden_brk";
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + "metadata_bronbestanden_brk";
}

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_3 = "public";
                                    if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_3 = conn_tDBOutput_3.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_3 = stmtSchema_tDBOutput_3.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_3.next()){
                                                defaultSchema_tDBOutput_3 = rsSchema_tDBOutput_3.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_3.next()) {
                                        String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
                                        String schema_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_3.equals("metadata_bronbestanden_brk")
                                            && (schema_tDBOutput_3.equals(dbschema_tDBOutput_3) || ((dbschema_tDBOutput_3 ==null || dbschema_tDBOutput_3.trim().length() ==0) && defaultSchema_tDBOutput_3.equals(schema_tDBOutput_3)))) {
                                            whetherExist_tDBOutput_3 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3 + "\"(\"bestand\" VARCHAR ,\"soort_bestand\" VARCHAR ,\"startdatum_verwerking\" TIMESTAMP ,\"resultaat_verwerking\" VARCHAR ,\"selectiecriteria_type_totaalstand\" VARCHAR ,\"selectiecriteria_kenmerknaam\" VARCHAR ,\"selectiecriteria_kenmerkwaarde\" VARCHAR ,\"brk_datum\" DATE ,\"volgnummer\" INT4 ,\"mutatiesoort\" VARCHAR ,\"was_snapshot_referentie\" VARCHAR ,\"was_snapshot_toestandsdatum\" DATE ,\"wordt_snapshot_referentie\" VARCHAR ,\"wordt_snapshot_toestandsdatum\" DATE ,\"sectie\" VARCHAR ,\"perceelnummer\" INT4 ,\"appartementsrechtvolgnummer\" INT4 ,\"indicatie_deelperceel\" BOOL ,\"object_referentie\" VARCHAR ,\"object_soort\" VARCHAR ,\"burgerlijke_gemeente_code\" VARCHAR ,\"burgerlijke_gemeente_waarde\" VARCHAR ,\"akr_kadastrale_gemeente_code\" VARCHAR ,\"akr_kadastrale_gemeente_waarde\" VARCHAR ,\"kadastrale_gemeente_code\" VARCHAR ,\"kadastrale_gemeente_waarde\" VARCHAR ,\"perceelref_type\" VARCHAR ,\"perceelref_href\" VARCHAR ,\"appartementsrecht_type\" VARCHAR ,\"appartementsrecht_href\" VARCHAR ,\"aardstukdeel_code\" VARCHAR ,\"aardstukdeel_waarde\" VARCHAR ,\"ingeschreven_kadaster_stuk_kadaster_referentie_type\" VARCHAR ,\"ingeschreven_kadaster_stuk_kadaster_referentie_href\" VARCHAR ,\"ingeschreven_kadaster_stuk_stuk_referentie_type\" VARCHAR ,\"ingeschreven_kadaster_stuk_stuk_referentie_href\" VARCHAR ,\"ingeschreven_kadaster_akrportefeuillenr\" VARCHAR ,\"ingeschreven_tia_stuk_kadastester_referentie_type\" VARCHAR ,\"ingeschreven_tia_stuk_kadastester_referentie_href\" VARCHAR ,\"ingeschreven_tia_stuk_tia_referentie_type\" VARCHAR ,\"ingeschreven_tia_stuk_tia_referentie_href\" VARCHAR ,\"ingeschreven_tia_stuk_stuk_referentie_type\" VARCHAR ,\"ingeschreven_tia_stuk_stuk_referentie_href\" VARCHAR ,\"ingeschreven_tia_deel\" VARCHAR ,\"ingeschreven_tia_nummer\" VARCHAR ,\"ingeschreven_tia_deelnummer_reeks_code\" VARCHAR ,\"ingeschreven_tia_deelnummer_reeks_waarde\" VARCHAR ,\"ingeschreven_tia_deelnummer_register_code\" VARCHAR ,\"ingeschreven_tia_deelnummer_register_waarde\" VARCHAR ,\"ingeschreven_tia_deelnummer_soort_register_code\" VARCHAR ,\"ingeschreven_tia_deelnummer_soort_register_waarde\" VARCHAR )");
                                    }
                                }
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"bestand\",\"soort_bestand\",\"startdatum_verwerking\",\"resultaat_verwerking\",\"selectiecriteria_type_totaalstand\",\"selectiecriteria_kenmerknaam\",\"selectiecriteria_kenmerkwaarde\",\"brk_datum\",\"volgnummer\",\"mutatiesoort\",\"was_snapshot_referentie\",\"was_snapshot_toestandsdatum\",\"wordt_snapshot_referentie\",\"wordt_snapshot_toestandsdatum\",\"sectie\",\"perceelnummer\",\"appartementsrechtvolgnummer\",\"indicatie_deelperceel\",\"object_referentie\",\"object_soort\",\"burgerlijke_gemeente_code\",\"burgerlijke_gemeente_waarde\",\"akr_kadastrale_gemeente_code\",\"akr_kadastrale_gemeente_waarde\",\"kadastrale_gemeente_code\",\"kadastrale_gemeente_waarde\",\"perceelref_type\",\"perceelref_href\",\"appartementsrecht_type\",\"appartementsrecht_href\",\"aardstukdeel_code\",\"aardstukdeel_waarde\",\"ingeschreven_kadaster_stuk_kadaster_referentie_type\",\"ingeschreven_kadaster_stuk_kadaster_referentie_href\",\"ingeschreven_kadaster_stuk_stuk_referentie_type\",\"ingeschreven_kadaster_stuk_stuk_referentie_href\",\"ingeschreven_kadaster_akrportefeuillenr\",\"ingeschreven_tia_stuk_kadastester_referentie_type\",\"ingeschreven_tia_stuk_kadastester_referentie_href\",\"ingeschreven_tia_stuk_tia_referentie_type\",\"ingeschreven_tia_stuk_tia_referentie_href\",\"ingeschreven_tia_stuk_stuk_referentie_type\",\"ingeschreven_tia_stuk_stuk_referentie_href\",\"ingeschreven_tia_deel\",\"ingeschreven_tia_nummer\",\"ingeschreven_tia_deelnummer_reeks_code\",\"ingeschreven_tia_deelnummer_reeks_waarde\",\"ingeschreven_tia_deelnummer_register_code\",\"ingeschreven_tia_deelnummer_register_waarde\",\"ingeschreven_tia_deelnummer_soort_register_code\",\"ingeschreven_tia_deelnummer_soort_register_waarde\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("out3"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	
		tHash_Lookup_row13.initGet();
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tXMLMap_4_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_4_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	
		int tos_count_tXMLMap_4_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_4 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_4");
for(Object  row_out_tXMLMap_4_TXMLMAP_IN : outs_tXMLMap_4) {//TD512
 



/**
 * [tXMLMap_4_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

	out3 = null;
	if(row_out_tXMLMap_4_TXMLMAP_IN!=null && row_out_tXMLMap_4_TXMLMAP_IN instanceof out3Struct) {
		out3 = (out3Struct)row_out_tXMLMap_4_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_4_TXMLMAP_IN++;

/**
 * [tXMLMap_4_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//out3
			//out3


			
				
				if(execStat){
					runStat.updateStatOnConnection("out3"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow13 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow13 = true;
			           		  	} // G 21
                    		  	
                    		

							row13Struct row13 = null;
                    		  	 
							

								while ((tHash_Lookup_row13 != null && tHash_Lookup_row13.hasNext()) || forceLooprow13) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row13'
									
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								
								if(!forceLooprow13) { // G 46
								
							
								 
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow13 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.bestand = out3.bestand ;
out5_tmp.soort_bestand = out3.soort_bestand ;
out5_tmp.startdatum_verwerking = out3.startdatum_verwerking ;
out5_tmp.resultaat_verwerking = out3.resultaat_verwerking ;
out5_tmp.selectiecriteria_type_totaalstand = out3.selectiecriteria_type_totaalstand ;
out5_tmp.selectiecriteria_kenmerknaam = out3.selectiecriteria_kenmerknaam ;
out5_tmp.selectiecriteria_kenmerkwaarde = out3.selectiecriteria_kenmerkwaarde ;
out5_tmp.brk_datum = row13.brk_datum ;
out5_tmp.volgnummer = out3.volgnummer ;
out5_tmp.mutatiesoort = out3.mutatiesoort ;
out5_tmp.was_snapshot_referentie = out3.was_snapshot_referentie ;
out5_tmp.was_snapshot_toestandsdatum = out3.was_snapshot_toestandsdatum ;
out5_tmp.wordt_snapshot_referentie = out3.wordt_snapshot_referentie ;
out5_tmp.wordt_snapshot_toestandsdatum = out3.wordt_snapshot_toestandsdatum ;
out5_tmp.sectie = out3.sectie ;
out5_tmp.perceelnummer = out3.perceelnummer ;
out5_tmp.appartementsrechtvolgnummer = out3.appartementsrechtvolgnummer ;
out5_tmp.indicatie_deelperceel = out3.indicatie_deelperceel ;
out5_tmp.object_referentie = out3.object_referentie ;
out5_tmp.object_soort = out3.object_soort ;
out5_tmp.burgerlijke_gemeente_code = row13.burgerlijke_gemeente_code ;
out5_tmp.burgerlijke_gemeente_waarde = row13.burgerlijke_gemeente_waarde ;
out5_tmp.akr_kadastrale_gemeente_code = out3.akr_kadastrale_gemeente_code ;
out5_tmp.akr_kadastrale_gemeente_waarde = out3.akr_kadastrale_gemeente_waarde ;
out5_tmp.kadastrale_gemeente_code = out3.kadastrale_gemeente_code ;
out5_tmp.kadastrale_gemeente_waarde = out3.kadastrale_gemeente_waarde ;
out5_tmp.perceelref_type = out3.perceelref_type ;
out5_tmp.perceelref_href = out3.perceelref_href ;
out5_tmp.appartementsrecht_type = out3.appartementsrecht_type ;
out5_tmp.appartementsrecht_href = out3.appartementsrecht_href ;
out5_tmp.aardstukdeel_code = out3.aardstukdeel_code ;
out5_tmp.aardstukdeel_waarde = out3.aardstukdeel_waarde ;
out5_tmp.ingeschreven_kadaster_stuk_kadaster_referentie_type = out3.ingeschreven_kadaster_stuk_kadaster_referentie_type ;
out5_tmp.ingeschreven_kadaster_stuk_kadaster_referentie_href = out3.ingeschreven_kadaster_stuk_kadaster_referentie_href ;
out5_tmp.ingeschreven_kadaster_stuk_stuk_referentie_type = out3.ingeschreven_kadaster_stuk_stuk_referentie_type ;
out5_tmp.ingeschreven_kadaster_stuk_stuk_referentie_href = out3.ingeschreven_kadaster_stuk_stuk_referentie_href ;
out5_tmp.ingeschreven_kadaster_akrportefeuillenr = out3.ingeschreven_kadaster_akrportefeuillenr ;
out5_tmp.ingeschreven_tia_stuk_kadastester_referentie_type = out3.ingeschreven_tia_stuk_kadastester_referentie_type ;
out5_tmp.ingeschreven_tia_stuk_kadastester_referentie_href = out3.ingeschreven_tia_stuk_kadastester_referentie_href ;
out5_tmp.ingeschreven_tia_stuk_tia_referentie_type = out3.ingeschreven_tia_stuk_tia_referentie_type ;
out5_tmp.ingeschreven_tia_stuk_tia_referentie_href = out3.ingeschreven_tia_stuk_tia_referentie_href ;
out5_tmp.ingeschreven_tia_stuk_stuk_referentie_type = out3.ingeschreven_tia_stuk_stuk_referentie_type ;
out5_tmp.ingeschreven_tia_stuk_stuk_referentie_href = out3.ingeschreven_tia_stuk_stuk_referentie_href ;
out5_tmp.ingeschreven_tia_deel = out3.ingeschreven_tia_deel ;
out5_tmp.ingeschreven_tia_nummer = out3.ingeschreven_tia_nummer ;
out5_tmp.ingeschreven_tia_deelnummer_reeks_code = out3.ingeschreven_tia_deelnummer_reeks_code ;
out5_tmp.ingeschreven_tia_deelnummer_reeks_waarde = out3.ingeschreven_tia_deelnummer_reeks_waarde ;
out5_tmp.ingeschreven_tia_deelnummer_register_code = out3.ingeschreven_tia_deelnummer_register_code ;
out5_tmp.ingeschreven_tia_deelnummer_register_waarde = out3.ingeschreven_tia_deelnummer_register_waarde ;
out5_tmp.ingeschreven_tia_deelnummer_soort_register_code = out3.ingeschreven_tia_deelnummer_soort_register_code ;
out5_tmp.ingeschreven_tia_deelnummer_soort_register_waarde = out3.ingeschreven_tia_deelnummer_soort_register_waarde ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

			//out5
			//out5


			
				
				if(execStat){
					runStat.updateStatOnConnection("out5"+iterateId,1, 1);
				}
				
				
				
			

		



        whetherReject_tDBOutput_3 = false;
                    if(out5.bestand == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, out5.bestand);
}

                    if(out5.soort_bestand == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, out5.soort_bestand);
}

                    if(out5.startdatum_verwerking != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(out5.startdatum_verwerking.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(out5.resultaat_verwerking == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, out5.resultaat_verwerking);
}

                    if(out5.selectiecriteria_type_totaalstand == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, out5.selectiecriteria_type_totaalstand);
}

                    if(out5.selectiecriteria_kenmerknaam == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, out5.selectiecriteria_kenmerknaam);
}

                    if(out5.selectiecriteria_kenmerkwaarde == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, out5.selectiecriteria_kenmerkwaarde);
}

                    if(out5.brk_datum != null) {
pstmt_tDBOutput_3.setTimestamp(8, new java.sql.Timestamp(out5.brk_datum.getTime()));
} else {
pstmt_tDBOutput_3.setNull(8, java.sql.Types.TIMESTAMP);
}

                    if(out5.volgnummer == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(9, out5.volgnummer);
}

                    if(out5.mutatiesoort == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, out5.mutatiesoort);
}

                    if(out5.was_snapshot_referentie == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, out5.was_snapshot_referentie);
}

                    if(out5.was_snapshot_toestandsdatum != null) {
pstmt_tDBOutput_3.setTimestamp(12, new java.sql.Timestamp(out5.was_snapshot_toestandsdatum.getTime()));
} else {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(out5.wordt_snapshot_referentie == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(13, out5.wordt_snapshot_referentie);
}

                    if(out5.wordt_snapshot_toestandsdatum != null) {
pstmt_tDBOutput_3.setTimestamp(14, new java.sql.Timestamp(out5.wordt_snapshot_toestandsdatum.getTime()));
} else {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(out5.sectie == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, out5.sectie);
}

                    if(out5.perceelnummer == null) {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(16, out5.perceelnummer);
}

                    if(out5.appartementsrechtvolgnummer == null) {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(17, out5.appartementsrechtvolgnummer);
}

                    if(out5.indicatie_deelperceel == null) {
pstmt_tDBOutput_3.setNull(18, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(18, out5.indicatie_deelperceel);
}

                    if(out5.object_referentie == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(19, out5.object_referentie);
}

                    if(out5.object_soort == null) {
pstmt_tDBOutput_3.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(20, out5.object_soort);
}

                    if(out5.burgerlijke_gemeente_code == null) {
pstmt_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(21, out5.burgerlijke_gemeente_code);
}

                    if(out5.burgerlijke_gemeente_waarde == null) {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(22, out5.burgerlijke_gemeente_waarde);
}

                    if(out5.akr_kadastrale_gemeente_code == null) {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(23, out5.akr_kadastrale_gemeente_code);
}

                    if(out5.akr_kadastrale_gemeente_waarde == null) {
pstmt_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(24, out5.akr_kadastrale_gemeente_waarde);
}

                    if(out5.kadastrale_gemeente_code == null) {
pstmt_tDBOutput_3.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(25, out5.kadastrale_gemeente_code);
}

                    if(out5.kadastrale_gemeente_waarde == null) {
pstmt_tDBOutput_3.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(26, out5.kadastrale_gemeente_waarde);
}

                    if(out5.perceelref_type == null) {
pstmt_tDBOutput_3.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(27, out5.perceelref_type);
}

                    if(out5.perceelref_href == null) {
pstmt_tDBOutput_3.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(28, out5.perceelref_href);
}

                    if(out5.appartementsrecht_type == null) {
pstmt_tDBOutput_3.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(29, out5.appartementsrecht_type);
}

                    if(out5.appartementsrecht_href == null) {
pstmt_tDBOutput_3.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(30, out5.appartementsrecht_href);
}

                    if(out5.aardstukdeel_code == null) {
pstmt_tDBOutput_3.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(31, out5.aardstukdeel_code);
}

                    if(out5.aardstukdeel_waarde == null) {
pstmt_tDBOutput_3.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(32, out5.aardstukdeel_waarde);
}

                    if(out5.ingeschreven_kadaster_stuk_kadaster_referentie_type == null) {
pstmt_tDBOutput_3.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(33, out5.ingeschreven_kadaster_stuk_kadaster_referentie_type);
}

                    if(out5.ingeschreven_kadaster_stuk_kadaster_referentie_href == null) {
pstmt_tDBOutput_3.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(34, out5.ingeschreven_kadaster_stuk_kadaster_referentie_href);
}

                    if(out5.ingeschreven_kadaster_stuk_stuk_referentie_type == null) {
pstmt_tDBOutput_3.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(35, out5.ingeschreven_kadaster_stuk_stuk_referentie_type);
}

                    if(out5.ingeschreven_kadaster_stuk_stuk_referentie_href == null) {
pstmt_tDBOutput_3.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(36, out5.ingeschreven_kadaster_stuk_stuk_referentie_href);
}

                    if(out5.ingeschreven_kadaster_akrportefeuillenr == null) {
pstmt_tDBOutput_3.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(37, out5.ingeschreven_kadaster_akrportefeuillenr);
}

                    if(out5.ingeschreven_tia_stuk_kadastester_referentie_type == null) {
pstmt_tDBOutput_3.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(38, out5.ingeschreven_tia_stuk_kadastester_referentie_type);
}

                    if(out5.ingeschreven_tia_stuk_kadastester_referentie_href == null) {
pstmt_tDBOutput_3.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(39, out5.ingeschreven_tia_stuk_kadastester_referentie_href);
}

                    if(out5.ingeschreven_tia_stuk_tia_referentie_type == null) {
pstmt_tDBOutput_3.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(40, out5.ingeschreven_tia_stuk_tia_referentie_type);
}

                    if(out5.ingeschreven_tia_stuk_tia_referentie_href == null) {
pstmt_tDBOutput_3.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(41, out5.ingeschreven_tia_stuk_tia_referentie_href);
}

                    if(out5.ingeschreven_tia_stuk_stuk_referentie_type == null) {
pstmt_tDBOutput_3.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(42, out5.ingeschreven_tia_stuk_stuk_referentie_type);
}

                    if(out5.ingeschreven_tia_stuk_stuk_referentie_href == null) {
pstmt_tDBOutput_3.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(43, out5.ingeschreven_tia_stuk_stuk_referentie_href);
}

                    if(out5.ingeschreven_tia_deel == null) {
pstmt_tDBOutput_3.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(44, out5.ingeschreven_tia_deel);
}

                    if(out5.ingeschreven_tia_nummer == null) {
pstmt_tDBOutput_3.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(45, out5.ingeschreven_tia_nummer);
}

                    if(out5.ingeschreven_tia_deelnummer_reeks_code == null) {
pstmt_tDBOutput_3.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(46, out5.ingeschreven_tia_deelnummer_reeks_code);
}

                    if(out5.ingeschreven_tia_deelnummer_reeks_waarde == null) {
pstmt_tDBOutput_3.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(47, out5.ingeschreven_tia_deelnummer_reeks_waarde);
}

                    if(out5.ingeschreven_tia_deelnummer_register_code == null) {
pstmt_tDBOutput_3.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(48, out5.ingeschreven_tia_deelnummer_register_code);
}

                    if(out5.ingeschreven_tia_deelnummer_register_waarde == null) {
pstmt_tDBOutput_3.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(49, out5.ingeschreven_tia_deelnummer_register_waarde);
}

                    if(out5.ingeschreven_tia_deelnummer_soort_register_code == null) {
pstmt_tDBOutput_3.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(50, out5.ingeschreven_tia_deelnummer_soort_register_code);
}

                    if(out5.ingeschreven_tia_deelnummer_soort_register_waarde == null) {
pstmt_tDBOutput_3.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(51, out5.ingeschreven_tia_deelnummer_soort_register_waarde);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
            if(!whetherReject_tDBOutput_3) {
            }
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "out5"



	
		} // close loop of lookup 'row13' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tXMLMap_4_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_4_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_4_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_4_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("out3"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			
	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("out5"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBCommit_1Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_4_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_1.commit();
			
	
		}finally{
			
			conn_tDBCommit_1.close();
			
	    }
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println(TalendDate.formatDate("HH:mm:ss dd-MM-yyyy", TalendDate.getCurrentDate()) + " - Metadata tabel creeëren en vullen "+context.jobnumber+": De metadata tabel is gevuld");
context.result = true;
context.jobName = "create_fill_metadata_table";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tRunJob_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_1.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_1.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_1.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("xmlType", context.xmlType);
                    paraList_tRunJob_1.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_1.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("break_job", context.break_job);
                    paraList_tRunJob_1.add("--context_type " + "break_job" + "=" + "id_Boolean");
                    parentContextMap_tRunJob_1.put("jobName", context.jobName);
                    paraList_tRunJob_1.add("--context_type " + "jobName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("result", context.result);
                    paraList_tRunJob_1.add("--context_type " + "result" + "=" + "id_Boolean");
                    parentContextMap_tRunJob_1.put("jobnumber", context.jobnumber);
                    paraList_tRunJob_1.add("--context_type " + "jobnumber" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		brk.joblogger_0_1.JobLogger childJob_tRunJob_1 = new brk.joblogger_0_1.JobLogger();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
					java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


System.out.println(TalendDate.formatDate("HH:mm:ss dd-MM-yyyy", TalendDate.getCurrentDate()) + " - Metadata tabel creeëren en vullen "+context.jobnumber+": Stand inlezen");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tFileInputXML_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public String bestand;

				public String getBestand () {
					return this.bestand;
				}
				
			    public String soort_bestand;

				public String getSoort_bestand () {
					return this.soort_bestand;
				}
				
			    public java.util.Date startdatum_verwerking;

				public java.util.Date getStartdatum_verwerking () {
					return this.startdatum_verwerking;
				}
				
			    public String resultaat_verwerking;

				public String getResultaat_verwerking () {
					return this.resultaat_verwerking;
				}
				
			    public String selectiecriteria_type_totaalstand;

				public String getSelectiecriteria_type_totaalstand () {
					return this.selectiecriteria_type_totaalstand;
				}
				
			    public String selectiecriteria_kenmerknaam;

				public String getSelectiecriteria_kenmerknaam () {
					return this.selectiecriteria_kenmerknaam;
				}
				
			    public String selectiecriteria_kenmerkwaarde;

				public String getSelectiecriteria_kenmerkwaarde () {
					return this.selectiecriteria_kenmerkwaarde;
				}
				
			    public java.util.Date brk_datum;

				public java.util.Date getBrk_datum () {
					return this.brk_datum;
				}
				
			    public Integer volgnummer;

				public Integer getVolgnummer () {
					return this.volgnummer;
				}
				
			    public String mutatiesoort;

				public String getMutatiesoort () {
					return this.mutatiesoort;
				}
				
			    public String was_snapshot_referentie;

				public String getWas_snapshot_referentie () {
					return this.was_snapshot_referentie;
				}
				
			    public java.util.Date was_snapshot_toestandsdatum;

				public java.util.Date getWas_snapshot_toestandsdatum () {
					return this.was_snapshot_toestandsdatum;
				}
				
			    public String wordt_snapshot_referentie;

				public String getWordt_snapshot_referentie () {
					return this.wordt_snapshot_referentie;
				}
				
			    public java.util.Date wordt_snapshot_toestandsdatum;

				public java.util.Date getWordt_snapshot_toestandsdatum () {
					return this.wordt_snapshot_toestandsdatum;
				}
				
			    public String sectie;

				public String getSectie () {
					return this.sectie;
				}
				
			    public Integer perceelnummer;

				public Integer getPerceelnummer () {
					return this.perceelnummer;
				}
				
			    public Integer appartementsrechtvolgnummer;

				public Integer getAppartementsrechtvolgnummer () {
					return this.appartementsrechtvolgnummer;
				}
				
			    public Boolean indicatie_deelperceel;

				public Boolean getIndicatie_deelperceel () {
					return this.indicatie_deelperceel;
				}
				
			    public String object_referentie;

				public String getObject_referentie () {
					return this.object_referentie;
				}
				
			    public String object_soort;

				public String getObject_soort () {
					return this.object_soort;
				}
				
			    public String burgerlijke_gemeente_code;

				public String getBurgerlijke_gemeente_code () {
					return this.burgerlijke_gemeente_code;
				}
				
			    public String burgerlijke_gemeente_waarde;

				public String getBurgerlijke_gemeente_waarde () {
					return this.burgerlijke_gemeente_waarde;
				}
				
			    public String akr_kadastrale_gemeente_code;

				public String getAkr_kadastrale_gemeente_code () {
					return this.akr_kadastrale_gemeente_code;
				}
				
			    public String akr_kadastrale_gemeente_waarde;

				public String getAkr_kadastrale_gemeente_waarde () {
					return this.akr_kadastrale_gemeente_waarde;
				}
				
			    public String kadastrale_gemeente_code;

				public String getKadastrale_gemeente_code () {
					return this.kadastrale_gemeente_code;
				}
				
			    public String kadastrale_gemeente_waarde;

				public String getKadastrale_gemeente_waarde () {
					return this.kadastrale_gemeente_waarde;
				}
				
			    public String perceelref_type;

				public String getPerceelref_type () {
					return this.perceelref_type;
				}
				
			    public String perceelref_href;

				public String getPerceelref_href () {
					return this.perceelref_href;
				}
				
			    public String appartementsrecht_type;

				public String getAppartementsrecht_type () {
					return this.appartementsrecht_type;
				}
				
			    public String appartementsrecht_href;

				public String getAppartementsrecht_href () {
					return this.appartementsrecht_href;
				}
				
			    public String aardstukdeel_code;

				public String getAardstukdeel_code () {
					return this.aardstukdeel_code;
				}
				
			    public String aardstukdeel_waarde;

				public String getAardstukdeel_waarde () {
					return this.aardstukdeel_waarde;
				}
				
			    public String ingeschreven_kadaster_stuk_kadaster_referentie_type;

				public String getIngeschreven_kadaster_stuk_kadaster_referentie_type () {
					return this.ingeschreven_kadaster_stuk_kadaster_referentie_type;
				}
				
			    public String ingeschreven_kadaster_stuk_kadaster_referentie_href;

				public String getIngeschreven_kadaster_stuk_kadaster_referentie_href () {
					return this.ingeschreven_kadaster_stuk_kadaster_referentie_href;
				}
				
			    public String ingeschreven_kadaster_stuk_stuk_referentie_type;

				public String getIngeschreven_kadaster_stuk_stuk_referentie_type () {
					return this.ingeschreven_kadaster_stuk_stuk_referentie_type;
				}
				
			    public String ingeschreven_kadaster_stuk_stuk_referentie_href;

				public String getIngeschreven_kadaster_stuk_stuk_referentie_href () {
					return this.ingeschreven_kadaster_stuk_stuk_referentie_href;
				}
				
			    public String ingeschreven_kadaster_akrportefeuillenr;

				public String getIngeschreven_kadaster_akrportefeuillenr () {
					return this.ingeschreven_kadaster_akrportefeuillenr;
				}
				
			    public String ingeschreven_tia_stuk_kadastester_referentie_type;

				public String getIngeschreven_tia_stuk_kadastester_referentie_type () {
					return this.ingeschreven_tia_stuk_kadastester_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_kadastester_referentie_href;

				public String getIngeschreven_tia_stuk_kadastester_referentie_href () {
					return this.ingeschreven_tia_stuk_kadastester_referentie_href;
				}
				
			    public String ingeschreven_tia_stuk_tia_referentie_type;

				public String getIngeschreven_tia_stuk_tia_referentie_type () {
					return this.ingeschreven_tia_stuk_tia_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_tia_referentie_href;

				public String getIngeschreven_tia_stuk_tia_referentie_href () {
					return this.ingeschreven_tia_stuk_tia_referentie_href;
				}
				
			    public String ingeschreven_tia_stuk_stuk_referentie_type;

				public String getIngeschreven_tia_stuk_stuk_referentie_type () {
					return this.ingeschreven_tia_stuk_stuk_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_stuk_referentie_href;

				public String getIngeschreven_tia_stuk_stuk_referentie_href () {
					return this.ingeschreven_tia_stuk_stuk_referentie_href;
				}
				
			    public String ingeschreven_tia_deel;

				public String getIngeschreven_tia_deel () {
					return this.ingeschreven_tia_deel;
				}
				
			    public String ingeschreven_tia_nummer;

				public String getIngeschreven_tia_nummer () {
					return this.ingeschreven_tia_nummer;
				}
				
			    public String ingeschreven_tia_deelnummer_reeks_code;

				public String getIngeschreven_tia_deelnummer_reeks_code () {
					return this.ingeschreven_tia_deelnummer_reeks_code;
				}
				
			    public String ingeschreven_tia_deelnummer_reeks_waarde;

				public String getIngeschreven_tia_deelnummer_reeks_waarde () {
					return this.ingeschreven_tia_deelnummer_reeks_waarde;
				}
				
			    public String ingeschreven_tia_deelnummer_register_code;

				public String getIngeschreven_tia_deelnummer_register_code () {
					return this.ingeschreven_tia_deelnummer_register_code;
				}
				
			    public String ingeschreven_tia_deelnummer_register_waarde;

				public String getIngeschreven_tia_deelnummer_register_waarde () {
					return this.ingeschreven_tia_deelnummer_register_waarde;
				}
				
			    public String ingeschreven_tia_deelnummer_soort_register_code;

				public String getIngeschreven_tia_deelnummer_soort_register_code () {
					return this.ingeschreven_tia_deelnummer_soort_register_code;
				}
				
			    public String ingeschreven_tia_deelnummer_soort_register_waarde;

				public String getIngeschreven_tia_deelnummer_soort_register_waarde () {
					return this.ingeschreven_tia_deelnummer_soort_register_waarde;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_create_fill_metadata_table.length) {
				if(length < 1024 && commonByteArray_BRK_create_fill_metadata_table.length == 0) {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[1024];
				} else {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_create_fill_metadata_table, 0, length);
			strReturn = new String(commonByteArray_BRK_create_fill_metadata_table, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
					this.bestand = readString(dis);
					
					this.soort_bestand = readString(dis);
					
					this.startdatum_verwerking = readDate(dis);
					
					this.resultaat_verwerking = readString(dis);
					
					this.selectiecriteria_type_totaalstand = readString(dis);
					
					this.selectiecriteria_kenmerknaam = readString(dis);
					
					this.selectiecriteria_kenmerkwaarde = readString(dis);
					
					this.brk_datum = readDate(dis);
					
						this.volgnummer = readInteger(dis);
					
					this.mutatiesoort = readString(dis);
					
					this.was_snapshot_referentie = readString(dis);
					
					this.was_snapshot_toestandsdatum = readDate(dis);
					
					this.wordt_snapshot_referentie = readString(dis);
					
					this.wordt_snapshot_toestandsdatum = readDate(dis);
					
					this.sectie = readString(dis);
					
						this.perceelnummer = readInteger(dis);
					
						this.appartementsrechtvolgnummer = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.indicatie_deelperceel = null;
           				} else {
           			    	this.indicatie_deelperceel = dis.readBoolean();
           				}
					
					this.object_referentie = readString(dis);
					
					this.object_soort = readString(dis);
					
					this.burgerlijke_gemeente_code = readString(dis);
					
					this.burgerlijke_gemeente_waarde = readString(dis);
					
					this.akr_kadastrale_gemeente_code = readString(dis);
					
					this.akr_kadastrale_gemeente_waarde = readString(dis);
					
					this.kadastrale_gemeente_code = readString(dis);
					
					this.kadastrale_gemeente_waarde = readString(dis);
					
					this.perceelref_type = readString(dis);
					
					this.perceelref_href = readString(dis);
					
					this.appartementsrecht_type = readString(dis);
					
					this.appartementsrecht_href = readString(dis);
					
					this.aardstukdeel_code = readString(dis);
					
					this.aardstukdeel_waarde = readString(dis);
					
					this.ingeschreven_kadaster_stuk_kadaster_referentie_type = readString(dis);
					
					this.ingeschreven_kadaster_stuk_kadaster_referentie_href = readString(dis);
					
					this.ingeschreven_kadaster_stuk_stuk_referentie_type = readString(dis);
					
					this.ingeschreven_kadaster_stuk_stuk_referentie_href = readString(dis);
					
					this.ingeschreven_kadaster_akrportefeuillenr = readString(dis);
					
					this.ingeschreven_tia_stuk_kadastester_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_kadastester_referentie_href = readString(dis);
					
					this.ingeschreven_tia_stuk_tia_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_tia_referentie_href = readString(dis);
					
					this.ingeschreven_tia_stuk_stuk_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_stuk_referentie_href = readString(dis);
					
					this.ingeschreven_tia_deel = readString(dis);
					
					this.ingeschreven_tia_nummer = readString(dis);
					
					this.ingeschreven_tia_deelnummer_reeks_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_reeks_waarde = readString(dis);
					
					this.ingeschreven_tia_deelnummer_register_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_register_waarde = readString(dis);
					
					this.ingeschreven_tia_deelnummer_soort_register_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_soort_register_waarde = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.bestand,dos);
					
					// String
				
						writeString(this.soort_bestand,dos);
					
					// java.util.Date
				
						writeDate(this.startdatum_verwerking,dos);
					
					// String
				
						writeString(this.resultaat_verwerking,dos);
					
					// String
				
						writeString(this.selectiecriteria_type_totaalstand,dos);
					
					// String
				
						writeString(this.selectiecriteria_kenmerknaam,dos);
					
					// String
				
						writeString(this.selectiecriteria_kenmerkwaarde,dos);
					
					// java.util.Date
				
						writeDate(this.brk_datum,dos);
					
					// Integer
				
						writeInteger(this.volgnummer,dos);
					
					// String
				
						writeString(this.mutatiesoort,dos);
					
					// String
				
						writeString(this.was_snapshot_referentie,dos);
					
					// java.util.Date
				
						writeDate(this.was_snapshot_toestandsdatum,dos);
					
					// String
				
						writeString(this.wordt_snapshot_referentie,dos);
					
					// java.util.Date
				
						writeDate(this.wordt_snapshot_toestandsdatum,dos);
					
					// String
				
						writeString(this.sectie,dos);
					
					// Integer
				
						writeInteger(this.perceelnummer,dos);
					
					// Integer
				
						writeInteger(this.appartementsrechtvolgnummer,dos);
					
					// Boolean
				
						if(this.indicatie_deelperceel == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.indicatie_deelperceel);
		            	}
					
					// String
				
						writeString(this.object_referentie,dos);
					
					// String
				
						writeString(this.object_soort,dos);
					
					// String
				
						writeString(this.burgerlijke_gemeente_code,dos);
					
					// String
				
						writeString(this.burgerlijke_gemeente_waarde,dos);
					
					// String
				
						writeString(this.akr_kadastrale_gemeente_code,dos);
					
					// String
				
						writeString(this.akr_kadastrale_gemeente_waarde,dos);
					
					// String
				
						writeString(this.kadastrale_gemeente_code,dos);
					
					// String
				
						writeString(this.kadastrale_gemeente_waarde,dos);
					
					// String
				
						writeString(this.perceelref_type,dos);
					
					// String
				
						writeString(this.perceelref_href,dos);
					
					// String
				
						writeString(this.appartementsrecht_type,dos);
					
					// String
				
						writeString(this.appartementsrecht_href,dos);
					
					// String
				
						writeString(this.aardstukdeel_code,dos);
					
					// String
				
						writeString(this.aardstukdeel_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_kadaster_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_kadaster_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_stuk_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_stuk_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_akrportefeuillenr,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_kadastester_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_kadastester_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_tia_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_tia_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_stuk_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_stuk_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deel,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_nummer,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_reeks_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_reeks_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_register_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_register_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_soort_register_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_soort_register_waarde,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("bestand="+bestand);
		sb.append(",soort_bestand="+soort_bestand);
		sb.append(",startdatum_verwerking="+String.valueOf(startdatum_verwerking));
		sb.append(",resultaat_verwerking="+resultaat_verwerking);
		sb.append(",selectiecriteria_type_totaalstand="+selectiecriteria_type_totaalstand);
		sb.append(",selectiecriteria_kenmerknaam="+selectiecriteria_kenmerknaam);
		sb.append(",selectiecriteria_kenmerkwaarde="+selectiecriteria_kenmerkwaarde);
		sb.append(",brk_datum="+String.valueOf(brk_datum));
		sb.append(",volgnummer="+String.valueOf(volgnummer));
		sb.append(",mutatiesoort="+mutatiesoort);
		sb.append(",was_snapshot_referentie="+was_snapshot_referentie);
		sb.append(",was_snapshot_toestandsdatum="+String.valueOf(was_snapshot_toestandsdatum));
		sb.append(",wordt_snapshot_referentie="+wordt_snapshot_referentie);
		sb.append(",wordt_snapshot_toestandsdatum="+String.valueOf(wordt_snapshot_toestandsdatum));
		sb.append(",sectie="+sectie);
		sb.append(",perceelnummer="+String.valueOf(perceelnummer));
		sb.append(",appartementsrechtvolgnummer="+String.valueOf(appartementsrechtvolgnummer));
		sb.append(",indicatie_deelperceel="+String.valueOf(indicatie_deelperceel));
		sb.append(",object_referentie="+object_referentie);
		sb.append(",object_soort="+object_soort);
		sb.append(",burgerlijke_gemeente_code="+burgerlijke_gemeente_code);
		sb.append(",burgerlijke_gemeente_waarde="+burgerlijke_gemeente_waarde);
		sb.append(",akr_kadastrale_gemeente_code="+akr_kadastrale_gemeente_code);
		sb.append(",akr_kadastrale_gemeente_waarde="+akr_kadastrale_gemeente_waarde);
		sb.append(",kadastrale_gemeente_code="+kadastrale_gemeente_code);
		sb.append(",kadastrale_gemeente_waarde="+kadastrale_gemeente_waarde);
		sb.append(",perceelref_type="+perceelref_type);
		sb.append(",perceelref_href="+perceelref_href);
		sb.append(",appartementsrecht_type="+appartementsrecht_type);
		sb.append(",appartementsrecht_href="+appartementsrecht_href);
		sb.append(",aardstukdeel_code="+aardstukdeel_code);
		sb.append(",aardstukdeel_waarde="+aardstukdeel_waarde);
		sb.append(",ingeschreven_kadaster_stuk_kadaster_referentie_type="+ingeschreven_kadaster_stuk_kadaster_referentie_type);
		sb.append(",ingeschreven_kadaster_stuk_kadaster_referentie_href="+ingeschreven_kadaster_stuk_kadaster_referentie_href);
		sb.append(",ingeschreven_kadaster_stuk_stuk_referentie_type="+ingeschreven_kadaster_stuk_stuk_referentie_type);
		sb.append(",ingeschreven_kadaster_stuk_stuk_referentie_href="+ingeschreven_kadaster_stuk_stuk_referentie_href);
		sb.append(",ingeschreven_kadaster_akrportefeuillenr="+ingeschreven_kadaster_akrportefeuillenr);
		sb.append(",ingeschreven_tia_stuk_kadastester_referentie_type="+ingeschreven_tia_stuk_kadastester_referentie_type);
		sb.append(",ingeschreven_tia_stuk_kadastester_referentie_href="+ingeschreven_tia_stuk_kadastester_referentie_href);
		sb.append(",ingeschreven_tia_stuk_tia_referentie_type="+ingeschreven_tia_stuk_tia_referentie_type);
		sb.append(",ingeschreven_tia_stuk_tia_referentie_href="+ingeschreven_tia_stuk_tia_referentie_href);
		sb.append(",ingeschreven_tia_stuk_stuk_referentie_type="+ingeschreven_tia_stuk_stuk_referentie_type);
		sb.append(",ingeschreven_tia_stuk_stuk_referentie_href="+ingeschreven_tia_stuk_stuk_referentie_href);
		sb.append(",ingeschreven_tia_deel="+ingeschreven_tia_deel);
		sb.append(",ingeschreven_tia_nummer="+ingeschreven_tia_nummer);
		sb.append(",ingeschreven_tia_deelnummer_reeks_code="+ingeschreven_tia_deelnummer_reeks_code);
		sb.append(",ingeschreven_tia_deelnummer_reeks_waarde="+ingeschreven_tia_deelnummer_reeks_waarde);
		sb.append(",ingeschreven_tia_deelnummer_register_code="+ingeschreven_tia_deelnummer_register_code);
		sb.append(",ingeschreven_tia_deelnummer_register_waarde="+ingeschreven_tia_deelnummer_register_waarde);
		sb.append(",ingeschreven_tia_deelnummer_soort_register_code="+ingeschreven_tia_deelnummer_soort_register_code);
		sb.append(",ingeschreven_tia_deelnummer_soort_register_waarde="+ingeschreven_tia_deelnummer_soort_register_waarde);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public java.util.Date brk_datum;

				public java.util.Date getBrk_datum () {
					return this.brk_datum;
				}
				
			    public String burgerlijke_gemeente_code;

				public String getBurgerlijke_gemeente_code () {
					return this.burgerlijke_gemeente_code;
				}
				
			    public String burgerlijke_gemeente_waarde;

				public String getBurgerlijke_gemeente_waarde () {
					return this.burgerlijke_gemeente_waarde;
				}
				
			    public String bestand;

				public String getBestand () {
					return this.bestand;
				}
				
			    public String soort_bestand;

				public String getSoort_bestand () {
					return this.soort_bestand;
				}
				
			    public java.util.Date startdatum_verwerking;

				public java.util.Date getStartdatum_verwerking () {
					return this.startdatum_verwerking;
				}
				
			    public String resultaat_verwerking;

				public String getResultaat_verwerking () {
					return this.resultaat_verwerking;
				}
				
			    public Integer volgnummer;

				public Integer getVolgnummer () {
					return this.volgnummer;
				}
				
			    public String mutatiesoort;

				public String getMutatiesoort () {
					return this.mutatiesoort;
				}
				
			    public String was_snapshot_referentie;

				public String getWas_snapshot_referentie () {
					return this.was_snapshot_referentie;
				}
				
			    public java.util.Date was_snapshot_toestandsdatum;

				public java.util.Date getWas_snapshot_toestandsdatum () {
					return this.was_snapshot_toestandsdatum;
				}
				
			    public String wordt_snapshot_referentie;

				public String getWordt_snapshot_referentie () {
					return this.wordt_snapshot_referentie;
				}
				
			    public java.util.Date wordt_snapshot_toestandsdatum;

				public java.util.Date getWordt_snapshot_toestandsdatum () {
					return this.wordt_snapshot_toestandsdatum;
				}
				
			    public String sectie;

				public String getSectie () {
					return this.sectie;
				}
				
			    public Integer perceelnummer;

				public Integer getPerceelnummer () {
					return this.perceelnummer;
				}
				
			    public Integer appartementsrechtvolgnummer;

				public Integer getAppartementsrechtvolgnummer () {
					return this.appartementsrechtvolgnummer;
				}
				
			    public Boolean indicatie_deelperceel;

				public Boolean getIndicatie_deelperceel () {
					return this.indicatie_deelperceel;
				}
				
			    public String object_referentie;

				public String getObject_referentie () {
					return this.object_referentie;
				}
				
			    public String object_soort;

				public String getObject_soort () {
					return this.object_soort;
				}
				
			    public String akr_kadastrale_gemeente_code;

				public String getAkr_kadastrale_gemeente_code () {
					return this.akr_kadastrale_gemeente_code;
				}
				
			    public String akr_kadastrale_gemeente_waarde;

				public String getAkr_kadastrale_gemeente_waarde () {
					return this.akr_kadastrale_gemeente_waarde;
				}
				
			    public String kadastrale_gemeente_code;

				public String getKadastrale_gemeente_code () {
					return this.kadastrale_gemeente_code;
				}
				
			    public String kadastrale_gemeente_waarde;

				public String getKadastrale_gemeente_waarde () {
					return this.kadastrale_gemeente_waarde;
				}
				
			    public String perceelref_type;

				public String getPerceelref_type () {
					return this.perceelref_type;
				}
				
			    public String perceelref_href;

				public String getPerceelref_href () {
					return this.perceelref_href;
				}
				
			    public String appartementsrecht_type;

				public String getAppartementsrecht_type () {
					return this.appartementsrecht_type;
				}
				
			    public String appartementsrecht_href;

				public String getAppartementsrecht_href () {
					return this.appartementsrecht_href;
				}
				
			    public String aardstukdeel_code;

				public String getAardstukdeel_code () {
					return this.aardstukdeel_code;
				}
				
			    public String aardstukdeel_waarde;

				public String getAardstukdeel_waarde () {
					return this.aardstukdeel_waarde;
				}
				
			    public String ingeschreven_kadaster_stuk_kadaster_referentie_type;

				public String getIngeschreven_kadaster_stuk_kadaster_referentie_type () {
					return this.ingeschreven_kadaster_stuk_kadaster_referentie_type;
				}
				
			    public String ingeschreven_kadaster_stuk_kadaster_referentie_href;

				public String getIngeschreven_kadaster_stuk_kadaster_referentie_href () {
					return this.ingeschreven_kadaster_stuk_kadaster_referentie_href;
				}
				
			    public String ingeschreven_kadaster_stuk_stuk_referentie_type;

				public String getIngeschreven_kadaster_stuk_stuk_referentie_type () {
					return this.ingeschreven_kadaster_stuk_stuk_referentie_type;
				}
				
			    public String ingeschreven_kadaster_stuk_stuk_referentie_href;

				public String getIngeschreven_kadaster_stuk_stuk_referentie_href () {
					return this.ingeschreven_kadaster_stuk_stuk_referentie_href;
				}
				
			    public String ingeschreven_kadaster_akrportefeuillenr;

				public String getIngeschreven_kadaster_akrportefeuillenr () {
					return this.ingeschreven_kadaster_akrportefeuillenr;
				}
				
			    public String ingeschreven_tia_stuk_kadastester_referentie_type;

				public String getIngeschreven_tia_stuk_kadastester_referentie_type () {
					return this.ingeschreven_tia_stuk_kadastester_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_kadastester_referentie_href;

				public String getIngeschreven_tia_stuk_kadastester_referentie_href () {
					return this.ingeschreven_tia_stuk_kadastester_referentie_href;
				}
				
			    public String ingeschreven_tia_stuk_tia_referentie_type;

				public String getIngeschreven_tia_stuk_tia_referentie_type () {
					return this.ingeschreven_tia_stuk_tia_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_tia_referentie_href;

				public String getIngeschreven_tia_stuk_tia_referentie_href () {
					return this.ingeschreven_tia_stuk_tia_referentie_href;
				}
				
			    public String ingeschreven_tia_stuk_stuk_referentie_type;

				public String getIngeschreven_tia_stuk_stuk_referentie_type () {
					return this.ingeschreven_tia_stuk_stuk_referentie_type;
				}
				
			    public String ingeschreven_tia_stuk_stuk_referentie_href;

				public String getIngeschreven_tia_stuk_stuk_referentie_href () {
					return this.ingeschreven_tia_stuk_stuk_referentie_href;
				}
				
			    public String ingeschreven_tia_deel;

				public String getIngeschreven_tia_deel () {
					return this.ingeschreven_tia_deel;
				}
				
			    public String ingeschreven_tia_nummer;

				public String getIngeschreven_tia_nummer () {
					return this.ingeschreven_tia_nummer;
				}
				
			    public String ingeschreven_tia_deelnummer_reeks_code;

				public String getIngeschreven_tia_deelnummer_reeks_code () {
					return this.ingeschreven_tia_deelnummer_reeks_code;
				}
				
			    public String ingeschreven_tia_deelnummer_reeks_waarde;

				public String getIngeschreven_tia_deelnummer_reeks_waarde () {
					return this.ingeschreven_tia_deelnummer_reeks_waarde;
				}
				
			    public String ingeschreven_tia_deelnummer_register_code;

				public String getIngeschreven_tia_deelnummer_register_code () {
					return this.ingeschreven_tia_deelnummer_register_code;
				}
				
			    public String ingeschreven_tia_deelnummer_register_waarde;

				public String getIngeschreven_tia_deelnummer_register_waarde () {
					return this.ingeschreven_tia_deelnummer_register_waarde;
				}
				
			    public String ingeschreven_tia_deelnummer_soort_register_code;

				public String getIngeschreven_tia_deelnummer_soort_register_code () {
					return this.ingeschreven_tia_deelnummer_soort_register_code;
				}
				
			    public String ingeschreven_tia_deelnummer_soort_register_waarde;

				public String getIngeschreven_tia_deelnummer_soort_register_waarde () {
					return this.ingeschreven_tia_deelnummer_soort_register_waarde;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_create_fill_metadata_table.length) {
				if(length < 1024 && commonByteArray_BRK_create_fill_metadata_table.length == 0) {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[1024];
				} else {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_create_fill_metadata_table, 0, length);
			strReturn = new String(commonByteArray_BRK_create_fill_metadata_table, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
					this.brk_datum = readDate(dis);
					
					this.burgerlijke_gemeente_code = readString(dis);
					
					this.burgerlijke_gemeente_waarde = readString(dis);
					
					this.bestand = readString(dis);
					
					this.soort_bestand = readString(dis);
					
					this.startdatum_verwerking = readDate(dis);
					
					this.resultaat_verwerking = readString(dis);
					
						this.volgnummer = readInteger(dis);
					
					this.mutatiesoort = readString(dis);
					
					this.was_snapshot_referentie = readString(dis);
					
					this.was_snapshot_toestandsdatum = readDate(dis);
					
					this.wordt_snapshot_referentie = readString(dis);
					
					this.wordt_snapshot_toestandsdatum = readDate(dis);
					
					this.sectie = readString(dis);
					
						this.perceelnummer = readInteger(dis);
					
						this.appartementsrechtvolgnummer = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.indicatie_deelperceel = null;
           				} else {
           			    	this.indicatie_deelperceel = dis.readBoolean();
           				}
					
					this.object_referentie = readString(dis);
					
					this.object_soort = readString(dis);
					
					this.akr_kadastrale_gemeente_code = readString(dis);
					
					this.akr_kadastrale_gemeente_waarde = readString(dis);
					
					this.kadastrale_gemeente_code = readString(dis);
					
					this.kadastrale_gemeente_waarde = readString(dis);
					
					this.perceelref_type = readString(dis);
					
					this.perceelref_href = readString(dis);
					
					this.appartementsrecht_type = readString(dis);
					
					this.appartementsrecht_href = readString(dis);
					
					this.aardstukdeel_code = readString(dis);
					
					this.aardstukdeel_waarde = readString(dis);
					
					this.ingeschreven_kadaster_stuk_kadaster_referentie_type = readString(dis);
					
					this.ingeschreven_kadaster_stuk_kadaster_referentie_href = readString(dis);
					
					this.ingeschreven_kadaster_stuk_stuk_referentie_type = readString(dis);
					
					this.ingeschreven_kadaster_stuk_stuk_referentie_href = readString(dis);
					
					this.ingeschreven_kadaster_akrportefeuillenr = readString(dis);
					
					this.ingeschreven_tia_stuk_kadastester_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_kadastester_referentie_href = readString(dis);
					
					this.ingeschreven_tia_stuk_tia_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_tia_referentie_href = readString(dis);
					
					this.ingeschreven_tia_stuk_stuk_referentie_type = readString(dis);
					
					this.ingeschreven_tia_stuk_stuk_referentie_href = readString(dis);
					
					this.ingeschreven_tia_deel = readString(dis);
					
					this.ingeschreven_tia_nummer = readString(dis);
					
					this.ingeschreven_tia_deelnummer_reeks_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_reeks_waarde = readString(dis);
					
					this.ingeschreven_tia_deelnummer_register_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_register_waarde = readString(dis);
					
					this.ingeschreven_tia_deelnummer_soort_register_code = readString(dis);
					
					this.ingeschreven_tia_deelnummer_soort_register_waarde = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.brk_datum,dos);
					
					// String
				
						writeString(this.burgerlijke_gemeente_code,dos);
					
					// String
				
						writeString(this.burgerlijke_gemeente_waarde,dos);
					
					// String
				
						writeString(this.bestand,dos);
					
					// String
				
						writeString(this.soort_bestand,dos);
					
					// java.util.Date
				
						writeDate(this.startdatum_verwerking,dos);
					
					// String
				
						writeString(this.resultaat_verwerking,dos);
					
					// Integer
				
						writeInteger(this.volgnummer,dos);
					
					// String
				
						writeString(this.mutatiesoort,dos);
					
					// String
				
						writeString(this.was_snapshot_referentie,dos);
					
					// java.util.Date
				
						writeDate(this.was_snapshot_toestandsdatum,dos);
					
					// String
				
						writeString(this.wordt_snapshot_referentie,dos);
					
					// java.util.Date
				
						writeDate(this.wordt_snapshot_toestandsdatum,dos);
					
					// String
				
						writeString(this.sectie,dos);
					
					// Integer
				
						writeInteger(this.perceelnummer,dos);
					
					// Integer
				
						writeInteger(this.appartementsrechtvolgnummer,dos);
					
					// Boolean
				
						if(this.indicatie_deelperceel == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.indicatie_deelperceel);
		            	}
					
					// String
				
						writeString(this.object_referentie,dos);
					
					// String
				
						writeString(this.object_soort,dos);
					
					// String
				
						writeString(this.akr_kadastrale_gemeente_code,dos);
					
					// String
				
						writeString(this.akr_kadastrale_gemeente_waarde,dos);
					
					// String
				
						writeString(this.kadastrale_gemeente_code,dos);
					
					// String
				
						writeString(this.kadastrale_gemeente_waarde,dos);
					
					// String
				
						writeString(this.perceelref_type,dos);
					
					// String
				
						writeString(this.perceelref_href,dos);
					
					// String
				
						writeString(this.appartementsrecht_type,dos);
					
					// String
				
						writeString(this.appartementsrecht_href,dos);
					
					// String
				
						writeString(this.aardstukdeel_code,dos);
					
					// String
				
						writeString(this.aardstukdeel_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_kadaster_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_kadaster_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_stuk_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_stuk_stuk_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_kadaster_akrportefeuillenr,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_kadastester_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_kadastester_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_tia_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_tia_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_stuk_referentie_type,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_stuk_stuk_referentie_href,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deel,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_nummer,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_reeks_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_reeks_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_register_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_register_waarde,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_soort_register_code,dos);
					
					// String
				
						writeString(this.ingeschreven_tia_deelnummer_soort_register_waarde,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("brk_datum="+String.valueOf(brk_datum));
		sb.append(",burgerlijke_gemeente_code="+burgerlijke_gemeente_code);
		sb.append(",burgerlijke_gemeente_waarde="+burgerlijke_gemeente_waarde);
		sb.append(",bestand="+bestand);
		sb.append(",soort_bestand="+soort_bestand);
		sb.append(",startdatum_verwerking="+String.valueOf(startdatum_verwerking));
		sb.append(",resultaat_verwerking="+resultaat_verwerking);
		sb.append(",volgnummer="+String.valueOf(volgnummer));
		sb.append(",mutatiesoort="+mutatiesoort);
		sb.append(",was_snapshot_referentie="+was_snapshot_referentie);
		sb.append(",was_snapshot_toestandsdatum="+String.valueOf(was_snapshot_toestandsdatum));
		sb.append(",wordt_snapshot_referentie="+wordt_snapshot_referentie);
		sb.append(",wordt_snapshot_toestandsdatum="+String.valueOf(wordt_snapshot_toestandsdatum));
		sb.append(",sectie="+sectie);
		sb.append(",perceelnummer="+String.valueOf(perceelnummer));
		sb.append(",appartementsrechtvolgnummer="+String.valueOf(appartementsrechtvolgnummer));
		sb.append(",indicatie_deelperceel="+String.valueOf(indicatie_deelperceel));
		sb.append(",object_referentie="+object_referentie);
		sb.append(",object_soort="+object_soort);
		sb.append(",akr_kadastrale_gemeente_code="+akr_kadastrale_gemeente_code);
		sb.append(",akr_kadastrale_gemeente_waarde="+akr_kadastrale_gemeente_waarde);
		sb.append(",kadastrale_gemeente_code="+kadastrale_gemeente_code);
		sb.append(",kadastrale_gemeente_waarde="+kadastrale_gemeente_waarde);
		sb.append(",perceelref_type="+perceelref_type);
		sb.append(",perceelref_href="+perceelref_href);
		sb.append(",appartementsrecht_type="+appartementsrecht_type);
		sb.append(",appartementsrecht_href="+appartementsrecht_href);
		sb.append(",aardstukdeel_code="+aardstukdeel_code);
		sb.append(",aardstukdeel_waarde="+aardstukdeel_waarde);
		sb.append(",ingeschreven_kadaster_stuk_kadaster_referentie_type="+ingeschreven_kadaster_stuk_kadaster_referentie_type);
		sb.append(",ingeschreven_kadaster_stuk_kadaster_referentie_href="+ingeschreven_kadaster_stuk_kadaster_referentie_href);
		sb.append(",ingeschreven_kadaster_stuk_stuk_referentie_type="+ingeschreven_kadaster_stuk_stuk_referentie_type);
		sb.append(",ingeschreven_kadaster_stuk_stuk_referentie_href="+ingeschreven_kadaster_stuk_stuk_referentie_href);
		sb.append(",ingeschreven_kadaster_akrportefeuillenr="+ingeschreven_kadaster_akrportefeuillenr);
		sb.append(",ingeschreven_tia_stuk_kadastester_referentie_type="+ingeschreven_tia_stuk_kadastester_referentie_type);
		sb.append(",ingeschreven_tia_stuk_kadastester_referentie_href="+ingeschreven_tia_stuk_kadastester_referentie_href);
		sb.append(",ingeschreven_tia_stuk_tia_referentie_type="+ingeschreven_tia_stuk_tia_referentie_type);
		sb.append(",ingeschreven_tia_stuk_tia_referentie_href="+ingeschreven_tia_stuk_tia_referentie_href);
		sb.append(",ingeschreven_tia_stuk_stuk_referentie_type="+ingeschreven_tia_stuk_stuk_referentie_type);
		sb.append(",ingeschreven_tia_stuk_stuk_referentie_href="+ingeschreven_tia_stuk_stuk_referentie_href);
		sb.append(",ingeschreven_tia_deel="+ingeschreven_tia_deel);
		sb.append(",ingeschreven_tia_nummer="+ingeschreven_tia_nummer);
		sb.append(",ingeschreven_tia_deelnummer_reeks_code="+ingeschreven_tia_deelnummer_reeks_code);
		sb.append(",ingeschreven_tia_deelnummer_reeks_waarde="+ingeschreven_tia_deelnummer_reeks_waarde);
		sb.append(",ingeschreven_tia_deelnummer_register_code="+ingeschreven_tia_deelnummer_register_code);
		sb.append(",ingeschreven_tia_deelnummer_register_waarde="+ingeschreven_tia_deelnummer_register_waarde);
		sb.append(",ingeschreven_tia_deelnummer_soort_register_code="+ingeschreven_tia_deelnummer_soort_register_code);
		sb.append(",ingeschreven_tia_deelnummer_soort_register_waarde="+ingeschreven_tia_deelnummer_soort_register_waarde);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public routines.system.Document content;

				public routines.system.Document getContent () {
					return this.content;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
						this.content = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("content="+String.valueOf(content));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputXML_3Struct implements routines.system.IPersistableRow<after_tFileInputXML_3Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public routines.system.Document content;

				public routines.system.Document getContent () {
					return this.content;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
						this.content = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("content="+String.valueOf(content));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputXML_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputXML_5Process(globalMap);

		row5Struct row5 = new row5Struct();
out7Struct out7 = new out7Struct();
out1Struct out1 = new out1Struct();




	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row5"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tXMLMap_1_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_1_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_1_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_1_TXMLMAP_OUT__Struct Var__tXMLMap_1_TXMLMAP_OUT = new Var__tXMLMap_1_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
out7Struct out7_tmp = new out7Struct();
out7Struct out7_save = null;
//the aggregate variable
out7Struct out7_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_1 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_1",allOutsForAggregate_tXMLMap_1);
// ###############################
class TreeNode_API_tXMLMap_1_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
}
			TreeNode_API_tXMLMap_1_TXMLMAP_OUT treeNodeAPI_tXMLMap_1_TXMLMAP_OUT = new TreeNode_API_tXMLMap_1_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_1_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_1_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_1_TXMLMAP_OUT xml_api_tXMLMap_1_TXMLMAP_OUT = new XML_API_tXMLMap_1_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_1_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_1_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_3", false);
		start_Hash.put("tFileInputXML_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_3";

	
		int tos_count_tFileInputXML_3 = 0;
		

	

int nb_line_tFileInputXML_3 = 0;

	String os_tFileInputXML_3 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_3=false;
	if(os_tFileInputXML_3.indexOf("windows") > -1 || os_tFileInputXML_3.indexOf("nt") > -1){
		isWindows_tFileInputXML_3=true;
	}
class XML_API_tFileInputXML_3{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_3 xml_api_tFileInputXML_3 = new XML_API_tFileInputXML_3();

String[] queryPaths_tFileInputXML_3 = new String[]{	
	"."		
	,"."+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_3 = new boolean[]{	
	true		
	,false
};

String str_tFileInputXML_3 = "";
String[] node_tFileInputXML_3 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_3 = new org.talend.xml.sax.SAXLooper(context.xmlType,queryPaths_tFileInputXML_3,asXMLs_tFileInputXML_3);
looper_tFileInputXML_3.setEncoding("ISO-8859-15");
Object filename_tFileInputXML_3 = null;
try {
	filename_tFileInputXML_3 = context.xmlLocation;
} catch(java.lang.Exception e) {
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_3 != null && filename_tFileInputXML_3 instanceof String && filename_tFileInputXML_3.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_3){
		filename_tFileInputXML_3 = filename_tFileInputXML_3.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_3 instanceof java.io.InputStream){
	looper_tFileInputXML_3.parse((java.io.InputStream)filename_tFileInputXML_3);
}else{
	looper_tFileInputXML_3.parse(String.valueOf(filename_tFileInputXML_3));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_3  = looper_tFileInputXML_3.iterator();
while (it_tFileInputXML_3.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_3 = it_tFileInputXML_3.next();
		nb_line_tFileInputXML_3++;
		
	row5 = null;			
	boolean whetherReject_tFileInputXML_3 = false;
	row5 = new row5Struct();
	try{
	str_tFileInputXML_3 = row_tFileInputXML_3.get(".");
	node_tFileInputXML_3 = new String[]{str_tFileInputXML_3,row_tFileInputXML_3.get("."+"/@xsi:nil")};	
										if(xml_api_tFileInputXML_3.isDefNull(node_tFileInputXML_3)){
											row5.content =null;
										}else if(xml_api_tFileInputXML_3.isEmpty(node_tFileInputXML_3) || xml_api_tFileInputXML_3.isMissing(node_tFileInputXML_3)){
											row5.content=null;
										}else{
		row5.content = ParserUtils.parseTo_Document(str_tFileInputXML_3);
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_3 = true;
                System.err.println(e.getMessage());
                row5 = null;
    }
			
			

 



/**
 * [tFileInputXML_3 begin ] stop
 */
	
	/**
	 * [tFileInputXML_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 


	tos_count_tFileInputXML_3++;

/**
 * [tFileInputXML_3 main ] stop
 */
	
	/**
	 * [tFileInputXML_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 



/**
 * [tFileInputXML_3 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

			//row5
			//row5


			
				
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				}
				
				
				
			

		

	boolean rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setOriginalLoop("/KadastraalObjectSnapshot");
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setIsOptional(false);
				if(row5.content == null || row5.content.getDocument() == null) {
					throw new RuntimeException("row5.content can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT = row5.content.getDocument();
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setDoc(doc_tXMLMap_1_TXMLMAP_OUT);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[21];
				String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[21];
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "row5.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "Appartementsrecht/identificatie/namespace";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[2] = "row5.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[2] = "Appartementsrecht/identificatie/lokaalId";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[3] = "row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/sectie";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[3] = "Perceel/kadastraleAanduiding/sectie";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[4] = "row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[4] = "Appartementsrecht/kadastraleAanduiding/perceelnummer";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[5] = "row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[5] = "Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[6] = "row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/perceelnummer";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[6] = "Perceel/kadastraleAanduiding/perceelnummer";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[7] = "row5.content:/KadastraalObjectSnapshot/toestandsdatum";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[7] = "toestandsdatum";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[8] = "row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[8] = "Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[9] = "row5.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[9] = "Perceel/identificatie/lokaalId";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[10] = "row5.content:/KadastraalObjectSnapshot/Perceel/identificatie/namespace";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[10] = "Perceel/identificatie/namespace";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[11] = "row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[11] = "Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[12] = "row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[12] = "Appartementsrecht/kadastraleAanduiding/sectie";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[13] = "row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[13] = "Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[14] = "row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/code";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[14] = "Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/code";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[15] = "row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/appartementsrechtVolgnummer";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[15] = "Perceel/kadastraleAanduiding/appartementsrechtVolgnummer";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[16] = "row5.content:/KadastraalObjectSnapshot/Perceel/indicatieDeelperceel";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[16] = "Perceel/indicatieDeelperceel";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[17] = "row5.content:/KadastraalObjectSnapshot/referentie";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[17] = "referentie";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[18] = "row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/code";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[18] = "Perceel/kadastraleAanduiding/naamKadastraleGemeente/code";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[19] = "row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/waarde";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[19] = "Perceel/kadastraleAanduiding/naamKadastraleGemeente/waarde";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[20] = "row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[20] = "Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code";
				
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_1_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT = docToFlat_tXMLMap_1_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT: resultSet_tXMLMap_1_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_1_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT : oneRow_tXMLMap_1_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT.getKey(),entry_tXMLMap_1_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output tables

out7 = null;


// # Output table : 'out7'

out7_tmp = new out7Struct();
out7_tmp.bestand = "brk_init.zip";
out7_tmp.soort_bestand = "Initieel bestand o.b.v selectiecriteria";
out7_tmp.startdatum_verwerking = TalendDate.getCurrentDate();
out7_tmp.resultaat_verwerking = "Nog te verwerken";
out7_tmp.brk_datum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Date("row5.content:/KadastraalObjectSnapshot/toestandsdatum" , "yyyy-MM-dd");
out7_tmp.volgnummer = 0;
out7_tmp.mutatiesoort = "Geen";
out7_tmp.was_snapshot_referentie = null;
out7_tmp.was_snapshot_toestandsdatum = null;
out7_tmp.wordt_snapshot_referentie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/referentie");
out7_tmp.wordt_snapshot_toestandsdatum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Date("row5.content:/KadastraalObjectSnapshot/toestandsdatum" , "yyyy-MM-dd");
out7_tmp.sectie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/sectie")==null? treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie"):treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/sectie")  ;
out7_tmp.perceelnummer = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Integer("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/perceelnummer")==null? treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Integer("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer"):treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Integer("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/perceelnummer") ;
out7_tmp.appartementsrechtvolgnummer = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Integer("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/appartementsrechtVolgnummer")==null? treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Integer("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer"):treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Integer("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/appartementsrechtVolgnummer");
out7_tmp.indicatie_deelperceel = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Boolean("row5.content:/KadastraalObjectSnapshot/Perceel/indicatieDeelperceel");
out7_tmp.object_referentie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId") == null? treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId"):treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId");
out7_tmp.object_soort = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId") == null? (treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId") == null? "Onbekend":"Appartementsrecht"):"Perceel";
out7_tmp.burgerlijke_gemeente_code = null;
out7_tmp.burgerlijke_gemeente_waarde = null;
out7_tmp.akr_kadastrale_gemeente_code = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/code") == null? treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code"):treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
out7_tmp.akr_kadastrale_gemeente_waarde = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde") == null? treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde"):treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
out7_tmp.kadastrale_gemeente_code = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/code") == null?  treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code"): treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/code");
out7_tmp.kadastrale_gemeente_waarde = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/waarde") == null?  treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde"): treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/kadastraleAanduiding/naamKadastraleGemeente/waarde");
out7_tmp.perceelref_type = null;
out7_tmp.perceelref_href = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId") == null? null:treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/identificatie/namespace")+"."+treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Perceel/identificatie/lokaalId");
out7_tmp.appartementsrecht_type = null;
out7_tmp.appartementsrecht_href = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId") == null? null:treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace")+"."+treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row5.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId");
out7_tmp.aardstukdeel_code = null;
out7_tmp.aardstukdeel_waarde = null;
out7_tmp.ingeschreven_kadaster_stuk_kadaster_referentie_type = null;
out7_tmp.ingeschreven_kadaster_stuk_kadaster_referentie_href = null;
out7_tmp.ingeschreven_kadaster_stuk_stuk_referentie_type = null;
out7_tmp.ingeschreven_kadaster_stuk_stuk_referentie_href = null;
out7_tmp.ingeschreven_kadaster_akrportefeuillenr = null;
out7_tmp.ingeschreven_tia_stuk_kadastester_referentie_type = null;
out7_tmp.ingeschreven_tia_stuk_kadastester_referentie_href = null;
out7_tmp.ingeschreven_tia_stuk_tia_referentie_type = null;
out7_tmp.ingeschreven_tia_stuk_tia_referentie_href = null;
out7_tmp.ingeschreven_tia_stuk_stuk_referentie_type = null;
out7_tmp.ingeschreven_tia_stuk_stuk_referentie_href = null;
out7_tmp.ingeschreven_tia_deel = null;
out7_tmp.ingeschreven_tia_nummer = null;
out7_tmp.ingeschreven_tia_deelnummer_reeks_code = null;
out7_tmp.ingeschreven_tia_deelnummer_reeks_waarde = null;
out7_tmp.ingeschreven_tia_deelnummer_register_code = null;
out7_tmp.ingeschreven_tia_deelnummer_register_waarde = null;
out7_tmp.ingeschreven_tia_deelnummer_soort_register_code = null;
out7_tmp.ingeschreven_tia_deelnummer_soort_register_waarde = null;allOutsForAggregate_tXMLMap_1.add(out7_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_1_TXMLMAP_OUT++;

/**
 * [tXMLMap_1_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputXML_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 



/**
 * [tFileInputXML_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	


	}
	try {
		looper_tFileInputXML_3.handleTaskResponse();
	} catch(java.lang.Exception e) {
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_3_NB_LINE",nb_line_tFileInputXML_3);

	
 

ok_Hash.put("tFileInputXML_3", true);
end_Hash.put("tFileInputXML_3", System.currentTimeMillis());




/**
 * [tFileInputXML_3 end ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	




			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row5"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("out1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = "metadata_bronbestanden_brk";
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "metadata_bronbestanden_brk";
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_1 = "public";
                                    if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_1.next()){
                                                defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_1.next()) {
                                        String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                        String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_1.equals("metadata_bronbestanden_brk")
                                            && (schema_tDBOutput_1.equals(dbschema_tDBOutput_1) || ((dbschema_tDBOutput_1 ==null || dbschema_tDBOutput_1.trim().length() ==0) && defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
                                            whetherExist_tDBOutput_1 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1 + "\"(\"bestand\" VARCHAR ,\"soort_bestand\" VARCHAR ,\"startdatum_verwerking\" TIMESTAMP ,\"resultaat_verwerking\" VARCHAR ,\"selectiecriteria_type_totaalstand\" VARCHAR ,\"selectiecriteria_kenmerknaam\" VARCHAR ,\"selectiecriteria_kenmerkwaarde\" VARCHAR ,\"brk_datum\" DATE ,\"volgnummer\" INT4 ,\"mutatiesoort\" VARCHAR ,\"was_snapshot_referentie\" VARCHAR ,\"was_snapshot_toestandsdatum\" DATE ,\"wordt_snapshot_referentie\" VARCHAR ,\"wordt_snapshot_toestandsdatum\" DATE ,\"sectie\" VARCHAR ,\"perceelnummer\" INT4 ,\"appartementsrechtvolgnummer\" INT4 ,\"indicatie_deelperceel\" BOOL ,\"object_referentie\" VARCHAR ,\"object_soort\" VARCHAR ,\"burgerlijke_gemeente_code\" VARCHAR ,\"burgerlijke_gemeente_waarde\" VARCHAR ,\"akr_kadastrale_gemeente_code\" VARCHAR ,\"akr_kadastrale_gemeente_waarde\" VARCHAR ,\"kadastrale_gemeente_code\" VARCHAR ,\"kadastrale_gemeente_waarde\" VARCHAR ,\"perceelref_type\" VARCHAR ,\"perceelref_href\" VARCHAR ,\"appartementsrecht_type\" VARCHAR ,\"appartementsrecht_href\" VARCHAR ,\"aardstukdeel_code\" VARCHAR ,\"aardstukdeel_waarde\" VARCHAR ,\"ingeschreven_kadaster_stuk_kadaster_referentie_type\" VARCHAR ,\"ingeschreven_kadaster_stuk_kadaster_referentie_href\" VARCHAR ,\"ingeschreven_kadaster_stuk_stuk_referentie_type\" VARCHAR ,\"ingeschreven_kadaster_stuk_stuk_referentie_href\" VARCHAR ,\"ingeschreven_kadaster_akrportefeuillenr\" VARCHAR ,\"ingeschreven_tia_stuk_kadastester_referentie_type\" VARCHAR ,\"ingeschreven_tia_stuk_kadastester_referentie_href\" VARCHAR ,\"ingeschreven_tia_stuk_tia_referentie_type\" VARCHAR ,\"ingeschreven_tia_stuk_tia_referentie_href\" VARCHAR ,\"ingeschreven_tia_stuk_stuk_referentie_type\" VARCHAR ,\"ingeschreven_tia_stuk_stuk_referentie_href\" VARCHAR ,\"ingeschreven_tia_deel\" VARCHAR ,\"ingeschreven_tia_nummer\" VARCHAR ,\"ingeschreven_tia_deelnummer_reeks_code\" VARCHAR ,\"ingeschreven_tia_deelnummer_reeks_waarde\" VARCHAR ,\"ingeschreven_tia_deelnummer_register_code\" VARCHAR ,\"ingeschreven_tia_deelnummer_register_waarde\" VARCHAR ,\"ingeschreven_tia_deelnummer_soort_register_code\" VARCHAR ,\"ingeschreven_tia_deelnummer_soort_register_waarde\" VARCHAR )");
                                    }
                                }
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"bestand\",\"soort_bestand\",\"startdatum_verwerking\",\"resultaat_verwerking\",\"selectiecriteria_type_totaalstand\",\"selectiecriteria_kenmerknaam\",\"selectiecriteria_kenmerkwaarde\",\"brk_datum\",\"volgnummer\",\"mutatiesoort\",\"was_snapshot_referentie\",\"was_snapshot_toestandsdatum\",\"wordt_snapshot_referentie\",\"wordt_snapshot_toestandsdatum\",\"sectie\",\"perceelnummer\",\"appartementsrechtvolgnummer\",\"indicatie_deelperceel\",\"object_referentie\",\"object_soort\",\"burgerlijke_gemeente_code\",\"burgerlijke_gemeente_waarde\",\"akr_kadastrale_gemeente_code\",\"akr_kadastrale_gemeente_waarde\",\"kadastrale_gemeente_code\",\"kadastrale_gemeente_waarde\",\"perceelref_type\",\"perceelref_href\",\"appartementsrecht_type\",\"appartementsrecht_href\",\"aardstukdeel_code\",\"aardstukdeel_waarde\",\"ingeschreven_kadaster_stuk_kadaster_referentie_type\",\"ingeschreven_kadaster_stuk_kadaster_referentie_href\",\"ingeschreven_kadaster_stuk_stuk_referentie_type\",\"ingeschreven_kadaster_stuk_stuk_referentie_href\",\"ingeschreven_kadaster_akrportefeuillenr\",\"ingeschreven_tia_stuk_kadastester_referentie_type\",\"ingeschreven_tia_stuk_kadastester_referentie_href\",\"ingeschreven_tia_stuk_tia_referentie_type\",\"ingeschreven_tia_stuk_tia_referentie_href\",\"ingeschreven_tia_stuk_stuk_referentie_type\",\"ingeschreven_tia_stuk_stuk_referentie_href\",\"ingeschreven_tia_deel\",\"ingeschreven_tia_nummer\",\"ingeschreven_tia_deelnummer_reeks_code\",\"ingeschreven_tia_deelnummer_reeks_waarde\",\"ingeschreven_tia_deelnummer_register_code\",\"ingeschreven_tia_deelnummer_register_waarde\",\"ingeschreven_tia_deelnummer_soort_register_code\",\"ingeschreven_tia_deelnummer_soort_register_waarde\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("out7"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	
		tHash_Lookup_row6.initGet();
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tXMLMap_1_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	
		int tos_count_tXMLMap_1_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_1 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_1");
for(Object  row_out_tXMLMap_1_TXMLMAP_IN : outs_tXMLMap_1) {//TD512
 



/**
 * [tXMLMap_1_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

	out7 = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof out7Struct) {
		out7 = (out7Struct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_1_TXMLMAP_IN++;

/**
 * [tXMLMap_1_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//out7
			//out7


			
				
				if(execStat){
					runStat.updateStatOnConnection("out7"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow6 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow6 = true;
			           		  	} // G 21
                    		  	
                    		

							row6Struct row6 = null;
                    		  	 
							

								while ((tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) || forceLooprow6) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row6'
									
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								
								if(!forceLooprow6) { // G 46
								
							
								 
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow6 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.bestand = out7.bestand ;
out1_tmp.soort_bestand = out7.soort_bestand ;
out1_tmp.startdatum_verwerking = out7.startdatum_verwerking ;
out1_tmp.resultaat_verwerking = out7.resultaat_verwerking ;
out1_tmp.selectiecriteria_type_totaalstand = row6.selectiecriteria_type_totaalstand ;
out1_tmp.selectiecriteria_kenmerknaam = row6.selectiecriteria_kenmerknaam ;
out1_tmp.selectiecriteria_kenmerkwaarde = row6.selectiecriteria_kenmerkwaarde ;
out1_tmp.brk_datum = out7.brk_datum ;
out1_tmp.volgnummer = out7.volgnummer ;
out1_tmp.mutatiesoort = out7.mutatiesoort ;
out1_tmp.was_snapshot_referentie = out7.was_snapshot_referentie ;
out1_tmp.was_snapshot_toestandsdatum = out7.was_snapshot_toestandsdatum ;
out1_tmp.wordt_snapshot_referentie = out7.wordt_snapshot_referentie ;
out1_tmp.wordt_snapshot_toestandsdatum = out7.wordt_snapshot_toestandsdatum ;
out1_tmp.sectie = out7.sectie ;
out1_tmp.perceelnummer = out7.perceelnummer ;
out1_tmp.appartementsrechtvolgnummer = out7.appartementsrechtvolgnummer ;
out1_tmp.indicatie_deelperceel = out7.indicatie_deelperceel ;
out1_tmp.object_referentie = out7.object_referentie ;
out1_tmp.object_soort = out7.object_soort ;
out1_tmp.burgerlijke_gemeente_code = out7.burgerlijke_gemeente_code ;
out1_tmp.burgerlijke_gemeente_waarde = out7.burgerlijke_gemeente_waarde ;
out1_tmp.akr_kadastrale_gemeente_code = out7.akr_kadastrale_gemeente_code ;
out1_tmp.akr_kadastrale_gemeente_waarde = out7.akr_kadastrale_gemeente_waarde ;
out1_tmp.kadastrale_gemeente_code = out7.kadastrale_gemeente_code ;
out1_tmp.kadastrale_gemeente_waarde = out7.kadastrale_gemeente_waarde ;
out1_tmp.perceelref_type = out7.perceelref_type ;
out1_tmp.perceelref_href = out7.perceelref_href ;
out1_tmp.appartementsrecht_type = out7.appartementsrecht_type ;
out1_tmp.appartementsrecht_href = out7.appartementsrecht_href ;
out1_tmp.aardstukdeel_code = out7.aardstukdeel_code ;
out1_tmp.aardstukdeel_waarde = out7.aardstukdeel_waarde ;
out1_tmp.ingeschreven_kadaster_stuk_kadaster_referentie_type = out7.ingeschreven_kadaster_stuk_kadaster_referentie_type ;
out1_tmp.ingeschreven_kadaster_stuk_kadaster_referentie_href = out7.ingeschreven_kadaster_stuk_kadaster_referentie_href ;
out1_tmp.ingeschreven_kadaster_stuk_stuk_referentie_type = out7.ingeschreven_kadaster_stuk_stuk_referentie_type ;
out1_tmp.ingeschreven_kadaster_stuk_stuk_referentie_href = out7.ingeschreven_kadaster_stuk_stuk_referentie_href ;
out1_tmp.ingeschreven_kadaster_akrportefeuillenr = out7.ingeschreven_kadaster_akrportefeuillenr ;
out1_tmp.ingeschreven_tia_stuk_kadastester_referentie_type = out7.ingeschreven_tia_stuk_kadastester_referentie_type ;
out1_tmp.ingeschreven_tia_stuk_kadastester_referentie_href = out7.ingeschreven_tia_stuk_kadastester_referentie_href ;
out1_tmp.ingeschreven_tia_stuk_tia_referentie_type = out7.ingeschreven_tia_stuk_tia_referentie_type ;
out1_tmp.ingeschreven_tia_stuk_tia_referentie_href = out7.ingeschreven_tia_stuk_tia_referentie_href ;
out1_tmp.ingeschreven_tia_stuk_stuk_referentie_type = out7.ingeschreven_tia_stuk_stuk_referentie_type ;
out1_tmp.ingeschreven_tia_stuk_stuk_referentie_href = out7.ingeschreven_tia_stuk_stuk_referentie_href ;
out1_tmp.ingeschreven_tia_deel = out7.ingeschreven_tia_deel ;
out1_tmp.ingeschreven_tia_nummer = out7.ingeschreven_tia_nummer ;
out1_tmp.ingeschreven_tia_deelnummer_reeks_code = out7.ingeschreven_tia_deelnummer_reeks_code ;
out1_tmp.ingeschreven_tia_deelnummer_reeks_waarde = out7.ingeschreven_tia_deelnummer_reeks_waarde ;
out1_tmp.ingeschreven_tia_deelnummer_register_code = out7.ingeschreven_tia_deelnummer_register_code ;
out1_tmp.ingeschreven_tia_deelnummer_register_waarde = out7.ingeschreven_tia_deelnummer_register_waarde ;
out1_tmp.ingeschreven_tia_deelnummer_soort_register_code = out7.ingeschreven_tia_deelnummer_soort_register_code ;
out1_tmp.ingeschreven_tia_deelnummer_soort_register_waarde = out7.ingeschreven_tia_deelnummer_soort_register_waarde ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//out1
			//out1


			
				
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				}
				
				
				
			

		



        whetherReject_tDBOutput_1 = false;
                    if(out1.bestand == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, out1.bestand);
}

                    if(out1.soort_bestand == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, out1.soort_bestand);
}

                    if(out1.startdatum_verwerking != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(out1.startdatum_verwerking.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(out1.resultaat_verwerking == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, out1.resultaat_verwerking);
}

                    if(out1.selectiecriteria_type_totaalstand == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, out1.selectiecriteria_type_totaalstand);
}

                    if(out1.selectiecriteria_kenmerknaam == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, out1.selectiecriteria_kenmerknaam);
}

                    if(out1.selectiecriteria_kenmerkwaarde == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, out1.selectiecriteria_kenmerkwaarde);
}

                    if(out1.brk_datum != null) {
pstmt_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(out1.brk_datum.getTime()));
} else {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
}

                    if(out1.volgnummer == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(9, out1.volgnummer);
}

                    if(out1.mutatiesoort == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, out1.mutatiesoort);
}

                    if(out1.was_snapshot_referentie == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, out1.was_snapshot_referentie);
}

                    if(out1.was_snapshot_toestandsdatum != null) {
pstmt_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(out1.was_snapshot_toestandsdatum.getTime()));
} else {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(out1.wordt_snapshot_referentie == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, out1.wordt_snapshot_referentie);
}

                    if(out1.wordt_snapshot_toestandsdatum != null) {
pstmt_tDBOutput_1.setTimestamp(14, new java.sql.Timestamp(out1.wordt_snapshot_toestandsdatum.getTime()));
} else {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(out1.sectie == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, out1.sectie);
}

                    if(out1.perceelnummer == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(16, out1.perceelnummer);
}

                    if(out1.appartementsrechtvolgnummer == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(17, out1.appartementsrechtvolgnummer);
}

                    if(out1.indicatie_deelperceel == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_1.setBoolean(18, out1.indicatie_deelperceel);
}

                    if(out1.object_referentie == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, out1.object_referentie);
}

                    if(out1.object_soort == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, out1.object_soort);
}

                    if(out1.burgerlijke_gemeente_code == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, out1.burgerlijke_gemeente_code);
}

                    if(out1.burgerlijke_gemeente_waarde == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(22, out1.burgerlijke_gemeente_waarde);
}

                    if(out1.akr_kadastrale_gemeente_code == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, out1.akr_kadastrale_gemeente_code);
}

                    if(out1.akr_kadastrale_gemeente_waarde == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(24, out1.akr_kadastrale_gemeente_waarde);
}

                    if(out1.kadastrale_gemeente_code == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, out1.kadastrale_gemeente_code);
}

                    if(out1.kadastrale_gemeente_waarde == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, out1.kadastrale_gemeente_waarde);
}

                    if(out1.perceelref_type == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, out1.perceelref_type);
}

                    if(out1.perceelref_href == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, out1.perceelref_href);
}

                    if(out1.appartementsrecht_type == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, out1.appartementsrecht_type);
}

                    if(out1.appartementsrecht_href == null) {
pstmt_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(30, out1.appartementsrecht_href);
}

                    if(out1.aardstukdeel_code == null) {
pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(31, out1.aardstukdeel_code);
}

                    if(out1.aardstukdeel_waarde == null) {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(32, out1.aardstukdeel_waarde);
}

                    if(out1.ingeschreven_kadaster_stuk_kadaster_referentie_type == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, out1.ingeschreven_kadaster_stuk_kadaster_referentie_type);
}

                    if(out1.ingeschreven_kadaster_stuk_kadaster_referentie_href == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(34, out1.ingeschreven_kadaster_stuk_kadaster_referentie_href);
}

                    if(out1.ingeschreven_kadaster_stuk_stuk_referentie_type == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, out1.ingeschreven_kadaster_stuk_stuk_referentie_type);
}

                    if(out1.ingeschreven_kadaster_stuk_stuk_referentie_href == null) {
pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(36, out1.ingeschreven_kadaster_stuk_stuk_referentie_href);
}

                    if(out1.ingeschreven_kadaster_akrportefeuillenr == null) {
pstmt_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(37, out1.ingeschreven_kadaster_akrportefeuillenr);
}

                    if(out1.ingeschreven_tia_stuk_kadastester_referentie_type == null) {
pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(38, out1.ingeschreven_tia_stuk_kadastester_referentie_type);
}

                    if(out1.ingeschreven_tia_stuk_kadastester_referentie_href == null) {
pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(39, out1.ingeschreven_tia_stuk_kadastester_referentie_href);
}

                    if(out1.ingeschreven_tia_stuk_tia_referentie_type == null) {
pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(40, out1.ingeschreven_tia_stuk_tia_referentie_type);
}

                    if(out1.ingeschreven_tia_stuk_tia_referentie_href == null) {
pstmt_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(41, out1.ingeschreven_tia_stuk_tia_referentie_href);
}

                    if(out1.ingeschreven_tia_stuk_stuk_referentie_type == null) {
pstmt_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(42, out1.ingeschreven_tia_stuk_stuk_referentie_type);
}

                    if(out1.ingeschreven_tia_stuk_stuk_referentie_href == null) {
pstmt_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(43, out1.ingeschreven_tia_stuk_stuk_referentie_href);
}

                    if(out1.ingeschreven_tia_deel == null) {
pstmt_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(44, out1.ingeschreven_tia_deel);
}

                    if(out1.ingeschreven_tia_nummer == null) {
pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(45, out1.ingeschreven_tia_nummer);
}

                    if(out1.ingeschreven_tia_deelnummer_reeks_code == null) {
pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(46, out1.ingeschreven_tia_deelnummer_reeks_code);
}

                    if(out1.ingeschreven_tia_deelnummer_reeks_waarde == null) {
pstmt_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(47, out1.ingeschreven_tia_deelnummer_reeks_waarde);
}

                    if(out1.ingeschreven_tia_deelnummer_register_code == null) {
pstmt_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(48, out1.ingeschreven_tia_deelnummer_register_code);
}

                    if(out1.ingeschreven_tia_deelnummer_register_waarde == null) {
pstmt_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(49, out1.ingeschreven_tia_deelnummer_register_waarde);
}

                    if(out1.ingeschreven_tia_deelnummer_soort_register_code == null) {
pstmt_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(50, out1.ingeschreven_tia_deelnummer_soort_register_code);
}

                    if(out1.ingeschreven_tia_deelnummer_soort_register_waarde == null) {
pstmt_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(51, out1.ingeschreven_tia_deelnummer_soort_register_waarde);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
            if(!whetherReject_tDBOutput_1) {
            }
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'row6' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "out7"




	
	/**
	 * [tXMLMap_1_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_1_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("out7"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("out1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBCommit_3Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tFileInputXML_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 



/**
 * [tFileInputXML_3 finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBCommit_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_3", false);
		start_Hash.put("tDBCommit_3", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_3";

	
		int tos_count_tDBCommit_3 = 0;
		

 



/**
 * [tDBCommit_3 begin ] stop
 */
	
	/**
	 * [tDBCommit_3 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

	java.sql.Connection conn_tDBCommit_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_3 != null && !conn_tDBCommit_3.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_3.commit();
			
	
		}finally{
			
			conn_tDBCommit_3.close();
			
	    }
	
	}

 


	tos_count_tDBCommit_3++;

/**
 * [tDBCommit_3 main ] stop
 */
	
	/**
	 * [tDBCommit_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_3 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 

ok_Hash.put("tDBCommit_3", true);
end_Hash.put("tDBCommit_3", System.currentTimeMillis());




/**
 * [tDBCommit_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tJava_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_3 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";

	
		int tos_count_tJava_6 = 0;
		


System.out.println(TalendDate.formatDate("HH:mm:ss dd-MM-yyyy", TalendDate.getCurrentDate()) + " - Metadata tabel creeëren en vullen "+context.jobnumber+": De metadata tabel is gevuld");
context.result = true;
context.jobName = "create_fill_metadata_table";
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());




/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tRunJob_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_2 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_2.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_2.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_2.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_2.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("xmlType", context.xmlType);
                    paraList_tRunJob_2.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_2.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("break_job", context.break_job);
                    paraList_tRunJob_2.add("--context_type " + "break_job" + "=" + "id_Boolean");
                    parentContextMap_tRunJob_2.put("jobName", context.jobName);
                    paraList_tRunJob_2.add("--context_type " + "jobName" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("result", context.result);
                    paraList_tRunJob_2.add("--context_type " + "result" + "=" + "id_Boolean");
                    parentContextMap_tRunJob_2.put("jobnumber", context.jobnumber);
                    paraList_tRunJob_2.add("--context_type " + "jobnumber" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_2().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_2 = context.propertyNames();
		while (propertyNames_tRunJob_2.hasMoreElements()) {
			String key_tRunJob_2 = (String) propertyNames_tRunJob_2.nextElement();
			Object value_tRunJob_2 = (Object) context.get(key_tRunJob_2);
			if(value_tRunJob_2!=null) {  
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
			} else {
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_2 = null;

	
	
		brk.joblogger_0_1.JobLogger childJob_tRunJob_2 = new brk.joblogger_0_1.JobLogger();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
					java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2!=null) ? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public java.util.Date brk_datum;

				public java.util.Date getBrk_datum () {
					return this.brk_datum;
				}
				
			    public String burgerlijke_gemeente_code;

				public String getBurgerlijke_gemeente_code () {
					return this.burgerlijke_gemeente_code;
				}
				
			    public String burgerlijke_gemeente_waarde;

				public String getBurgerlijke_gemeente_waarde () {
					return this.burgerlijke_gemeente_waarde;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_create_fill_metadata_table.length) {
				if(length < 1024 && commonByteArray_BRK_create_fill_metadata_table.length == 0) {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[1024];
				} else {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_create_fill_metadata_table, 0, length);
			strReturn = new String(commonByteArray_BRK_create_fill_metadata_table, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
					this.brk_datum = readDate(dis);
					
					this.burgerlijke_gemeente_code = readString(dis);
					
					this.burgerlijke_gemeente_waarde = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.brk_datum,dos);
					
					// String
				
						writeString(this.burgerlijke_gemeente_code,dos);
					
					// String
				
						writeString(this.burgerlijke_gemeente_waarde,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("brk_datum="+String.valueOf(brk_datum));
		sb.append(",burgerlijke_gemeente_code="+burgerlijke_gemeente_code);
		sb.append(",burgerlijke_gemeente_waarde="+burgerlijke_gemeente_waarde);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public java.util.Date brk_datum;

				public java.util.Date getBrk_datum () {
					return this.brk_datum;
				}
				
			    public String burgerlijke_gemeente_code;

				public String getBurgerlijke_gemeente_code () {
					return this.burgerlijke_gemeente_code;
				}
				
			    public String burgerlijke_gemeente_waarde;

				public String getBurgerlijke_gemeente_waarde () {
					return this.burgerlijke_gemeente_waarde;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_create_fill_metadata_table.length) {
				if(length < 1024 && commonByteArray_BRK_create_fill_metadata_table.length == 0) {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[1024];
				} else {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_create_fill_metadata_table, 0, length);
			strReturn = new String(commonByteArray_BRK_create_fill_metadata_table, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
					this.brk_datum = readDate(dis);
					
					this.burgerlijke_gemeente_code = readString(dis);
					
					this.burgerlijke_gemeente_waarde = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.brk_datum,dos);
					
					// String
				
						writeString(this.burgerlijke_gemeente_code,dos);
					
					// String
				
						writeString(this.burgerlijke_gemeente_waarde,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("brk_datum="+String.valueOf(brk_datum));
		sb.append(",burgerlijke_gemeente_code="+burgerlijke_gemeente_code);
		sb.append(",burgerlijke_gemeente_waarde="+burgerlijke_gemeente_waarde);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
row9Struct row13 = row9;





	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row13"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tFlowMeter_17 - inputs:(row9) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_3 - inputs:(out3,row13) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tFlowMeter_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_17", false);
		start_Hash.put("tFlowMeter_17", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_17";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row9"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tFlowMeter_17 = 0;
		

    int count_tFlowMeter_17 = 0; 
 



/**
 * [tFlowMeter_17 begin ] stop
 */



	
	/**
	 * [tFileInputXML_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_4", false);
		start_Hash.put("tFileInputXML_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_4";

	
		int tos_count_tFileInputXML_4 = 0;
		

	

int nb_line_tFileInputXML_4 = 0;

	String os_tFileInputXML_4 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_4=false;
	if(os_tFileInputXML_4.indexOf("windows") > -1 || os_tFileInputXML_4.indexOf("nt") > -1){
		isWindows_tFileInputXML_4=true;
	}
class XML_API_tFileInputXML_4{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_4 xml_api_tFileInputXML_4 = new XML_API_tFileInputXML_4();

String[] queryPaths_tFileInputXML_4 = new String[]{	
	"./BRKDatum"		
	,"./BRKDatum"+"/@xsi:nil"	
	,"./naamBurgerlijkeGemeente/code"		
	,"./naamBurgerlijkeGemeente/code"+"/@xsi:nil"	
	,"./naamBurgerlijkeGemeente/waarde"		
	,"./naamBurgerlijkeGemeente/waarde"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_4 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_4 = "";
String[] node_tFileInputXML_4 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_4 = new org.talend.xml.sax.SAXLooper("/GemeenteGebaseerdeStand",queryPaths_tFileInputXML_4,asXMLs_tFileInputXML_4);
looper_tFileInputXML_4.setEncoding("ISO-8859-15");
Object filename_tFileInputXML_4 = null;
try {
	filename_tFileInputXML_4 = context.xmlLocation;
} catch(java.lang.Exception e) {
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_4 != null && filename_tFileInputXML_4 instanceof String && filename_tFileInputXML_4.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_4){
		filename_tFileInputXML_4 = filename_tFileInputXML_4.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_4 instanceof java.io.InputStream){
	looper_tFileInputXML_4.parse((java.io.InputStream)filename_tFileInputXML_4);
}else{
	looper_tFileInputXML_4.parse(String.valueOf(filename_tFileInputXML_4));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_4  = looper_tFileInputXML_4.iterator();
while (it_tFileInputXML_4.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_4 = it_tFileInputXML_4.next();
		nb_line_tFileInputXML_4++;
		
	row9 = null;			
	boolean whetherReject_tFileInputXML_4 = false;
	row9 = new row9Struct();
	try{
	str_tFileInputXML_4 = row_tFileInputXML_4.get("./BRKDatum");
	node_tFileInputXML_4 = new String[]{str_tFileInputXML_4,row_tFileInputXML_4.get("./BRKDatum"+"/@xsi:nil")};	
										if(xml_api_tFileInputXML_4.isDefNull(node_tFileInputXML_4)){
											row9.brk_datum =null;
										}else if(xml_api_tFileInputXML_4.isEmpty(node_tFileInputXML_4) || xml_api_tFileInputXML_4.isMissing(node_tFileInputXML_4)){
											row9.brk_datum=null;
										}else{
		row9.brk_datum = ParserUtils.parseTo_Date(str_tFileInputXML_4, "yyyy-MM-dd");
	}
	str_tFileInputXML_4 = row_tFileInputXML_4.get("./naamBurgerlijkeGemeente/code");
	node_tFileInputXML_4 = new String[]{str_tFileInputXML_4,row_tFileInputXML_4.get("./naamBurgerlijkeGemeente/code"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_4.isDefNull(node_tFileInputXML_4)){
											row9.burgerlijke_gemeente_code =null;
									}else if(xml_api_tFileInputXML_4.isEmpty(node_tFileInputXML_4)){
										row9.burgerlijke_gemeente_code ="";
									}else if(xml_api_tFileInputXML_4.isMissing(node_tFileInputXML_4 )){ 
										row9.burgerlijke_gemeente_code =null;
									}else{
		row9.burgerlijke_gemeente_code = str_tFileInputXML_4;
	}
	str_tFileInputXML_4 = row_tFileInputXML_4.get("./naamBurgerlijkeGemeente/waarde");
	node_tFileInputXML_4 = new String[]{str_tFileInputXML_4,row_tFileInputXML_4.get("./naamBurgerlijkeGemeente/waarde"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_4.isDefNull(node_tFileInputXML_4)){
											row9.burgerlijke_gemeente_waarde =null;
									}else if(xml_api_tFileInputXML_4.isEmpty(node_tFileInputXML_4)){
										row9.burgerlijke_gemeente_waarde ="";
									}else if(xml_api_tFileInputXML_4.isMissing(node_tFileInputXML_4 )){ 
										row9.burgerlijke_gemeente_waarde =null;
									}else{
		row9.burgerlijke_gemeente_waarde = str_tFileInputXML_4;
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_4 = true;
                System.err.println(e.getMessage());
                row9 = null;
    }
			
			

 



/**
 * [tFileInputXML_4 begin ] stop
 */
	
	/**
	 * [tFileInputXML_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 


	tos_count_tFileInputXML_4++;

/**
 * [tFileInputXML_4 main ] stop
 */
	
	/**
	 * [tFileInputXML_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 



/**
 * [tFileInputXML_4 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tFlowMeter_17 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_17";

	

			//row9
			//row9


			
				
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				}
				
				
				
			

		

    count_tFlowMeter_17++; 
 
     row13 = row9;


	tos_count_tFlowMeter_17++;

/**
 * [tFlowMeter_17 main ] stop
 */
	
	/**
	 * [tFlowMeter_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_17";

	

 



/**
 * [tFlowMeter_17 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

			//row13
			//row13


			
				
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.brk_datum = row13.brk_datum;
				
				row13_HashRow.burgerlijke_gemeente_code = row13.burgerlijke_gemeente_code;
				
				row13_HashRow.burgerlijke_gemeente_waarde = row13.burgerlijke_gemeente_waarde;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeter_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_17";

	

 



/**
 * [tFlowMeter_17 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tFileInputXML_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 



/**
 * [tFileInputXML_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	


	}
	try {
		looper_tFileInputXML_4.handleTaskResponse();
	} catch(java.lang.Exception e) {
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_4_NB_LINE",nb_line_tFileInputXML_4);

	
 

ok_Hash.put("tFileInputXML_4", true);
end_Hash.put("tFileInputXML_4", System.currentTimeMillis());




/**
 * [tFileInputXML_4 end ] stop
 */

	
	/**
	 * [tFlowMeter_17 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_17";

	

	tFlowMeterCatcher_1.addMessage("row9", new Integer(count_tFlowMeter_17), "null", "", "tFlowMeter_17");

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row9"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tFlowMeter_17", true);
end_Hash.put("tFlowMeter_17", System.currentTimeMillis());




/**
 * [tFlowMeter_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row13"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */






				}//end the resume

				
							tFlowMeterCatcher_1Process(globalMap);
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 



/**
 * [tFileInputXML_4 finally ] stop
 */

	
	/**
	 * [tFlowMeter_17 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_17";

	

 



/**
 * [tFlowMeter_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		


System.out.println(TalendDate.formatDate("HH:mm:ss dd-MM-yyyy", TalendDate.getCurrentDate()) + " - Metadata tabel creeëren en vullen "+context.jobnumber);
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public String selectiecriteria_type_totaalstand;

				public String getSelectiecriteria_type_totaalstand () {
					return this.selectiecriteria_type_totaalstand;
				}
				
			    public String selectiecriteria_kenmerknaam;

				public String getSelectiecriteria_kenmerknaam () {
					return this.selectiecriteria_kenmerknaam;
				}
				
			    public String selectiecriteria_kenmerkwaarde;

				public String getSelectiecriteria_kenmerkwaarde () {
					return this.selectiecriteria_kenmerkwaarde;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_create_fill_metadata_table.length) {
				if(length < 1024 && commonByteArray_BRK_create_fill_metadata_table.length == 0) {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[1024];
				} else {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_create_fill_metadata_table, 0, length);
			strReturn = new String(commonByteArray_BRK_create_fill_metadata_table, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
					this.selectiecriteria_type_totaalstand = readString(dis);
					
					this.selectiecriteria_kenmerknaam = readString(dis);
					
					this.selectiecriteria_kenmerkwaarde = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.selectiecriteria_type_totaalstand,dos);
					
					// String
				
						writeString(this.selectiecriteria_kenmerknaam,dos);
					
					// String
				
						writeString(this.selectiecriteria_kenmerkwaarde,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("selectiecriteria_type_totaalstand="+selectiecriteria_type_totaalstand);
		sb.append(",selectiecriteria_kenmerknaam="+selectiecriteria_kenmerknaam);
		sb.append(",selectiecriteria_kenmerkwaarde="+selectiecriteria_kenmerkwaarde);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public String selectiecriteria_type_totaalstand;

				public String getSelectiecriteria_type_totaalstand () {
					return this.selectiecriteria_type_totaalstand;
				}
				
			    public String selectiecriteria_kenmerknaam;

				public String getSelectiecriteria_kenmerknaam () {
					return this.selectiecriteria_kenmerknaam;
				}
				
			    public String selectiecriteria_kenmerkwaarde;

				public String getSelectiecriteria_kenmerkwaarde () {
					return this.selectiecriteria_kenmerkwaarde;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_create_fill_metadata_table.length) {
				if(length < 1024 && commonByteArray_BRK_create_fill_metadata_table.length == 0) {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[1024];
				} else {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_create_fill_metadata_table, 0, length);
			strReturn = new String(commonByteArray_BRK_create_fill_metadata_table, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
					this.selectiecriteria_type_totaalstand = readString(dis);
					
					this.selectiecriteria_kenmerknaam = readString(dis);
					
					this.selectiecriteria_kenmerkwaarde = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.selectiecriteria_type_totaalstand,dos);
					
					// String
				
						writeString(this.selectiecriteria_kenmerknaam,dos);
					
					// String
				
						writeString(this.selectiecriteria_kenmerkwaarde,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("selectiecriteria_type_totaalstand="+selectiecriteria_type_totaalstand);
		sb.append(",selectiecriteria_kenmerknaam="+selectiecriteria_kenmerknaam);
		sb.append(",selectiecriteria_kenmerkwaarde="+selectiecriteria_kenmerkwaarde);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row8Struct row6 = row8;





	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row6"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tFlowMeter_14 - inputs:(row8) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_2 - inputs:(out7,row6) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tFlowMeter_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_14", false);
		start_Hash.put("tFlowMeter_14", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row8"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tFlowMeter_14 = 0;
		

    int count_tFlowMeter_14 = 0; 
 



/**
 * [tFlowMeter_14 begin ] stop
 */



	
	/**
	 * [tFileInputXML_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_5", false);
		start_Hash.put("tFileInputXML_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_5";

	
		int tos_count_tFileInputXML_5 = 0;
		

	

int nb_line_tFileInputXML_5 = 0;

	String os_tFileInputXML_5 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_5=false;
	if(os_tFileInputXML_5.indexOf("windows") > -1 || os_tFileInputXML_5.indexOf("nt") > -1){
		isWindows_tFileInputXML_5=true;
	}
class XML_API_tFileInputXML_5{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_5 xml_api_tFileInputXML_5 = new XML_API_tFileInputXML_5();

String[] queryPaths_tFileInputXML_5 = new String[]{	
	"../productType"		
	,"../productType"+"/@xsi:nil"	
	,"./kenmerknaam"		
	,"./kenmerknaam"+"/@xsi:nil"	
	,"./kenmerkwaarde"		
	,"./kenmerkwaarde"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_5 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_5 = "";
String[] node_tFileInputXML_5 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_5 = new org.talend.xml.sax.SAXLooper("/Stand/productSpecificatie",queryPaths_tFileInputXML_5,asXMLs_tFileInputXML_5);
looper_tFileInputXML_5.setEncoding("ISO-8859-15");
Object filename_tFileInputXML_5 = null;
try {
	filename_tFileInputXML_5 = context.xmlLocation;
} catch(java.lang.Exception e) {
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_5 != null && filename_tFileInputXML_5 instanceof String && filename_tFileInputXML_5.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_5){
		filename_tFileInputXML_5 = filename_tFileInputXML_5.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_5 instanceof java.io.InputStream){
	looper_tFileInputXML_5.parse((java.io.InputStream)filename_tFileInputXML_5);
}else{
	looper_tFileInputXML_5.parse(String.valueOf(filename_tFileInputXML_5));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_5  = looper_tFileInputXML_5.iterator();
while (it_tFileInputXML_5.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_5 = it_tFileInputXML_5.next();
		nb_line_tFileInputXML_5++;
		
	row8 = null;			
	boolean whetherReject_tFileInputXML_5 = false;
	row8 = new row8Struct();
	try{
	str_tFileInputXML_5 = row_tFileInputXML_5.get("../productType");
	node_tFileInputXML_5 = new String[]{str_tFileInputXML_5,row_tFileInputXML_5.get("../productType"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row8.selectiecriteria_type_totaalstand =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row8.selectiecriteria_type_totaalstand ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row8.selectiecriteria_type_totaalstand =null;
									}else{
		row8.selectiecriteria_type_totaalstand = str_tFileInputXML_5;
	}
	str_tFileInputXML_5 = row_tFileInputXML_5.get("./kenmerknaam");
	node_tFileInputXML_5 = new String[]{str_tFileInputXML_5,row_tFileInputXML_5.get("./kenmerknaam"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row8.selectiecriteria_kenmerknaam =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row8.selectiecriteria_kenmerknaam ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row8.selectiecriteria_kenmerknaam =null;
									}else{
		row8.selectiecriteria_kenmerknaam = str_tFileInputXML_5;
	}
	str_tFileInputXML_5 = row_tFileInputXML_5.get("./kenmerkwaarde");
	node_tFileInputXML_5 = new String[]{str_tFileInputXML_5,row_tFileInputXML_5.get("./kenmerkwaarde"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row8.selectiecriteria_kenmerkwaarde =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row8.selectiecriteria_kenmerkwaarde ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row8.selectiecriteria_kenmerkwaarde =null;
									}else{
		row8.selectiecriteria_kenmerkwaarde = str_tFileInputXML_5;
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_5 = true;
                System.err.println(e.getMessage());
                row8 = null;
    }
			
			

 



/**
 * [tFileInputXML_5 begin ] stop
 */
	
	/**
	 * [tFileInputXML_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 


	tos_count_tFileInputXML_5++;

/**
 * [tFileInputXML_5 main ] stop
 */
	
	/**
	 * [tFileInputXML_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 



/**
 * [tFileInputXML_5 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tFlowMeter_14 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_14";

	

			//row8
			//row8


			
				
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				}
				
				
				
			

		

    count_tFlowMeter_14++; 
 
     row6 = row8;


	tos_count_tFlowMeter_14++;

/**
 * [tFlowMeter_14 main ] stop
 */
	
	/**
	 * [tFlowMeter_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_14";

	

 



/**
 * [tFlowMeter_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

			//row6
			//row6


			
				
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.selectiecriteria_type_totaalstand = row6.selectiecriteria_type_totaalstand;
				
				row6_HashRow.selectiecriteria_kenmerknaam = row6.selectiecriteria_kenmerknaam;
				
				row6_HashRow.selectiecriteria_kenmerkwaarde = row6.selectiecriteria_kenmerkwaarde;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeter_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_14";

	

 



/**
 * [tFlowMeter_14 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFileInputXML_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 



/**
 * [tFileInputXML_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	


	}
	try {
		looper_tFileInputXML_5.handleTaskResponse();
	} catch(java.lang.Exception e) {
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_5_NB_LINE",nb_line_tFileInputXML_5);

	
 

ok_Hash.put("tFileInputXML_5", true);
end_Hash.put("tFileInputXML_5", System.currentTimeMillis());




/**
 * [tFileInputXML_5 end ] stop
 */

	
	/**
	 * [tFlowMeter_14 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_14";

	

	tFlowMeterCatcher_1.addMessage("row8", new Integer(count_tFlowMeter_14), "null", "", "tFlowMeter_14");

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row8"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tFlowMeter_14", true);
end_Hash.put("tFlowMeter_14", System.currentTimeMillis());




/**
 * [tFlowMeter_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row6"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */






				}//end the resume

				
							tFlowMeterCatcher_1Process(globalMap);
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 



/**
 * [tFileInputXML_5 finally ] stop
 */

	
	/**
	 * [tFlowMeter_14 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_14";

	

 



/**
 * [tFlowMeter_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_5_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_BRK_create_fill_metadata_table = new byte[0];
    static byte[] commonByteArray_BRK_create_fill_metadata_table = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_create_fill_metadata_table.length) {
				if(length < 1024 && commonByteArray_BRK_create_fill_metadata_table.length == 0) {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[1024];
				} else {
   					commonByteArray_BRK_create_fill_metadata_table = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_create_fill_metadata_table, 0, length);
			strReturn = new String(commonByteArray_BRK_create_fill_metadata_table, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_create_fill_metadata_table) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row7"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row7.pid = pid;
		row7.root_pid = rootPid;
		row7.father_pid = fatherPid;	
        row7.project = projectName;
        row7.job = jobName;
        row7.context = contextStr;
		row7.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row7.moment = mcm.getMoment();
		row7.job_version = mcm.getJobVersion();
		row7.job_repository_id = mcm.getJobId();
		row7.system_pid = mcm.getSystemPid();
		row7.label = mcm.getLabel();
		row7.count = mcm.getCount();
		row7.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row7.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//row7
			//row7


			
				
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				}
				
				
				
			

		

    if (row7.count==0) {
	context.break_job = true;
} else {
	System.out.println(TalendDate.formatDate("HH:mm:ss dd-MM-yyyy", TalendDate.getCurrentDate()) + " - Metadata tabel creeëren en vullen "+context.jobnumber+": De kopinformatie is uitgelezen, nu de standen nog");
};

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row7"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

   			if (context.break_job == true) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				
    			tDie_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Error: Er is geen kopinfo ingelezen uit het initiele bestand, ga na wat er fout gaat. De job wordt afgebroken.");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Error: Er is geen kopinfo ingelezen uit het initiele bestand, ga na wat er fout gaat. De job wordt afgebroken.");
	globalMap.put("tDie_1_DIE_MESSAGES", "Error: Er is geen kopinfo ingelezen uit het initiele bestand, ga na wat er fout gaat. De job wordt afgebroken.");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final create_fill_metadata_table create_fill_metadata_tableClass = new create_fill_metadata_table();

        int exitCode = create_fill_metadata_tableClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = create_fill_metadata_table.class.getClassLoader().getResourceAsStream("brk/create_fill_metadata_table_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = create_fill_metadata_table.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("inzichtDataSchemaName", "id_String");
                            context.inzichtDataSchemaName=(String) context.getProperty("inzichtDataSchemaName");
                        context.setContextType("inzichtDataOwner", "id_String");
                            context.inzichtDataOwner=(String) context.getProperty("inzichtDataOwner");
                        context.setContextType("inzichtDataOwnerPassword", "id_String");
                            context.inzichtDataOwnerPassword=(String) context.getProperty("inzichtDataOwnerPassword");
                        context.setContextType("xmlType", "id_String");
                            context.xmlType=(String) context.getProperty("xmlType");
                        context.setContextType("xmlLocation", "id_String");
                            context.xmlLocation=(String) context.getProperty("xmlLocation");
                        context.setContextType("break_job", "id_Boolean");
                            try{
                                context.break_job=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("break_job"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "break_job", e.getMessage()));
                                context.break_job=null;
                            }
                        context.setContextType("jobName", "id_String");
                            context.jobName=(String) context.getProperty("jobName");
                        context.setContextType("result", "id_Boolean");
                            try{
                                context.result=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("result"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "result", e.getMessage()));
                                context.result=null;
                            }
                        context.setContextType("jobnumber", "id_String");
                            context.jobnumber=(String) context.getProperty("jobnumber");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("inzichtDataSchemaName")) {
                context.inzichtDataSchemaName = (String) parentContextMap.get("inzichtDataSchemaName");
            }if (parentContextMap.containsKey("inzichtDataOwner")) {
                context.inzichtDataOwner = (String) parentContextMap.get("inzichtDataOwner");
            }if (parentContextMap.containsKey("inzichtDataOwnerPassword")) {
                context.inzichtDataOwnerPassword = (String) parentContextMap.get("inzichtDataOwnerPassword");
            }if (parentContextMap.containsKey("xmlType")) {
                context.xmlType = (String) parentContextMap.get("xmlType");
            }if (parentContextMap.containsKey("xmlLocation")) {
                context.xmlLocation = (String) parentContextMap.get("xmlLocation");
            }if (parentContextMap.containsKey("break_job")) {
                context.break_job = (Boolean) parentContextMap.get("break_job");
            }if (parentContextMap.containsKey("jobName")) {
                context.jobName = (String) parentContextMap.get("jobName");
            }if (parentContextMap.containsKey("result")) {
                context.result = (Boolean) parentContextMap.get("result");
            }if (parentContextMap.containsKey("jobnumber")) {
                context.jobnumber = (String) parentContextMap.get("jobnumber");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_4) {
globalMap.put("tJava_4_SUBPROCESS_STATE", -1);

e_tJava_4.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : create_fill_metadata_table");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     387459 characters generated by Talend Open Studio for Data Integration 
 *     on the 10 mei 2020 14:29:40 CEST
 ************************************************************************************************/