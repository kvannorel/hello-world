// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package brk.createlogtables_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Settings;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: CreateLogTables Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class CreateLogTables implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(xmlType != null){
				
					this.setProperty("xmlType", xmlType.toString());
				
			}
			
			if(jobName != null){
				
					this.setProperty("jobName", jobName.toString());
				
			}
			
			if(result != null){
				
					this.setProperty("result", result.toString());
				
			}
			
		}

public String xmlType;
public String getXmlType(){
	return this.xmlType;
}
public String jobName;
public String getJobName(){
	return this.jobName;
}
public Boolean result;
public Boolean getResult(){
	return this.result;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "CreateLogTables";
	private final String projectName = "BRK";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CreateLogTables.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CreateLogTables.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("creating tables job_results_brk and brk_results");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tPostgresqlConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_1", false);
		start_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_1";

	
		int tos_count_tPostgresqlConnection_1 = 0;
		


	
            String dbProperties_tPostgresqlConnection_1 = "";
            String url_tPostgresqlConnection_1 = "jdbc:postgresql://"+Settings.get("CONNECTION_DEFINITION", "host")+":"+Settings.get("CONNECTION_DEFINITION", "port")+"/"+Settings.get("CONNECTION_DEFINITION", "database");
            
            if(dbProperties_tPostgresqlConnection_1 != null && !"".equals(dbProperties_tPostgresqlConnection_1.trim())) {
                url_tPostgresqlConnection_1 = url_tPostgresqlConnection_1 + "?" + dbProperties_tPostgresqlConnection_1;
            }
		String dbUser_tPostgresqlConnection_1 = Settings.get("CONNECTION_DEFINITION", "user");
		
		
			
	final String decryptedPassword_tPostgresqlConnection_1 = Settings.get("CONNECTION_DEFINITION", "password"); 
			String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;
		
	java.sql.Connection conn_tPostgresqlConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tPostgresqlConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tPostgresqlConnection_1.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_1 = drivers_tPostgresqlConnection_1.nextElement();
        if (redShiftDriverNames_tPostgresqlConnection_1.contains(d_tPostgresqlConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_1);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_1);
            } catch (java.lang.Exception e_tPostgresqlConnection_1) {
                    //do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tPostgresqlConnection_1 = java.lang.Class.forName(driverClass_tPostgresqlConnection_1);
		
				conn_tPostgresqlConnection_1 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_1,dbUser_tPostgresqlConnection_1,dbPwd_tPostgresqlConnection_1);

		globalMap.put("conn_tPostgresqlConnection_1", conn_tPostgresqlConnection_1);
	if (null != conn_tPostgresqlConnection_1) {
		
			conn_tPostgresqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_1",Settings.get("SCHEMA_NAME_LOOKUP", "ldf"));

	globalMap.put("conn_" + "tPostgresqlConnection_1",conn_tPostgresqlConnection_1);

 



/**
 * [tPostgresqlConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 


	tos_count_tPostgresqlConnection_1++;

/**
 * [tPostgresqlConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 

ok_Hash.put("tPostgresqlConnection_1", true);
end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());




/**
 * [tPostgresqlConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tPostgresqlRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_1", false);
		start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_1";

	
		int tos_count_tPostgresqlRow_1 = 0;
		

	java.sql.Connection conn_tPostgresqlRow_1 = null;
	String query_tPostgresqlRow_1 = "";
	boolean whetherReject_tPostgresqlRow_1 = false;
				conn_tPostgresqlRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
			
    resourceMap.put("conn_tPostgresqlRow_1", conn_tPostgresqlRow_1);
        java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1.createStatement();
        resourceMap.put("stmt_tPostgresqlRow_1", stmt_tPostgresqlRow_1);


 



/**
 * [tPostgresqlRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

query_tPostgresqlRow_1 = "-- create tables for brk log results --\n\nDROP TABLE IF EXISTS "+Settings.get("SCHEMA_NAME_LOOKUP", "ldf")+".job_results_brk;\nCREATE TABLE "+Settings.get("SCHEMA_NAME_LOOKUP", "ldf")+".job_results_brk\n(\n  id serial NOT NULL, -- Sleutel\n  jobname character varying(100), -- Taaknaam\n  lastrun timesta"
+"mp without time zone, -- Tijd van laatste uitvoer\n  result boolean, -- Resultaat\n  CONSTRAINT job_results_brki00 PRIMA"
+"RY KEY (id)\n)\nWITH (\n  OIDS=FALSE\n);\n\nCOMMENT ON TABLE job_results_brk IS 'Resultaten job taken';\nCOMMENT ON COLU"
+"MN job_results_brk.id IS 'Sleutel';\nCOMMENT ON COLUMN job_results_brk.jobname IS 'Taaknaam';\nCOMMENT ON COLUMN job_res"
+"ults_brk.lastrun IS 'Tijd van laatste uitvoer';\nCOMMENT ON COLUMN job_results_brk.result IS 'Resultaat';\n\nINSERT INTO"
+" job_results_brk (jobname, lastrun,result) \nSELECT  jobname, lastrun, result FROM job_results_ldf\nWHERE jobname = 'anl"
+"_adres' ;\n\nINSERT INTO job_results_brk (jobname, lastrun,result) \nSELECT  jobname, lastrun, result FROM job_results_l"
+"df\nWHERE jobname = 'anl_persoon';";
whetherReject_tPostgresqlRow_1 = false;
globalMap.put("tPostgresqlRow_1_QUERY",query_tPostgresqlRow_1);
try {
		stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_1) {
		
	}
	

 


	tos_count_tPostgresqlRow_1++;

/**
 * [tPostgresqlRow_1 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

	
        stmt_tPostgresqlRow_1.close();
        resourceMap.remove("stmt_tPostgresqlRow_1");
    resourceMap.put("statementClosed_tPostgresqlRow_1", true);
    resourceMap.put("finish_tPostgresqlRow_1", true);
 

ok_Hash.put("tPostgresqlRow_1", true);
end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());




/**
 * [tPostgresqlRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tPostgresqlCommit_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

    if (resourceMap.get("statementClosed_tPostgresqlRow_1") == null) {
            java.sql.Statement stmtToClose_tPostgresqlRow_1 = null;
            if ((stmtToClose_tPostgresqlRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresqlRow_1")) != null) {
                stmtToClose_tPostgresqlRow_1.close();
            }
    }
 



/**
 * [tPostgresqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresqlCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlCommit_1", false);
		start_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlCommit_1";

	
		int tos_count_tPostgresqlCommit_1 = 0;
		

 



/**
 * [tPostgresqlCommit_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

	java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
	if(conn_tPostgresqlCommit_1 != null && !conn_tPostgresqlCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tPostgresqlCommit_1.commit();
			
	
		}finally{
			
			conn_tPostgresqlCommit_1.close();
			
	    }
	
	}

 


	tos_count_tPostgresqlCommit_1++;

/**
 * [tPostgresqlCommit_1 main ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 

ok_Hash.put("tPostgresqlCommit_1", true);
end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());




/**
 * [tPostgresqlCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final CreateLogTables CreateLogTablesClass = new CreateLogTables();

        int exitCode = CreateLogTablesClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CreateLogTables.class.getClassLoader().getResourceAsStream("brk/createlogtables_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CreateLogTables.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("xmlType", "id_String");
                            context.xmlType=(String) context.getProperty("xmlType");
                        context.setContextType("jobName", "id_String");
                            context.jobName=(String) context.getProperty("jobName");
                        context.setContextType("result", "id_Boolean");
                            try{
                                context.result=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("result"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "result", e.getMessage()));
                                context.result=null;
                            }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("xmlType")) {
                context.xmlType = (String) parentContextMap.get("xmlType");
            }if (parentContextMap.containsKey("jobName")) {
                context.jobName = (String) parentContextMap.get("jobName");
            }if (parentContextMap.containsKey("result")) {
                context.result = (Boolean) parentContextMap.get("result");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CreateLogTables");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresqlConnection_1", globalMap.get("conn_tPostgresqlConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     44121 characters generated by Talend Open Studio for Data Integration 
 *     on the 10 mei 2020 14:29:39 CEST
 ************************************************************************************************/