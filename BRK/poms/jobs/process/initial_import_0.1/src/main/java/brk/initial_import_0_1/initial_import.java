// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package brk.initial_import_0_1;

import routines.CustomSettings;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.PasswordReader;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Settings;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	


@SuppressWarnings("unused")

/**
 * Job: initial_import Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class initial_import implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(xmlType != null){
				
					this.setProperty("xmlType", xmlType.toString());
				
			}
			
			if(xmlLocation != null){
				
					this.setProperty("xmlLocation", xmlLocation.toString());
				
			}
			
			if(confDir != null){
				
					this.setProperty("confDir", confDir.toString());
				
			}
			
			if(inzicht_pw != null){
				
					this.setProperty("inzicht_pw", inzicht_pw.toString());
				
			}
			
			if(inzichtDataOwnerPassword != null){
				
					this.setProperty("inzichtDataOwnerPassword", inzichtDataOwnerPassword.toString());
				
			}
			
			if(inzichtDataSchemaName != null){
				
					this.setProperty("inzichtDataSchemaName", inzichtDataSchemaName.toString());
				
			}
			
			if(inzichtDataOwner != null){
				
					this.setProperty("inzichtDataOwner", inzichtDataOwner.toString());
				
			}
			
		}

public String xmlType;
public String getXmlType(){
	return this.xmlType;
}
public String xmlLocation;
public String getXmlLocation(){
	return this.xmlLocation;
}
public String confDir;
public String getConfDir(){
	return this.confDir;
}
public java.lang.String inzicht_pw;
public java.lang.String getInzicht_pw(){
	return this.inzicht_pw;
}
public String inzichtDataOwnerPassword;
public String getInzichtDataOwnerPassword(){
	return this.inzichtDataOwnerPassword;
}
public String inzichtDataSchemaName;
public String getInzichtDataSchemaName(){
	return this.inzichtDataSchemaName;
}
public String inzichtDataOwner;
public String getInzichtDataOwner(){
	return this.inzichtDataOwner;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "initial_import";
	private final String projectName = "BRK";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				initial_import.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(initial_import.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresPlusConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresPlusCommit_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresPlusClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresPlusConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresPlusCommit_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresPlusClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("xmlType", context.xmlType);
                    paraList_tRunJob_1.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_1.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("confDir", context.confDir);
                    paraList_tRunJob_1.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_1.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_1.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_1.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_1.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		brk.contextreader_2_0.ContextReader childJob_tRunJob_1 = new brk.contextreader_2_0.ContextReader();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
					java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


context.xmlLocation = Settings.get("BRK_PATH") + "TempBRK/init_zn.xml";
context.xmlType = Settings.get("BRK_XML_TYPE");
//context.confDir = "../../../conf/";
context.confDir = "D:/Makelaarsuite/mks01-nodejs/CirCooNodejs/ldf/conf/";

//context.inzichtDataSchemaName = Settings.get("SCHEMA_NAME_LOOKUP", "inzicht"); // later on it will be this, but see next input component for the reason why it isn't this yet.
//context.inzichtDataOwner = ... // See above, and beside that, this is not in the settings yet. 
context.inzichtDataOwnerPassword = context.inzicht_pw; // See above, and beside that, this is not in the settings yet.

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "";
            String url_tDBConnection_1 = "jdbc:postgresql://"+Settings.get("CONNECTION_DEFINITION_ADMIN", "host")+":"+Settings.get("CONNECTION_DEFINITION_ADMIN", "port")+"/"+Settings.get("CONNECTION_DEFINITION_ADMIN", "database");

            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
		String dbUser_tDBConnection_1 = Settings.get("CONNECTION_DEFINITION_ADMIN","user");
		
		
			
	final String decryptedPassword_tDBConnection_1 = Settings.get("CONNECTION_DEFINITION_ADMIN","password"); 
			String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
		
	java.sql.Connection conn_tDBConnection_1 = null;
	
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
		
				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

	globalMap.put("conn_" + "tDBConnection_1",conn_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk47", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BRK_initial_import = new byte[0];
    static byte[] commonByteArray_BRK_initial_import = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_initial_import.length) {
				if(length < 1024 && commonByteArray_BRK_initial_import.length == 0) {
   					commonByteArray_BRK_initial_import = new byte[1024];
				} else {
   					commonByteArray_BRK_initial_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_initial_import, 0, length);
			strReturn = new String(commonByteArray_BRK_initial_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_initial_import) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
		        conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "-- On the moment of writing this the inzicht_data schema is hardcoded inzicht_data (even for mks01 instances among othe"
+"rs). \n--This will be changed in the future. So first check if inzicht01_data (from settings) schema exists, if not, tak"
+"e inzicht_data. \n-- Then we are future proof. Even so for the owner.\nselect 'inzichtDataSchemaName' as context_naam, c"
+"ase when count(*) = 0 then 'inzicht_data' else '"+Settings.get("SCHEMA_NAME_LOOKUP","inzicht")+"_data' end as value\nfrom information_schema.schemata\nwhere schema_name = '"+Settings.get("SCHEMA_NAME_LOOKUP","inzicht")+"_data' \nUNION ALL\nselect 'inzichtDataOwner' as context_naam, case when count(*) = 0 then 'inzicht_data_owner' else '"+Settings.get("SCHEMA_NAME_LOOKUP","inzicht")+"_data_owner' end as value\nfrom pg_catalog.pg_user\nwhere usename = '"+Settings.get("SCHEMA_NAME_LOOKUP","inzicht")+"_data_owner' \n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.key = null;
							} else {
	                         		
        	row1.key = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.value = null;
							} else {
	                         		
        	row1.value = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//row1
			//row1


			
				
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				}
				
				
				
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row1.key != null){
                          tmp_key_tContextLoad_1 = row1.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row1.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row1.key != null) {
                    key_tContextLoad_1 =
                        row1.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row1.value != null) {
                    value_tContextLoad_1 =
                        row1.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ((key_tContextLoad_1 != null) && ("inzicht_pw".equals(key_tContextLoad_1)) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "xmlType".equals(key_tContextLoad_1))
        {
           context.xmlType=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "xmlLocation".equals(key_tContextLoad_1))
        {
           context.xmlLocation=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "confDir".equals(key_tContextLoad_1))
        {
           context.confDir=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inzicht_pw".equals(key_tContextLoad_1))
        {
           context.inzicht_pw=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inzichtDataOwnerPassword".equals(key_tContextLoad_1))
        {
           context.inzichtDataOwnerPassword=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inzichtDataSchemaName".equals(key_tContextLoad_1))
        {
           context.inzichtDataSchemaName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inzichtDataOwner".equals(key_tContextLoad_1))
        {
           context.inzichtDataOwner=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("inzicht_pw");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk48", 0, "ok");
								} 
							
							tRunJob_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_18", false);
		start_Hash.put("tRunJob_18", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_18";

	
		int tos_count_tRunJob_18 = 0;
		


 



/**
 * [tRunJob_18 begin ] stop
 */
	
	/**
	 * [tRunJob_18 main ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	
	java.util.List<String> paraList_tRunJob_18 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_18.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_18.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_18.add("--father_node=tRunJob_18");
	      			
	        			paraList_tRunJob_18.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_18.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_18.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_18.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_18 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_18 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_18".equals(tRunJobName_tRunJob_18) && childResumePath_tRunJob_18 != null){
		paraList_tRunJob_18.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_18.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_18");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_18 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_18 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_18.put("xmlType", context.xmlType);
                    paraList_tRunJob_18.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_18.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_18.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_18.put("confDir", context.confDir);
                    paraList_tRunJob_18.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_18.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_18.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_18.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_18.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_18.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_18.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_18.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_18.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_18().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_18 = context.propertyNames();
		while (propertyNames_tRunJob_18.hasMoreElements()) {
			String key_tRunJob_18 = (String) propertyNames_tRunJob_18.nextElement();
			Object value_tRunJob_18 = (Object) context.get(key_tRunJob_18);
			if(value_tRunJob_18!=null) {  
				paraList_tRunJob_18.add("--context_param " + key_tRunJob_18 + "=" + value_tRunJob_18);
			} else {
				paraList_tRunJob_18.add("--context_param " + key_tRunJob_18 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_18 = null;

	
	
		brk.extractinitialfile_0_1.extractInitialFile childJob_tRunJob_18 = new brk.extractinitialfile_0_1.extractInitialFile();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_18 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_18) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_18 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_18 : talendDataSources_tRunJob_18
			        .entrySet()) {
	            dataSources_tRunJob_18.put(talendDataSourceEntry_tRunJob_18.getKey(),
	                    talendDataSourceEntry_tRunJob_18.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_18.setDataSources(dataSources_tRunJob_18);
	    }
		  
			childJob_tRunJob_18.parentContextMap = parentContextMap_tRunJob_18;
		  
		
		String[][] childReturn_tRunJob_18 = childJob_tRunJob_18.runJob((String[]) paraList_tRunJob_18.toArray(new String[paraList_tRunJob_18.size()]));
		
	  	
				errorCode = childJob_tRunJob_18.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_18.getErrorCode() == null){
				globalMap.put("tRunJob_18_CHILD_RETURN_CODE", childJob_tRunJob_18.getStatus() != null && ("failure").equals(childJob_tRunJob_18.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_18_CHILD_RETURN_CODE", childJob_tRunJob_18.getErrorCode());
		    }
		    if (childJob_tRunJob_18.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_18_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_18.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_18++;

/**
 * [tRunJob_18 main ] stop
 */
	
	/**
	 * [tRunJob_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	

 



/**
 * [tRunJob_18 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	

 



/**
 * [tRunJob_18 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_18 end ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	

 

ok_Hash.put("tRunJob_18", true);
end_Hash.put("tRunJob_18", System.currentTimeMillis());




/**
 * [tRunJob_18 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_18:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk29", 0, "ok");
								} 
							
							tRunJob_27Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_18 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	

 



/**
 * [tRunJob_18 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_18_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_27", false);
		start_Hash.put("tRunJob_27", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_27";

	
		int tos_count_tRunJob_27 = 0;
		


 



/**
 * [tRunJob_27 begin ] stop
 */
	
	/**
	 * [tRunJob_27 main ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	
	java.util.List<String> paraList_tRunJob_27 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_27.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_27.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_27.add("--father_node=tRunJob_27");
	      			
	        			paraList_tRunJob_27.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_27.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_27.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_27.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_27 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_27 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_27".equals(tRunJobName_tRunJob_27) && childResumePath_tRunJob_27 != null){
		paraList_tRunJob_27.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_27.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_27");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_27 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_27 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_27.put("xmlType", context.xmlType);
                    paraList_tRunJob_27.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_27.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_27.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_27.put("confDir", context.confDir);
                    paraList_tRunJob_27.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_27.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_27.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_27.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_27.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_27.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_27.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_27.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_27.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_27().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_27 = context.propertyNames();
		while (propertyNames_tRunJob_27.hasMoreElements()) {
			String key_tRunJob_27 = (String) propertyNames_tRunJob_27.nextElement();
			Object value_tRunJob_27 = (Object) context.get(key_tRunJob_27);
			if(value_tRunJob_27!=null) {  
				paraList_tRunJob_27.add("--context_param " + key_tRunJob_27 + "=" + value_tRunJob_27);
			} else {
				paraList_tRunJob_27.add("--context_param " + key_tRunJob_27 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_27 = null;

	
	
		brk.createlogtables_0_1.CreateLogTables childJob_tRunJob_27 = new brk.createlogtables_0_1.CreateLogTables();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_27 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_27) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_27 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_27 : talendDataSources_tRunJob_27
			        .entrySet()) {
	            dataSources_tRunJob_27.put(talendDataSourceEntry_tRunJob_27.getKey(),
	                    talendDataSourceEntry_tRunJob_27.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_27.setDataSources(dataSources_tRunJob_27);
	    }
		  
			childJob_tRunJob_27.parentContextMap = parentContextMap_tRunJob_27;
		  
		
		String[][] childReturn_tRunJob_27 = childJob_tRunJob_27.runJob((String[]) paraList_tRunJob_27.toArray(new String[paraList_tRunJob_27.size()]));
		
	  	
				errorCode = childJob_tRunJob_27.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_27.getErrorCode() == null){
				globalMap.put("tRunJob_27_CHILD_RETURN_CODE", childJob_tRunJob_27.getStatus() != null && ("failure").equals(childJob_tRunJob_27.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_27_CHILD_RETURN_CODE", childJob_tRunJob_27.getErrorCode());
		    }
		    if (childJob_tRunJob_27.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_27_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_27.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_27.getErrorCode() != null || ("failure").equals(childJob_tRunJob_27.getStatus())) {
					java.lang.Exception ce_tRunJob_27 = childJob_tRunJob_27.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_27!=null) ? (ce_tRunJob_27.getClass().getName() + ": " + ce_tRunJob_27.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_27++;

/**
 * [tRunJob_27 main ] stop
 */
	
	/**
	 * [tRunJob_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	

 



/**
 * [tRunJob_27 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	

 



/**
 * [tRunJob_27 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_27 end ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	

 

ok_Hash.put("tRunJob_27", true);
end_Hash.put("tRunJob_27", System.currentTimeMillis());




/**
 * [tRunJob_27 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_27:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk30", 0, "ok");
								} 
							
							tRunJob_26Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_27 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	

 



/**
 * [tRunJob_27 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_27_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_26", false);
		start_Hash.put("tRunJob_26", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_26";

	
		int tos_count_tRunJob_26 = 0;
		


 



/**
 * [tRunJob_26 begin ] stop
 */
	
	/**
	 * [tRunJob_26 main ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	
	java.util.List<String> paraList_tRunJob_26 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_26.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_26.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_26.add("--father_node=tRunJob_26");
	      			
	        			paraList_tRunJob_26.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_26.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_26.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_26.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_26 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_26 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_26".equals(tRunJobName_tRunJob_26) && childResumePath_tRunJob_26 != null){
		paraList_tRunJob_26.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_26.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_26");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_26 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_26 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_26.put("xmlType", context.xmlType);
                    paraList_tRunJob_26.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_26.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_26.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_26.put("confDir", context.confDir);
                    paraList_tRunJob_26.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_26.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_26.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_26.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_26.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_26.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_26.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_26.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_26.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_26().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_26 = context.propertyNames();
		while (propertyNames_tRunJob_26.hasMoreElements()) {
			String key_tRunJob_26 = (String) propertyNames_tRunJob_26.nextElement();
			Object value_tRunJob_26 = (Object) context.get(key_tRunJob_26);
			if(value_tRunJob_26!=null) {  
				paraList_tRunJob_26.add("--context_param " + key_tRunJob_26 + "=" + value_tRunJob_26);
			} else {
				paraList_tRunJob_26.add("--context_param " + key_tRunJob_26 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_26 = null;

	
	
		brk.logmutationjob_0_1.LogMutationJob childJob_tRunJob_26 = new brk.logmutationjob_0_1.LogMutationJob();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_26 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_26) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_26 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_26 : talendDataSources_tRunJob_26
			        .entrySet()) {
	            dataSources_tRunJob_26.put(talendDataSourceEntry_tRunJob_26.getKey(),
	                    talendDataSourceEntry_tRunJob_26.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_26.setDataSources(dataSources_tRunJob_26);
	    }
		  
			childJob_tRunJob_26.parentContextMap = parentContextMap_tRunJob_26;
		  
		
		String[][] childReturn_tRunJob_26 = childJob_tRunJob_26.runJob((String[]) paraList_tRunJob_26.toArray(new String[paraList_tRunJob_26.size()]));
		
	  	
				errorCode = childJob_tRunJob_26.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_26.getErrorCode() == null){
				globalMap.put("tRunJob_26_CHILD_RETURN_CODE", childJob_tRunJob_26.getStatus() != null && ("failure").equals(childJob_tRunJob_26.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_26_CHILD_RETURN_CODE", childJob_tRunJob_26.getErrorCode());
		    }
		    if (childJob_tRunJob_26.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_26_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_26.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_26++;

/**
 * [tRunJob_26 main ] stop
 */
	
	/**
	 * [tRunJob_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	

 



/**
 * [tRunJob_26 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	

 



/**
 * [tRunJob_26 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_26 end ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	

 

ok_Hash.put("tRunJob_26", true);
end_Hash.put("tRunJob_26", System.currentTimeMillis());




/**
 * [tRunJob_26 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_26:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk41", 0, "ok");
								} 
							
							tRunJob_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_26 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	

 



/**
 * [tRunJob_26 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_26_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_17", false);
		start_Hash.put("tRunJob_17", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_17";

	
		int tos_count_tRunJob_17 = 0;
		


 



/**
 * [tRunJob_17 begin ] stop
 */
	
	/**
	 * [tRunJob_17 main ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	
	java.util.List<String> paraList_tRunJob_17 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_17.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_17.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_17.add("--father_node=tRunJob_17");
	      			
	        			paraList_tRunJob_17.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_17.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_17.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_17.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_17 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_17 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_17".equals(tRunJobName_tRunJob_17) && childResumePath_tRunJob_17 != null){
		paraList_tRunJob_17.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_17.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_17");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_17 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_17 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_17.put("xmlType", context.xmlType);
                    paraList_tRunJob_17.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_17.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_17.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_17.put("confDir", context.confDir);
                    paraList_tRunJob_17.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_17.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_17.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_17.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_17.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_17.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_17.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_17.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_17.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_17().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_17 = context.propertyNames();
		while (propertyNames_tRunJob_17.hasMoreElements()) {
			String key_tRunJob_17 = (String) propertyNames_tRunJob_17.nextElement();
			Object value_tRunJob_17 = (Object) context.get(key_tRunJob_17);
			if(value_tRunJob_17!=null) {  
				paraList_tRunJob_17.add("--context_param " + key_tRunJob_17 + "=" + value_tRunJob_17);
			} else {
				paraList_tRunJob_17.add("--context_param " + key_tRunJob_17 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_17 = null;

	
	
		brk.toevoegen_ldf_overzichten_brk_2_0.Toevoegen_ldf_overzichten_brk childJob_tRunJob_17 = new brk.toevoegen_ldf_overzichten_brk_2_0.Toevoegen_ldf_overzichten_brk();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_17 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_17) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_17 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_17 : talendDataSources_tRunJob_17
			        .entrySet()) {
	            dataSources_tRunJob_17.put(talendDataSourceEntry_tRunJob_17.getKey(),
	                    talendDataSourceEntry_tRunJob_17.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_17.setDataSources(dataSources_tRunJob_17);
	    }
		  
			childJob_tRunJob_17.parentContextMap = parentContextMap_tRunJob_17;
		  
		
		String[][] childReturn_tRunJob_17 = childJob_tRunJob_17.runJob((String[]) paraList_tRunJob_17.toArray(new String[paraList_tRunJob_17.size()]));
		
	  	
				errorCode = childJob_tRunJob_17.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_17.getErrorCode() == null){
				globalMap.put("tRunJob_17_CHILD_RETURN_CODE", childJob_tRunJob_17.getStatus() != null && ("failure").equals(childJob_tRunJob_17.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_17_CHILD_RETURN_CODE", childJob_tRunJob_17.getErrorCode());
		    }
		    if (childJob_tRunJob_17.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_17_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_17.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_17++;

/**
 * [tRunJob_17 main ] stop
 */
	
	/**
	 * [tRunJob_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 



/**
 * [tRunJob_17 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 



/**
 * [tRunJob_17 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_17 end ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 

ok_Hash.put("tRunJob_17", true);
end_Hash.put("tRunJob_17", System.currentTimeMillis());




/**
 * [tRunJob_17 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk32", 0, "ok");
								} 
							
							tPostgresPlusConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_17 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 



/**
 * [tRunJob_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_17_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresPlusConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresPlusConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusConnection_1", false);
		start_Hash.put("tPostgresPlusConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusConnection_1";

	
		int tos_count_tPostgresPlusConnection_1 = 0;
		


	
            String dbProperties_tPostgresPlusConnection_1 = "";
            String url_tPostgresPlusConnection_1 = "jdbc:postgresql://"+Settings.get("CONNECTION_DEFINITION", "host")+":"+Settings.get("CONNECTION_DEFINITION", "port")+"/"+Settings.get("CONNECTION_DEFINITION", "database");

            if(dbProperties_tPostgresPlusConnection_1 != null && !"".equals(dbProperties_tPostgresPlusConnection_1.trim())) {
                url_tPostgresPlusConnection_1 = url_tPostgresPlusConnection_1 + "?" + dbProperties_tPostgresPlusConnection_1;
            }
		String dbUser_tPostgresPlusConnection_1 = Settings.get("CONNECTION_DEFINITION", "user");
		
		
			
	final String decryptedPassword_tPostgresPlusConnection_1 = Settings.get("CONNECTION_DEFINITION", "password"); 
			String dbPwd_tPostgresPlusConnection_1 = decryptedPassword_tPostgresPlusConnection_1;
		
	java.sql.Connection conn_tPostgresPlusConnection_1 = null;
	
	
			String sharedConnectionName_tPostgresPlusConnection_1 = "postgres";
			conn_tPostgresPlusConnection_1 = SharedDBConnection.getDBConnection("org.postgresql.Driver",url_tPostgresPlusConnection_1,dbUser_tPostgresPlusConnection_1 , dbPwd_tPostgresPlusConnection_1 , sharedConnectionName_tPostgresPlusConnection_1);
	if (null != conn_tPostgresPlusConnection_1) {
		
			conn_tPostgresPlusConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresPlusConnection_1",Settings.get("SCHEMA_NAME_LOOKUP", "ldf"));

	globalMap.put("conn_" + "tPostgresPlusConnection_1",conn_tPostgresPlusConnection_1);

 



/**
 * [tPostgresPlusConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 


	tos_count_tPostgresPlusConnection_1++;

/**
 * [tPostgresPlusConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 

ok_Hash.put("tPostgresPlusConnection_1", true);
end_Hash.put("tPostgresPlusConnection_1", System.currentTimeMillis());




/**
 * [tPostgresPlusConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresPlusConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk40", 0, "ok");
								} 
							
							tRunJob_24Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresPlusConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_24", false);
		start_Hash.put("tRunJob_24", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_24";

	
		int tos_count_tRunJob_24 = 0;
		


 



/**
 * [tRunJob_24 begin ] stop
 */
	
	/**
	 * [tRunJob_24 main ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	
	java.util.List<String> paraList_tRunJob_24 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_24.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_24.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_24.add("--father_node=tRunJob_24");
	      			
	        			paraList_tRunJob_24.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_24.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_24.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_24.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_24 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_24 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_24".equals(tRunJobName_tRunJob_24) && childResumePath_tRunJob_24 != null){
		paraList_tRunJob_24.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_24.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_24");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_24 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_24 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_24.put("xmlType", context.xmlType);
                    paraList_tRunJob_24.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_24.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_24.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_24.put("confDir", context.confDir);
                    paraList_tRunJob_24.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_24.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_24.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_24.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_24.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_24.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_24.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_24.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_24.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_24().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_24 = context.propertyNames();
		while (propertyNames_tRunJob_24.hasMoreElements()) {
			String key_tRunJob_24 = (String) propertyNames_tRunJob_24.nextElement();
			Object value_tRunJob_24 = (Object) context.get(key_tRunJob_24);
			if(value_tRunJob_24!=null) {  
				paraList_tRunJob_24.add("--context_param " + key_tRunJob_24 + "=" + value_tRunJob_24);
			} else {
				paraList_tRunJob_24.add("--context_param " + key_tRunJob_24 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_24 = null;

	
	
		brk.cleanup_brk_tables_0_1.cleanup_brk_tables childJob_tRunJob_24 = new brk.cleanup_brk_tables_0_1.cleanup_brk_tables();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_24 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_24) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_24 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_24 : talendDataSources_tRunJob_24
			        .entrySet()) {
	            dataSources_tRunJob_24.put(talendDataSourceEntry_tRunJob_24.getKey(),
	                    talendDataSourceEntry_tRunJob_24.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_24.setDataSources(dataSources_tRunJob_24);
	    }
		  
			childJob_tRunJob_24.parentContextMap = parentContextMap_tRunJob_24;
		  
		
		String[][] childReturn_tRunJob_24 = childJob_tRunJob_24.runJob((String[]) paraList_tRunJob_24.toArray(new String[paraList_tRunJob_24.size()]));
		
	  	
				errorCode = childJob_tRunJob_24.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_24.getErrorCode() == null){
				globalMap.put("tRunJob_24_CHILD_RETURN_CODE", childJob_tRunJob_24.getStatus() != null && ("failure").equals(childJob_tRunJob_24.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_24_CHILD_RETURN_CODE", childJob_tRunJob_24.getErrorCode());
		    }
		    if (childJob_tRunJob_24.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_24_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_24.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_24++;

/**
 * [tRunJob_24 main ] stop
 */
	
	/**
	 * [tRunJob_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	

 



/**
 * [tRunJob_24 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	

 



/**
 * [tRunJob_24 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_24 end ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	

 

ok_Hash.put("tRunJob_24", true);
end_Hash.put("tRunJob_24", System.currentTimeMillis());




/**
 * [tRunJob_24 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_24:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk44", 0, "ok");
								} 
							
							tRunJob_29Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_24 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	

 



/**
 * [tRunJob_24 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_24_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_29", false);
		start_Hash.put("tRunJob_29", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_29";

	
		int tos_count_tRunJob_29 = 0;
		


 



/**
 * [tRunJob_29 begin ] stop
 */
	
	/**
	 * [tRunJob_29 main ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	
	java.util.List<String> paraList_tRunJob_29 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_29.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_29.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_29.add("--father_node=tRunJob_29");
	      			
	        			paraList_tRunJob_29.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_29.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_29.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_29.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_29 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_29 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_29".equals(tRunJobName_tRunJob_29) && childResumePath_tRunJob_29 != null){
		paraList_tRunJob_29.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_29.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_29");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_29 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_29 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_29.put("xmlType", context.xmlType);
                    paraList_tRunJob_29.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_29.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_29.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_29.put("confDir", context.confDir);
                    paraList_tRunJob_29.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_29.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_29.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_29.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_29.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_29.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_29.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_29.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_29.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_29().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_29 = context.propertyNames();
		while (propertyNames_tRunJob_29.hasMoreElements()) {
			String key_tRunJob_29 = (String) propertyNames_tRunJob_29.nextElement();
			Object value_tRunJob_29 = (Object) context.get(key_tRunJob_29);
			if(value_tRunJob_29!=null) {  
				paraList_tRunJob_29.add("--context_param " + key_tRunJob_29 + "=" + value_tRunJob_29);
			} else {
				paraList_tRunJob_29.add("--context_param " + key_tRunJob_29 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_29 = null;

	
	
		brk.create_history_tables_0_1.create_history_tables childJob_tRunJob_29 = new brk.create_history_tables_0_1.create_history_tables();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_29 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_29) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_29 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_29 : talendDataSources_tRunJob_29
			        .entrySet()) {
	            dataSources_tRunJob_29.put(talendDataSourceEntry_tRunJob_29.getKey(),
	                    talendDataSourceEntry_tRunJob_29.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_29.setDataSources(dataSources_tRunJob_29);
	    }
		  
			childJob_tRunJob_29.parentContextMap = parentContextMap_tRunJob_29;
		  
		
		String[][] childReturn_tRunJob_29 = childJob_tRunJob_29.runJob((String[]) paraList_tRunJob_29.toArray(new String[paraList_tRunJob_29.size()]));
		
	  	
				errorCode = childJob_tRunJob_29.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_29.getErrorCode() == null){
				globalMap.put("tRunJob_29_CHILD_RETURN_CODE", childJob_tRunJob_29.getStatus() != null && ("failure").equals(childJob_tRunJob_29.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_29_CHILD_RETURN_CODE", childJob_tRunJob_29.getErrorCode());
		    }
		    if (childJob_tRunJob_29.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_29_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_29.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_29++;

/**
 * [tRunJob_29 main ] stop
 */
	
	/**
	 * [tRunJob_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	

 



/**
 * [tRunJob_29 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	

 



/**
 * [tRunJob_29 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_29 end ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	

 

ok_Hash.put("tRunJob_29", true);
end_Hash.put("tRunJob_29", System.currentTimeMillis());




/**
 * [tRunJob_29 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_29:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk34", 0, "ok");
								} 
							
							tRunJob_25Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_29 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	

 



/**
 * [tRunJob_29 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_29_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_25", false);
		start_Hash.put("tRunJob_25", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_25";

	
		int tos_count_tRunJob_25 = 0;
		


 



/**
 * [tRunJob_25 begin ] stop
 */
	
	/**
	 * [tRunJob_25 main ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	
	java.util.List<String> paraList_tRunJob_25 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_25.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_25.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_25.add("--father_node=tRunJob_25");
	      			
	        			paraList_tRunJob_25.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_25.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_25.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_25.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_25 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_25 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_25".equals(tRunJobName_tRunJob_25) && childResumePath_tRunJob_25 != null){
		paraList_tRunJob_25.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_25.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_25");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_25 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_25 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_25.put("xmlType", context.xmlType);
                    paraList_tRunJob_25.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_25.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_25.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_25.put("confDir", context.confDir);
                    paraList_tRunJob_25.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_25.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_25.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_25.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_25.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_25.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_25.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_25.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_25.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_25().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_25 = context.propertyNames();
		while (propertyNames_tRunJob_25.hasMoreElements()) {
			String key_tRunJob_25 = (String) propertyNames_tRunJob_25.nextElement();
			Object value_tRunJob_25 = (Object) context.get(key_tRunJob_25);
			if(value_tRunJob_25!=null) {  
				paraList_tRunJob_25.add("--context_param " + key_tRunJob_25 + "=" + value_tRunJob_25);
			} else {
				paraList_tRunJob_25.add("--context_param " + key_tRunJob_25 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_25 = null;

	
	
		brk.create_fill_metadata_table_0_1.create_fill_metadata_table childJob_tRunJob_25 = new brk.create_fill_metadata_table_0_1.create_fill_metadata_table();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_25 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_25) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_25 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_25 : talendDataSources_tRunJob_25
			        .entrySet()) {
	            dataSources_tRunJob_25.put(talendDataSourceEntry_tRunJob_25.getKey(),
	                    talendDataSourceEntry_tRunJob_25.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_25.setDataSources(dataSources_tRunJob_25);
	    }
		  
			childJob_tRunJob_25.parentContextMap = parentContextMap_tRunJob_25;
		  
		
		String[][] childReturn_tRunJob_25 = childJob_tRunJob_25.runJob((String[]) paraList_tRunJob_25.toArray(new String[paraList_tRunJob_25.size()]));
		
	  	
				errorCode = childJob_tRunJob_25.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_25.getErrorCode() == null){
				globalMap.put("tRunJob_25_CHILD_RETURN_CODE", childJob_tRunJob_25.getStatus() != null && ("failure").equals(childJob_tRunJob_25.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_25_CHILD_RETURN_CODE", childJob_tRunJob_25.getErrorCode());
		    }
		    if (childJob_tRunJob_25.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_25_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_25.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_25.getErrorCode() != null || ("failure").equals(childJob_tRunJob_25.getStatus())) {
					java.lang.Exception ce_tRunJob_25 = childJob_tRunJob_25.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_25!=null) ? (ce_tRunJob_25.getClass().getName() + ": " + ce_tRunJob_25.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_25++;

/**
 * [tRunJob_25 main ] stop
 */
	
	/**
	 * [tRunJob_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	

 



/**
 * [tRunJob_25 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	

 



/**
 * [tRunJob_25 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_25 end ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	

 

ok_Hash.put("tRunJob_25", true);
end_Hash.put("tRunJob_25", System.currentTimeMillis());




/**
 * [tRunJob_25 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_25:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk49", 0, "ok");
								} 
							
							tRunJob_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_25 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	

 



/**
 * [tRunJob_25 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_25_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_2 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_2.put("xmlType", context.xmlType);
                    paraList_tRunJob_2.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_2.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("confDir", context.confDir);
                    paraList_tRunJob_2.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_2.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_2.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_2.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_2.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_2.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_2().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_2 = context.propertyNames();
		while (propertyNames_tRunJob_2.hasMoreElements()) {
			String key_tRunJob_2 = (String) propertyNames_tRunJob_2.nextElement();
			Object value_tRunJob_2 = (Object) context.get(key_tRunJob_2);
			if(value_tRunJob_2!=null) {  
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
			} else {
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_2 = null;

	
	
		brk.brk_aantekening_init_0_1.brk_aantekening_init childJob_tRunJob_2 = new brk.brk_aantekening_init_0_1.brk_aantekening_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tRunJob_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_5", false);
		start_Hash.put("tRunJob_5", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_5";

	
		int tos_count_tRunJob_5 = 0;
		


 



/**
 * [tRunJob_5 begin ] stop
 */
	
	/**
	 * [tRunJob_5 main ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	
	java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_5.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_5.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_5.add("--father_node=tRunJob_5");
	      			
	        			paraList_tRunJob_5.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_5.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_5.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null){
		paraList_tRunJob_5.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_5 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_5.put("xmlType", context.xmlType);
                    paraList_tRunJob_5.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_5.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_5.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_5.put("confDir", context.confDir);
                    paraList_tRunJob_5.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_5.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_5.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_5.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_5.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_5.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_5.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_5.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_5.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_5().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_5 = context.propertyNames();
		while (propertyNames_tRunJob_5.hasMoreElements()) {
			String key_tRunJob_5 = (String) propertyNames_tRunJob_5.nextElement();
			Object value_tRunJob_5 = (Object) context.get(key_tRunJob_5);
			if(value_tRunJob_5!=null) {  
				paraList_tRunJob_5.add("--context_param " + key_tRunJob_5 + "=" + value_tRunJob_5);
			} else {
				paraList_tRunJob_5.add("--context_param " + key_tRunJob_5 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_5 = null;

	
	
		brk.brk_appartementsrecht_init_0_1.brk_appartementsrecht_init childJob_tRunJob_5 = new brk.brk_appartementsrecht_init_0_1.brk_appartementsrecht_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_5) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
			        .entrySet()) {
	            dataSources_tRunJob_5.put(talendDataSourceEntry_tRunJob_5.getKey(),
	                    talendDataSourceEntry_tRunJob_5.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
	    }
		  
			childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;
		  
		
		String[][] childReturn_tRunJob_5 = childJob_tRunJob_5.runJob((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));
		
	  	
				errorCode = childJob_tRunJob_5.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_5.getErrorCode() == null){
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getStatus() != null && ("failure").equals(childJob_tRunJob_5.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getErrorCode());
		    }
		    if (childJob_tRunJob_5.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_5.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_5++;

/**
 * [tRunJob_5 main ] stop
 */
	
	/**
	 * [tRunJob_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_5 end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 

ok_Hash.put("tRunJob_5", true);
end_Hash.put("tRunJob_5", System.currentTimeMillis());




/**
 * [tRunJob_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tRunJob_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_5 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_6", false);
		start_Hash.put("tRunJob_6", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_6";

	
		int tos_count_tRunJob_6 = 0;
		


 



/**
 * [tRunJob_6 begin ] stop
 */
	
	/**
	 * [tRunJob_6 main ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	
	java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_6.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_6.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_6.add("--father_node=tRunJob_6");
	      			
	        			paraList_tRunJob_6.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_6.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_6.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null){
		paraList_tRunJob_6.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_6 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_6.put("xmlType", context.xmlType);
                    paraList_tRunJob_6.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_6.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_6.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_6.put("confDir", context.confDir);
                    paraList_tRunJob_6.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_6.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_6.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_6.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_6.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_6.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_6.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_6.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_6.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_6().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_6 = context.propertyNames();
		while (propertyNames_tRunJob_6.hasMoreElements()) {
			String key_tRunJob_6 = (String) propertyNames_tRunJob_6.nextElement();
			Object value_tRunJob_6 = (Object) context.get(key_tRunJob_6);
			if(value_tRunJob_6!=null) {  
				paraList_tRunJob_6.add("--context_param " + key_tRunJob_6 + "=" + value_tRunJob_6);
			} else {
				paraList_tRunJob_6.add("--context_param " + key_tRunJob_6 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_6 = null;

	
	
		brk.brk_ingezetene_init_0_1.brk_ingezetene_init childJob_tRunJob_6 = new brk.brk_ingezetene_init_0_1.brk_ingezetene_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_6) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
			        .entrySet()) {
	            dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
	                    talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
	    }
		  
			childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;
		  
		
		String[][] childReturn_tRunJob_6 = childJob_tRunJob_6.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));
		
	  	
				errorCode = childJob_tRunJob_6.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_6.getErrorCode() == null){
				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getStatus() != null && ("failure").equals(childJob_tRunJob_6.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
		    }
		    if (childJob_tRunJob_6.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_6.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_6++;

/**
 * [tRunJob_6 main ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_6 end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 

ok_Hash.put("tRunJob_6", true);
end_Hash.put("tRunJob_6", System.currentTimeMillis());




/**
 * [tRunJob_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tRunJob_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_6 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_7", false);
		start_Hash.put("tRunJob_7", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_7";

	
		int tos_count_tRunJob_7 = 0;
		


 



/**
 * [tRunJob_7 begin ] stop
 */
	
	/**
	 * [tRunJob_7 main ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	
	java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_7.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_7.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_7.add("--father_node=tRunJob_7");
	      			
	        			paraList_tRunJob_7.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_7.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_7.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_7.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_7 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_7 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_7".equals(tRunJobName_tRunJob_7) && childResumePath_tRunJob_7 != null){
		paraList_tRunJob_7.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_7");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_7 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_7.put("xmlType", context.xmlType);
                    paraList_tRunJob_7.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_7.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_7.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_7.put("confDir", context.confDir);
                    paraList_tRunJob_7.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_7.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_7.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_7.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_7.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_7.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_7.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_7.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_7.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_7().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_7 = context.propertyNames();
		while (propertyNames_tRunJob_7.hasMoreElements()) {
			String key_tRunJob_7 = (String) propertyNames_tRunJob_7.nextElement();
			Object value_tRunJob_7 = (Object) context.get(key_tRunJob_7);
			if(value_tRunJob_7!=null) {  
				paraList_tRunJob_7.add("--context_param " + key_tRunJob_7 + "=" + value_tRunJob_7);
			} else {
				paraList_tRunJob_7.add("--context_param " + key_tRunJob_7 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_7 = null;

	
	
		brk.brk_kadasterstuk_init_0_1.brk_kadasterstuk_init childJob_tRunJob_7 = new brk.brk_kadasterstuk_init_0_1.brk_kadasterstuk_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_7) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
			        .entrySet()) {
	            dataSources_tRunJob_7.put(talendDataSourceEntry_tRunJob_7.getKey(),
	                    talendDataSourceEntry_tRunJob_7.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
	    }
		  
			childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;
		  
		
		String[][] childReturn_tRunJob_7 = childJob_tRunJob_7.runJob((String[]) paraList_tRunJob_7.toArray(new String[paraList_tRunJob_7.size()]));
		
	  	
				errorCode = childJob_tRunJob_7.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_7.getErrorCode() == null){
				globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getStatus() != null && ("failure").equals(childJob_tRunJob_7.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getErrorCode());
		    }
		    if (childJob_tRunJob_7.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_7.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_7++;

/**
 * [tRunJob_7 main ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_7 end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 

ok_Hash.put("tRunJob_7", true);
end_Hash.put("tRunJob_7", System.currentTimeMillis());




/**
 * [tRunJob_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tRunJob_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_7 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_8", false);
		start_Hash.put("tRunJob_8", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_8";

	
		int tos_count_tRunJob_8 = 0;
		


 



/**
 * [tRunJob_8 begin ] stop
 */
	
	/**
	 * [tRunJob_8 main ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	
	java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_8.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_8.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_8.add("--father_node=tRunJob_8");
	      			
	        			paraList_tRunJob_8.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_8.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_8.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_8.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_8 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_8 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_8".equals(tRunJobName_tRunJob_8) && childResumePath_tRunJob_8 != null){
		paraList_tRunJob_8.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_8");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_8 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_8.put("xmlType", context.xmlType);
                    paraList_tRunJob_8.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_8.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_8.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_8.put("confDir", context.confDir);
                    paraList_tRunJob_8.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_8.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_8.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_8.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_8.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_8.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_8.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_8.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_8.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_8().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_8 = context.propertyNames();
		while (propertyNames_tRunJob_8.hasMoreElements()) {
			String key_tRunJob_8 = (String) propertyNames_tRunJob_8.nextElement();
			Object value_tRunJob_8 = (Object) context.get(key_tRunJob_8);
			if(value_tRunJob_8!=null) {  
				paraList_tRunJob_8.add("--context_param " + key_tRunJob_8 + "=" + value_tRunJob_8);
			} else {
				paraList_tRunJob_8.add("--context_param " + key_tRunJob_8 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_8 = null;

	
	
		brk.brk_kadnatprs_init_0_1.brk_kadnatprs_init childJob_tRunJob_8 = new brk.brk_kadnatprs_init_0_1.brk_kadnatprs_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_8) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_8 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_8 : talendDataSources_tRunJob_8
			        .entrySet()) {
	            dataSources_tRunJob_8.put(talendDataSourceEntry_tRunJob_8.getKey(),
	                    talendDataSourceEntry_tRunJob_8.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_8.setDataSources(dataSources_tRunJob_8);
	    }
		  
			childJob_tRunJob_8.parentContextMap = parentContextMap_tRunJob_8;
		  
		
		String[][] childReturn_tRunJob_8 = childJob_tRunJob_8.runJob((String[]) paraList_tRunJob_8.toArray(new String[paraList_tRunJob_8.size()]));
		
	  	
				errorCode = childJob_tRunJob_8.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_8.getErrorCode() == null){
				globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getStatus() != null && ("failure").equals(childJob_tRunJob_8.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getErrorCode());
		    }
		    if (childJob_tRunJob_8.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_8.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_8++;

/**
 * [tRunJob_8 main ] stop
 */
	
	/**
	 * [tRunJob_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_8 end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 

ok_Hash.put("tRunJob_8", true);
end_Hash.put("tRunJob_8", System.currentTimeMillis());




/**
 * [tRunJob_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tRunJob_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_8 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_9", false);
		start_Hash.put("tRunJob_9", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_9";

	
		int tos_count_tRunJob_9 = 0;
		


 



/**
 * [tRunJob_9 begin ] stop
 */
	
	/**
	 * [tRunJob_9 main ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	
	java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_9.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_9.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_9.add("--father_node=tRunJob_9");
	      			
	        			paraList_tRunJob_9.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_9.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_9.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_9.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_9 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_9 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_9".equals(tRunJobName_tRunJob_9) && childResumePath_tRunJob_9 != null){
		paraList_tRunJob_9.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_9");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_9 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_9.put("xmlType", context.xmlType);
                    paraList_tRunJob_9.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_9.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_9.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_9.put("confDir", context.confDir);
                    paraList_tRunJob_9.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_9.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_9.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_9.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_9.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_9.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_9.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_9.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_9.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_9().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_9 = context.propertyNames();
		while (propertyNames_tRunJob_9.hasMoreElements()) {
			String key_tRunJob_9 = (String) propertyNames_tRunJob_9.nextElement();
			Object value_tRunJob_9 = (Object) context.get(key_tRunJob_9);
			if(value_tRunJob_9!=null) {  
				paraList_tRunJob_9.add("--context_param " + key_tRunJob_9 + "=" + value_tRunJob_9);
			} else {
				paraList_tRunJob_9.add("--context_param " + key_tRunJob_9 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_9 = null;

	
	
		brk.brk_kadnnp_init_0_1.brk_kadnnp_init childJob_tRunJob_9 = new brk.brk_kadnnp_init_0_1.brk_kadnnp_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_9) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_9 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_9 : talendDataSources_tRunJob_9
			        .entrySet()) {
	            dataSources_tRunJob_9.put(talendDataSourceEntry_tRunJob_9.getKey(),
	                    talendDataSourceEntry_tRunJob_9.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_9.setDataSources(dataSources_tRunJob_9);
	    }
		  
			childJob_tRunJob_9.parentContextMap = parentContextMap_tRunJob_9;
		  
		
		String[][] childReturn_tRunJob_9 = childJob_tRunJob_9.runJob((String[]) paraList_tRunJob_9.toArray(new String[paraList_tRunJob_9.size()]));
		
	  	
				errorCode = childJob_tRunJob_9.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_9.getErrorCode() == null){
				globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getStatus() != null && ("failure").equals(childJob_tRunJob_9.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getErrorCode());
		    }
		    if (childJob_tRunJob_9.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_9.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_9++;

/**
 * [tRunJob_9 main ] stop
 */
	
	/**
	 * [tRunJob_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_9 end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 

ok_Hash.put("tRunJob_9", true);
end_Hash.put("tRunJob_9", System.currentTimeMillis());




/**
 * [tRunJob_9 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tRunJob_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_9 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_10", false);
		start_Hash.put("tRunJob_10", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_10";

	
		int tos_count_tRunJob_10 = 0;
		


 



/**
 * [tRunJob_10 begin ] stop
 */
	
	/**
	 * [tRunJob_10 main ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	
	java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_10.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_10.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_10.add("--father_node=tRunJob_10");
	      			
	        			paraList_tRunJob_10.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_10.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_10.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_10.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_10 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_10 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_10".equals(tRunJobName_tRunJob_10) && childResumePath_tRunJob_10 != null){
		paraList_tRunJob_10.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_10");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_10 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_10.put("xmlType", context.xmlType);
                    paraList_tRunJob_10.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_10.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_10.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_10.put("confDir", context.confDir);
                    paraList_tRunJob_10.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_10.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_10.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_10.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_10.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_10.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_10.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_10.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_10.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_10().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_10 = context.propertyNames();
		while (propertyNames_tRunJob_10.hasMoreElements()) {
			String key_tRunJob_10 = (String) propertyNames_tRunJob_10.nextElement();
			Object value_tRunJob_10 = (Object) context.get(key_tRunJob_10);
			if(value_tRunJob_10!=null) {  
				paraList_tRunJob_10.add("--context_param " + key_tRunJob_10 + "=" + value_tRunJob_10);
			} else {
				paraList_tRunJob_10.add("--context_param " + key_tRunJob_10 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_10 = null;

	
	
		brk.brk_kdoperceel_init_0_1.brk_kdoperceel_init childJob_tRunJob_10 = new brk.brk_kdoperceel_init_0_1.brk_kdoperceel_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_10) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
			        .entrySet()) {
	            dataSources_tRunJob_10.put(talendDataSourceEntry_tRunJob_10.getKey(),
	                    talendDataSourceEntry_tRunJob_10.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_10.setDataSources(dataSources_tRunJob_10);
	    }
		  
			childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;
		  
		
		String[][] childReturn_tRunJob_10 = childJob_tRunJob_10.runJob((String[]) paraList_tRunJob_10.toArray(new String[paraList_tRunJob_10.size()]));
		
	  	
				errorCode = childJob_tRunJob_10.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_10.getErrorCode() == null){
				globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getStatus() != null && ("failure").equals(childJob_tRunJob_10.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getErrorCode());
		    }
		    if (childJob_tRunJob_10.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_10.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_10++;

/**
 * [tRunJob_10 main ] stop
 */
	
	/**
	 * [tRunJob_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_10 end ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 

ok_Hash.put("tRunJob_10", true);
end_Hash.put("tRunJob_10", System.currentTimeMillis());




/**
 * [tRunJob_10 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tRunJob_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_10 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_11", false);
		start_Hash.put("tRunJob_11", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_11";

	
		int tos_count_tRunJob_11 = 0;
		


 



/**
 * [tRunJob_11 begin ] stop
 */
	
	/**
	 * [tRunJob_11 main ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	
	java.util.List<String> paraList_tRunJob_11 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_11.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_11.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_11.add("--father_node=tRunJob_11");
	      			
	        			paraList_tRunJob_11.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_11.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_11.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_11.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_11 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_11 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_11".equals(tRunJobName_tRunJob_11) && childResumePath_tRunJob_11 != null){
		paraList_tRunJob_11.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_11.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_11");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_11 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_11 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_11.put("xmlType", context.xmlType);
                    paraList_tRunJob_11.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_11.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_11.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_11.put("confDir", context.confDir);
                    paraList_tRunJob_11.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_11.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_11.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_11.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_11.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_11.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_11.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_11.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_11.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_11().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_11 = context.propertyNames();
		while (propertyNames_tRunJob_11.hasMoreElements()) {
			String key_tRunJob_11 = (String) propertyNames_tRunJob_11.nextElement();
			Object value_tRunJob_11 = (Object) context.get(key_tRunJob_11);
			if(value_tRunJob_11!=null) {  
				paraList_tRunJob_11.add("--context_param " + key_tRunJob_11 + "=" + value_tRunJob_11);
			} else {
				paraList_tRunJob_11.add("--context_param " + key_tRunJob_11 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_11 = null;

	
	
		brk.brk_nietingezetene_init_0_1.brk_nietingezetene_init childJob_tRunJob_11 = new brk.brk_nietingezetene_init_0_1.brk_nietingezetene_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_11 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_11) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_11 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_11 : talendDataSources_tRunJob_11
			        .entrySet()) {
	            dataSources_tRunJob_11.put(talendDataSourceEntry_tRunJob_11.getKey(),
	                    talendDataSourceEntry_tRunJob_11.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_11.setDataSources(dataSources_tRunJob_11);
	    }
		  
			childJob_tRunJob_11.parentContextMap = parentContextMap_tRunJob_11;
		  
		
		String[][] childReturn_tRunJob_11 = childJob_tRunJob_11.runJob((String[]) paraList_tRunJob_11.toArray(new String[paraList_tRunJob_11.size()]));
		
	  	
				errorCode = childJob_tRunJob_11.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_11.getErrorCode() == null){
				globalMap.put("tRunJob_11_CHILD_RETURN_CODE", childJob_tRunJob_11.getStatus() != null && ("failure").equals(childJob_tRunJob_11.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_11_CHILD_RETURN_CODE", childJob_tRunJob_11.getErrorCode());
		    }
		    if (childJob_tRunJob_11.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_11_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_11.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_11++;

/**
 * [tRunJob_11 main ] stop
 */
	
	/**
	 * [tRunJob_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 



/**
 * [tRunJob_11 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 



/**
 * [tRunJob_11 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_11 end ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 

ok_Hash.put("tRunJob_11", true);
end_Hash.put("tRunJob_11", System.currentTimeMillis());




/**
 * [tRunJob_11 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tRunJob_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_11 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 



/**
 * [tRunJob_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_11_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_12", false);
		start_Hash.put("tRunJob_12", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_12";

	
		int tos_count_tRunJob_12 = 0;
		


 



/**
 * [tRunJob_12 begin ] stop
 */
	
	/**
	 * [tRunJob_12 main ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	
	java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_12.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_12.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_12.add("--father_node=tRunJob_12");
	      			
	        			paraList_tRunJob_12.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_12.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_12.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_12.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_12 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_12 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_12".equals(tRunJobName_tRunJob_12) && childResumePath_tRunJob_12 != null){
		paraList_tRunJob_12.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_12.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_12");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_12 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_12.put("xmlType", context.xmlType);
                    paraList_tRunJob_12.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_12.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_12.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_12.put("confDir", context.confDir);
                    paraList_tRunJob_12.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_12.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_12.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_12.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_12.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_12.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_12.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_12.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_12.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_12().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_12 = context.propertyNames();
		while (propertyNames_tRunJob_12.hasMoreElements()) {
			String key_tRunJob_12 = (String) propertyNames_tRunJob_12.nextElement();
			Object value_tRunJob_12 = (Object) context.get(key_tRunJob_12);
			if(value_tRunJob_12!=null) {  
				paraList_tRunJob_12.add("--context_param " + key_tRunJob_12 + "=" + value_tRunJob_12);
			} else {
				paraList_tRunJob_12.add("--context_param " + key_tRunJob_12 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_12 = null;

	
	
		brk.brk_rechtpersoon_init_0_1.brk_rechtpersoon_init childJob_tRunJob_12 = new brk.brk_rechtpersoon_init_0_1.brk_rechtpersoon_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_12) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_12 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_12 : talendDataSources_tRunJob_12
			        .entrySet()) {
	            dataSources_tRunJob_12.put(talendDataSourceEntry_tRunJob_12.getKey(),
	                    talendDataSourceEntry_tRunJob_12.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_12.setDataSources(dataSources_tRunJob_12);
	    }
		  
			childJob_tRunJob_12.parentContextMap = parentContextMap_tRunJob_12;
		  
		
		String[][] childReturn_tRunJob_12 = childJob_tRunJob_12.runJob((String[]) paraList_tRunJob_12.toArray(new String[paraList_tRunJob_12.size()]));
		
	  	
				errorCode = childJob_tRunJob_12.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_12.getErrorCode() == null){
				globalMap.put("tRunJob_12_CHILD_RETURN_CODE", childJob_tRunJob_12.getStatus() != null && ("failure").equals(childJob_tRunJob_12.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_12_CHILD_RETURN_CODE", childJob_tRunJob_12.getErrorCode());
		    }
		    if (childJob_tRunJob_12.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_12_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_12.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_12++;

/**
 * [tRunJob_12 main ] stop
 */
	
	/**
	 * [tRunJob_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	

 



/**
 * [tRunJob_12 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	

 



/**
 * [tRunJob_12 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_12 end ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	

 

ok_Hash.put("tRunJob_12", true);
end_Hash.put("tRunJob_12", System.currentTimeMillis());




/**
 * [tRunJob_12 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tRunJob_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_12 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	

 



/**
 * [tRunJob_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_13", false);
		start_Hash.put("tRunJob_13", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_13";

	
		int tos_count_tRunJob_13 = 0;
		


 



/**
 * [tRunJob_13 begin ] stop
 */
	
	/**
	 * [tRunJob_13 main ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	
	java.util.List<String> paraList_tRunJob_13 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_13.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_13.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_13.add("--father_node=tRunJob_13");
	      			
	        			paraList_tRunJob_13.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_13.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_13.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_13.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_13 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_13 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_13".equals(tRunJobName_tRunJob_13) && childResumePath_tRunJob_13 != null){
		paraList_tRunJob_13.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_13.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_13");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_13 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_13 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_13.put("xmlType", context.xmlType);
                    paraList_tRunJob_13.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_13.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_13.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_13.put("confDir", context.confDir);
                    paraList_tRunJob_13.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_13.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_13.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_13.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_13.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_13.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_13.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_13.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_13.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_13().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_13 = context.propertyNames();
		while (propertyNames_tRunJob_13.hasMoreElements()) {
			String key_tRunJob_13 = (String) propertyNames_tRunJob_13.nextElement();
			Object value_tRunJob_13 = (Object) context.get(key_tRunJob_13);
			if(value_tRunJob_13!=null) {  
				paraList_tRunJob_13.add("--context_param " + key_tRunJob_13 + "=" + value_tRunJob_13);
			} else {
				paraList_tRunJob_13.add("--context_param " + key_tRunJob_13 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_13 = null;

	
	
		brk.brk_tennaamstelling_init_0_1.brk_tennaamstelling_init childJob_tRunJob_13 = new brk.brk_tennaamstelling_init_0_1.brk_tennaamstelling_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_13 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_13) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_13 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_13 : talendDataSources_tRunJob_13
			        .entrySet()) {
	            dataSources_tRunJob_13.put(talendDataSourceEntry_tRunJob_13.getKey(),
	                    talendDataSourceEntry_tRunJob_13.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_13.setDataSources(dataSources_tRunJob_13);
	    }
		  
			childJob_tRunJob_13.parentContextMap = parentContextMap_tRunJob_13;
		  
		
		String[][] childReturn_tRunJob_13 = childJob_tRunJob_13.runJob((String[]) paraList_tRunJob_13.toArray(new String[paraList_tRunJob_13.size()]));
		
	  	
				errorCode = childJob_tRunJob_13.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_13.getErrorCode() == null){
				globalMap.put("tRunJob_13_CHILD_RETURN_CODE", childJob_tRunJob_13.getStatus() != null && ("failure").equals(childJob_tRunJob_13.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_13_CHILD_RETURN_CODE", childJob_tRunJob_13.getErrorCode());
		    }
		    if (childJob_tRunJob_13.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_13_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_13.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_13++;

/**
 * [tRunJob_13 main ] stop
 */
	
	/**
	 * [tRunJob_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	

 



/**
 * [tRunJob_13 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	

 



/**
 * [tRunJob_13 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_13 end ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	

 

ok_Hash.put("tRunJob_13", true);
end_Hash.put("tRunJob_13", System.currentTimeMillis());




/**
 * [tRunJob_13 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tRunJob_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_13 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	

 



/**
 * [tRunJob_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_13_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_14", false);
		start_Hash.put("tRunJob_14", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_14";

	
		int tos_count_tRunJob_14 = 0;
		


 



/**
 * [tRunJob_14 begin ] stop
 */
	
	/**
	 * [tRunJob_14 main ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	
	java.util.List<String> paraList_tRunJob_14 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_14.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_14.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_14.add("--father_node=tRunJob_14");
	      			
	        			paraList_tRunJob_14.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_14.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_14.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_14.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_14 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_14 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_14".equals(tRunJobName_tRunJob_14) && childResumePath_tRunJob_14 != null){
		paraList_tRunJob_14.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_14.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_14");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_14 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_14 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_14.put("xmlType", context.xmlType);
                    paraList_tRunJob_14.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_14.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_14.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_14.put("confDir", context.confDir);
                    paraList_tRunJob_14.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_14.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_14.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_14.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_14.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_14.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_14.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_14.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_14.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_14().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_14 = context.propertyNames();
		while (propertyNames_tRunJob_14.hasMoreElements()) {
			String key_tRunJob_14 = (String) propertyNames_tRunJob_14.nextElement();
			Object value_tRunJob_14 = (Object) context.get(key_tRunJob_14);
			if(value_tRunJob_14!=null) {  
				paraList_tRunJob_14.add("--context_param " + key_tRunJob_14 + "=" + value_tRunJob_14);
			} else {
				paraList_tRunJob_14.add("--context_param " + key_tRunJob_14 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_14 = null;

	
	
		brk.brk_terinschrijvingaangebodenstuk_init_0_1.brk_terinschrijvingaangebodenstuk_init childJob_tRunJob_14 = new brk.brk_terinschrijvingaangebodenstuk_init_0_1.brk_terinschrijvingaangebodenstuk_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_14 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_14) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_14 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_14 : talendDataSources_tRunJob_14
			        .entrySet()) {
	            dataSources_tRunJob_14.put(talendDataSourceEntry_tRunJob_14.getKey(),
	                    talendDataSourceEntry_tRunJob_14.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_14.setDataSources(dataSources_tRunJob_14);
	    }
		  
			childJob_tRunJob_14.parentContextMap = parentContextMap_tRunJob_14;
		  
		
		String[][] childReturn_tRunJob_14 = childJob_tRunJob_14.runJob((String[]) paraList_tRunJob_14.toArray(new String[paraList_tRunJob_14.size()]));
		
	  	
				errorCode = childJob_tRunJob_14.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_14.getErrorCode() == null){
				globalMap.put("tRunJob_14_CHILD_RETURN_CODE", childJob_tRunJob_14.getStatus() != null && ("failure").equals(childJob_tRunJob_14.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_14_CHILD_RETURN_CODE", childJob_tRunJob_14.getErrorCode());
		    }
		    if (childJob_tRunJob_14.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_14_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_14.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_14++;

/**
 * [tRunJob_14 main ] stop
 */
	
	/**
	 * [tRunJob_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	

 



/**
 * [tRunJob_14 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	

 



/**
 * [tRunJob_14 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_14 end ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	

 

ok_Hash.put("tRunJob_14", true);
end_Hash.put("tRunJob_14", System.currentTimeMillis());




/**
 * [tRunJob_14 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tRunJob_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_14 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	

 



/**
 * [tRunJob_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_14_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_15", false);
		start_Hash.put("tRunJob_15", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_15";

	
		int tos_count_tRunJob_15 = 0;
		


 



/**
 * [tRunJob_15 begin ] stop
 */
	
	/**
	 * [tRunJob_15 main ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	
	java.util.List<String> paraList_tRunJob_15 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_15.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_15.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_15.add("--father_node=tRunJob_15");
	      			
	        			paraList_tRunJob_15.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_15.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_15.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_15.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_15 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_15 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_15".equals(tRunJobName_tRunJob_15) && childResumePath_tRunJob_15 != null){
		paraList_tRunJob_15.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_15.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_15");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_15 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_15 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_15.put("xmlType", context.xmlType);
                    paraList_tRunJob_15.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_15.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_15.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_15.put("confDir", context.confDir);
                    paraList_tRunJob_15.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_15.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_15.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_15.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_15.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_15.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_15.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_15.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_15.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_15().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_15 = context.propertyNames();
		while (propertyNames_tRunJob_15.hasMoreElements()) {
			String key_tRunJob_15 = (String) propertyNames_tRunJob_15.nextElement();
			Object value_tRunJob_15 = (Object) context.get(key_tRunJob_15);
			if(value_tRunJob_15!=null) {  
				paraList_tRunJob_15.add("--context_param " + key_tRunJob_15 + "=" + value_tRunJob_15);
			} else {
				paraList_tRunJob_15.add("--context_param " + key_tRunJob_15 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_15 = null;

	
	
		brk.brk_zakelijkrecht_init_0_1.brk_zakelijkrecht_init childJob_tRunJob_15 = new brk.brk_zakelijkrecht_init_0_1.brk_zakelijkrecht_init();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_15 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_15) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_15 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_15 : talendDataSources_tRunJob_15
			        .entrySet()) {
	            dataSources_tRunJob_15.put(talendDataSourceEntry_tRunJob_15.getKey(),
	                    talendDataSourceEntry_tRunJob_15.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_15.setDataSources(dataSources_tRunJob_15);
	    }
		  
			childJob_tRunJob_15.parentContextMap = parentContextMap_tRunJob_15;
		  
		
		String[][] childReturn_tRunJob_15 = childJob_tRunJob_15.runJob((String[]) paraList_tRunJob_15.toArray(new String[paraList_tRunJob_15.size()]));
		
	  	
				errorCode = childJob_tRunJob_15.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_15.getErrorCode() == null){
				globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getStatus() != null && ("failure").equals(childJob_tRunJob_15.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getErrorCode());
		    }
		    if (childJob_tRunJob_15.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_15_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_15.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_15++;

/**
 * [tRunJob_15 main ] stop
 */
	
	/**
	 * [tRunJob_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	

 



/**
 * [tRunJob_15 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	

 



/**
 * [tRunJob_15 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_15 end ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	

 

ok_Hash.put("tRunJob_15", true);
end_Hash.put("tRunJob_15", System.currentTimeMillis());




/**
 * [tRunJob_15 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk31", 0, "ok");
								} 
							
							tRunJob_31Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_15 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	

 



/**
 * [tRunJob_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_15_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_31", false);
		start_Hash.put("tRunJob_31", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_31";

	
		int tos_count_tRunJob_31 = 0;
		


 



/**
 * [tRunJob_31 begin ] stop
 */
	
	/**
	 * [tRunJob_31 main ] start
	 */

	

	
	
	currentComponent="tRunJob_31";

	
	java.util.List<String> paraList_tRunJob_31 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_31.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_31.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_31.add("--father_node=tRunJob_31");
	      			
	        			paraList_tRunJob_31.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_31.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_31.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_31.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_31 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_31 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_31".equals(tRunJobName_tRunJob_31) && childResumePath_tRunJob_31 != null){
		paraList_tRunJob_31.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_31.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_31");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_31 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_31 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_31.put("xmlType", context.xmlType);
                    paraList_tRunJob_31.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_31.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_31.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_31.put("confDir", context.confDir);
                    paraList_tRunJob_31.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_31.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_31.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_31.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_31.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_31.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_31.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_31.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_31.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_31().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_31 = context.propertyNames();
		while (propertyNames_tRunJob_31.hasMoreElements()) {
			String key_tRunJob_31 = (String) propertyNames_tRunJob_31.nextElement();
			Object value_tRunJob_31 = (Object) context.get(key_tRunJob_31);
			if(value_tRunJob_31!=null) {  
				paraList_tRunJob_31.add("--context_param " + key_tRunJob_31 + "=" + value_tRunJob_31);
			} else {
				paraList_tRunJob_31.add("--context_param " + key_tRunJob_31 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_31 = null;

	
	
		brk.update_metadata_table_0_1.update_metadata_table childJob_tRunJob_31 = new brk.update_metadata_table_0_1.update_metadata_table();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_31 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_31) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_31 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_31 : talendDataSources_tRunJob_31
			        .entrySet()) {
	            dataSources_tRunJob_31.put(talendDataSourceEntry_tRunJob_31.getKey(),
	                    talendDataSourceEntry_tRunJob_31.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_31.setDataSources(dataSources_tRunJob_31);
	    }
		  
			childJob_tRunJob_31.parentContextMap = parentContextMap_tRunJob_31;
		  
		
		String[][] childReturn_tRunJob_31 = childJob_tRunJob_31.runJob((String[]) paraList_tRunJob_31.toArray(new String[paraList_tRunJob_31.size()]));
		
	  	
				errorCode = childJob_tRunJob_31.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_31.getErrorCode() == null){
				globalMap.put("tRunJob_31_CHILD_RETURN_CODE", childJob_tRunJob_31.getStatus() != null && ("failure").equals(childJob_tRunJob_31.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_31_CHILD_RETURN_CODE", childJob_tRunJob_31.getErrorCode());
		    }
		    if (childJob_tRunJob_31.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_31_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_31.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_31.getErrorCode() != null || ("failure").equals(childJob_tRunJob_31.getStatus())) {
					java.lang.Exception ce_tRunJob_31 = childJob_tRunJob_31.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_31!=null) ? (ce_tRunJob_31.getClass().getName() + ": " + ce_tRunJob_31.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_31++;

/**
 * [tRunJob_31 main ] stop
 */
	
	/**
	 * [tRunJob_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_31";

	

 



/**
 * [tRunJob_31 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_31";

	

 



/**
 * [tRunJob_31 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_31 end ] start
	 */

	

	
	
	currentComponent="tRunJob_31";

	

 

ok_Hash.put("tRunJob_31", true);
end_Hash.put("tRunJob_31", System.currentTimeMillis());




/**
 * [tRunJob_31 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_31:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk50", 0, "ok");
								} 
							
							tPostgresPlusCommit_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_31 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_31";

	

 



/**
 * [tRunJob_31 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_31_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresPlusCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresPlusCommit_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresPlusCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusCommit_2", false);
		start_Hash.put("tPostgresPlusCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusCommit_2";

	
		int tos_count_tPostgresPlusCommit_2 = 0;
		

 



/**
 * [tPostgresPlusCommit_2 begin ] stop
 */
	
	/**
	 * [tPostgresPlusCommit_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusCommit_2";

	

	java.sql.Connection conn_tPostgresPlusCommit_2 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	if(conn_tPostgresPlusCommit_2 != null && !conn_tPostgresPlusCommit_2.isClosed())
	{
	
			
			conn_tPostgresPlusCommit_2.commit();
			
	
	}

 


	tos_count_tPostgresPlusCommit_2++;

/**
 * [tPostgresPlusCommit_2 main ] stop
 */
	
	/**
	 * [tPostgresPlusCommit_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusCommit_2";

	

 



/**
 * [tPostgresPlusCommit_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusCommit_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusCommit_2";

	

 



/**
 * [tPostgresPlusCommit_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresPlusCommit_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusCommit_2";

	

 

ok_Hash.put("tPostgresPlusCommit_2", true);
end_Hash.put("tPostgresPlusCommit_2", System.currentTimeMillis());




/**
 * [tPostgresPlusCommit_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresPlusCommit_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk26", 0, "ok");
								} 
							
							tRunJob_20Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresPlusCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusCommit_2";

	

 



/**
 * [tPostgresPlusCommit_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresPlusCommit_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_20", false);
		start_Hash.put("tRunJob_20", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_20";

	
		int tos_count_tRunJob_20 = 0;
		


 



/**
 * [tRunJob_20 begin ] stop
 */
	
	/**
	 * [tRunJob_20 main ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	
	java.util.List<String> paraList_tRunJob_20 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_20.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_20.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_20.add("--father_node=tRunJob_20");
	      			
	        			paraList_tRunJob_20.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_20.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_20.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_20.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_20 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_20 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_20".equals(tRunJobName_tRunJob_20) && childResumePath_tRunJob_20 != null){
		paraList_tRunJob_20.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_20.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_20");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_20 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_20 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_20.put("xmlType", context.xmlType);
                    paraList_tRunJob_20.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_20.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_20.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_20.put("confDir", context.confDir);
                    paraList_tRunJob_20.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_20.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_20.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_20.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_20.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_20.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_20.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_20.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_20.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_20().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_20 = context.propertyNames();
		while (propertyNames_tRunJob_20.hasMoreElements()) {
			String key_tRunJob_20 = (String) propertyNames_tRunJob_20.nextElement();
			Object value_tRunJob_20 = (Object) context.get(key_tRunJob_20);
			if(value_tRunJob_20!=null) {  
				paraList_tRunJob_20.add("--context_param " + key_tRunJob_20 + "=" + value_tRunJob_20);
			} else {
				paraList_tRunJob_20.add("--context_param " + key_tRunJob_20 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_20 = null;

	
	
		brk.create_initial_tables_indexes_0_1.create_initial_tables_indexes childJob_tRunJob_20 = new brk.create_initial_tables_indexes_0_1.create_initial_tables_indexes();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_20 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_20) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_20 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_20 : talendDataSources_tRunJob_20
			        .entrySet()) {
	            dataSources_tRunJob_20.put(talendDataSourceEntry_tRunJob_20.getKey(),
	                    talendDataSourceEntry_tRunJob_20.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_20.setDataSources(dataSources_tRunJob_20);
	    }
		  
			childJob_tRunJob_20.parentContextMap = parentContextMap_tRunJob_20;
		  
		
		String[][] childReturn_tRunJob_20 = childJob_tRunJob_20.runJob((String[]) paraList_tRunJob_20.toArray(new String[paraList_tRunJob_20.size()]));
		
	  	
				errorCode = childJob_tRunJob_20.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_20.getErrorCode() == null){
				globalMap.put("tRunJob_20_CHILD_RETURN_CODE", childJob_tRunJob_20.getStatus() != null && ("failure").equals(childJob_tRunJob_20.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_20_CHILD_RETURN_CODE", childJob_tRunJob_20.getErrorCode());
		    }
		    if (childJob_tRunJob_20.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_20_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_20.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_20++;

/**
 * [tRunJob_20 main ] stop
 */
	
	/**
	 * [tRunJob_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	

 



/**
 * [tRunJob_20 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	

 



/**
 * [tRunJob_20 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_20 end ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	

 

ok_Hash.put("tRunJob_20", true);
end_Hash.put("tRunJob_20", System.currentTimeMillis());




/**
 * [tRunJob_20 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_20:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk28", 0, "ok");
								} 
							
							tRunJob_30Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_20 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	

 



/**
 * [tRunJob_20 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_20_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_30", false);
		start_Hash.put("tRunJob_30", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_30";

	
		int tos_count_tRunJob_30 = 0;
		


 



/**
 * [tRunJob_30 begin ] stop
 */
	
	/**
	 * [tRunJob_30 main ] start
	 */

	

	
	
	currentComponent="tRunJob_30";

	
	java.util.List<String> paraList_tRunJob_30 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_30.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_30.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_30.add("--father_node=tRunJob_30");
	      			
	        			paraList_tRunJob_30.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_30.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_30.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_30.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_30 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_30 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_30".equals(tRunJobName_tRunJob_30) && childResumePath_tRunJob_30 != null){
		paraList_tRunJob_30.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_30.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_30");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_30 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_30 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_30.put("xmlType", context.xmlType);
                    paraList_tRunJob_30.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_30.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_30.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_30.put("confDir", context.confDir);
                    paraList_tRunJob_30.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_30.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_30.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_30.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_30.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_30.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_30.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_30.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_30.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_30().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_30 = context.propertyNames();
		while (propertyNames_tRunJob_30.hasMoreElements()) {
			String key_tRunJob_30 = (String) propertyNames_tRunJob_30.nextElement();
			Object value_tRunJob_30 = (Object) context.get(key_tRunJob_30);
			if(value_tRunJob_30!=null) {  
				paraList_tRunJob_30.add("--context_param " + key_tRunJob_30 + "=" + value_tRunJob_30);
			} else {
				paraList_tRunJob_30.add("--context_param " + key_tRunJob_30 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_30 = null;

	
	
		brk.geometry_0_1.geometry childJob_tRunJob_30 = new brk.geometry_0_1.geometry();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_30 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_30) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_30 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_30 : talendDataSources_tRunJob_30
			        .entrySet()) {
	            dataSources_tRunJob_30.put(talendDataSourceEntry_tRunJob_30.getKey(),
	                    talendDataSourceEntry_tRunJob_30.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_30.setDataSources(dataSources_tRunJob_30);
	    }
		  
			childJob_tRunJob_30.parentContextMap = parentContextMap_tRunJob_30;
		  
		
		String[][] childReturn_tRunJob_30 = childJob_tRunJob_30.runJob((String[]) paraList_tRunJob_30.toArray(new String[paraList_tRunJob_30.size()]));
		
	  	
				errorCode = childJob_tRunJob_30.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_30.getErrorCode() == null){
				globalMap.put("tRunJob_30_CHILD_RETURN_CODE", childJob_tRunJob_30.getStatus() != null && ("failure").equals(childJob_tRunJob_30.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_30_CHILD_RETURN_CODE", childJob_tRunJob_30.getErrorCode());
		    }
		    if (childJob_tRunJob_30.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_30_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_30.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_30++;

/**
 * [tRunJob_30 main ] stop
 */
	
	/**
	 * [tRunJob_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_30";

	

 



/**
 * [tRunJob_30 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_30";

	

 



/**
 * [tRunJob_30 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_30 end ] start
	 */

	

	
	
	currentComponent="tRunJob_30";

	

 

ok_Hash.put("tRunJob_30", true);
end_Hash.put("tRunJob_30", System.currentTimeMillis());




/**
 * [tRunJob_30 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_30:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk46", 0, "ok");
								} 
							
							tRunJob_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_30 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_30";

	

 



/**
 * [tRunJob_30 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_30_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        			paraList_tRunJob_3.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_3.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_3 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_3.put("xmlType", context.xmlType);
                    paraList_tRunJob_3.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_3.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_3.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_3.put("confDir", context.confDir);
                    paraList_tRunJob_3.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_3.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_3.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_3.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_3.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_3.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_3.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_3.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_3.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_3().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_3 = context.propertyNames();
		while (propertyNames_tRunJob_3.hasMoreElements()) {
			String key_tRunJob_3 = (String) propertyNames_tRunJob_3.nextElement();
			Object value_tRunJob_3 = (Object) context.get(key_tRunJob_3);
			if(value_tRunJob_3!=null) {  
				paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + value_tRunJob_3);
			} else {
				paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_3 = null;

	
	
		brk.perceel_algemeen_0_1.perceel_algemeen childJob_tRunJob_3 = new brk.perceel_algemeen_0_1.perceel_algemeen();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
	  	
				errorCode = childJob_tRunJob_3.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_3.getErrorCode() == null){
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
		    }
		    if (childJob_tRunJob_3.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tRunJob_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_16", false);
		start_Hash.put("tRunJob_16", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_16";

	
		int tos_count_tRunJob_16 = 0;
		


 



/**
 * [tRunJob_16 begin ] stop
 */
	
	/**
	 * [tRunJob_16 main ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	
	java.util.List<String> paraList_tRunJob_16 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_16.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_16.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_16.add("--father_node=tRunJob_16");
	      			
	        			paraList_tRunJob_16.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_16.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_16.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_16.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_16 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_16 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_16".equals(tRunJobName_tRunJob_16) && childResumePath_tRunJob_16 != null){
		paraList_tRunJob_16.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_16.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_16");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_16 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_16 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_16.put("xmlType", context.xmlType);
                    paraList_tRunJob_16.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_16.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_16.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_16.put("confDir", context.confDir);
                    paraList_tRunJob_16.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_16.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_16.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_16.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_16.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_16.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_16.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_16.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_16.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_16().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_16 = context.propertyNames();
		while (propertyNames_tRunJob_16.hasMoreElements()) {
			String key_tRunJob_16 = (String) propertyNames_tRunJob_16.nextElement();
			Object value_tRunJob_16 = (Object) context.get(key_tRunJob_16);
			if(value_tRunJob_16!=null) {  
				paraList_tRunJob_16.add("--context_param " + key_tRunJob_16 + "=" + value_tRunJob_16);
			} else {
				paraList_tRunJob_16.add("--context_param " + key_tRunJob_16 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_16 = null;

	
	
		brk.perceel_zakelijkrecht_0_1.perceel_zakelijkrecht childJob_tRunJob_16 = new brk.perceel_zakelijkrecht_0_1.perceel_zakelijkrecht();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_16 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_16) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_16 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_16 : talendDataSources_tRunJob_16
			        .entrySet()) {
	            dataSources_tRunJob_16.put(talendDataSourceEntry_tRunJob_16.getKey(),
	                    talendDataSourceEntry_tRunJob_16.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_16.setDataSources(dataSources_tRunJob_16);
	    }
		  
			childJob_tRunJob_16.parentContextMap = parentContextMap_tRunJob_16;
		  
		
		String[][] childReturn_tRunJob_16 = childJob_tRunJob_16.runJob((String[]) paraList_tRunJob_16.toArray(new String[paraList_tRunJob_16.size()]));
		
	  	
				errorCode = childJob_tRunJob_16.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_16.getErrorCode() == null){
				globalMap.put("tRunJob_16_CHILD_RETURN_CODE", childJob_tRunJob_16.getStatus() != null && ("failure").equals(childJob_tRunJob_16.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_16_CHILD_RETURN_CODE", childJob_tRunJob_16.getErrorCode());
		    }
		    if (childJob_tRunJob_16.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_16_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_16.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_16++;

/**
 * [tRunJob_16 main ] stop
 */
	
	/**
	 * [tRunJob_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	

 



/**
 * [tRunJob_16 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	

 



/**
 * [tRunJob_16 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_16 end ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	

 

ok_Hash.put("tRunJob_16", true);
end_Hash.put("tRunJob_16", System.currentTimeMillis());




/**
 * [tRunJob_16 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_16:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
								} 
							
							tRunJob_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_16 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	

 



/**
 * [tRunJob_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_16_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";

	
		int tos_count_tRunJob_4 = 0;
		


 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_4.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_4.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_4.add("--father_node=tRunJob_4");
	      			
	        			paraList_tRunJob_4.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_4.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_4 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_4.put("xmlType", context.xmlType);
                    paraList_tRunJob_4.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_4.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("confDir", context.confDir);
                    paraList_tRunJob_4.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_4.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_4.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_4.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_4.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_4.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_4().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_4 = context.propertyNames();
		while (propertyNames_tRunJob_4.hasMoreElements()) {
			String key_tRunJob_4 = (String) propertyNames_tRunJob_4.nextElement();
			Object value_tRunJob_4 = (Object) context.get(key_tRunJob_4);
			if(value_tRunJob_4!=null) {  
				paraList_tRunJob_4.add("--context_param " + key_tRunJob_4 + "=" + value_tRunJob_4);
			} else {
				paraList_tRunJob_4.add("--context_param " + key_tRunJob_4 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_4 = null;

	
	
		brk.perceel_koopsomjaar_0_1.perceel_koopsomjaar childJob_tRunJob_4 = new brk.perceel_koopsomjaar_0_1.perceel_koopsomjaar();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_4) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
			        .entrySet()) {
	            dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
	                    talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
	    }
		  
			childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
		  
		
		String[][] childReturn_tRunJob_4 = childJob_tRunJob_4.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));
		
	  	
				errorCode = childJob_tRunJob_4.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_4.getErrorCode() == null){
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
		    }
		    if (childJob_tRunJob_4.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());




/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
								} 
							
							tRunJob_21Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_21", false);
		start_Hash.put("tRunJob_21", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_21";

	
		int tos_count_tRunJob_21 = 0;
		


 



/**
 * [tRunJob_21 begin ] stop
 */
	
	/**
	 * [tRunJob_21 main ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	
	java.util.List<String> paraList_tRunJob_21 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_21.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_21.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_21.add("--father_node=tRunJob_21");
	      			
	        			paraList_tRunJob_21.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_21.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_21.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_21.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_21 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_21 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_21".equals(tRunJobName_tRunJob_21) && childResumePath_tRunJob_21 != null){
		paraList_tRunJob_21.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_21.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_21");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_21 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_21 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_21.put("xmlType", context.xmlType);
                    paraList_tRunJob_21.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_21.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_21.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_21.put("confDir", context.confDir);
                    paraList_tRunJob_21.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_21.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_21.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_21.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_21.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_21.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_21.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_21.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_21.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_21().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_21 = context.propertyNames();
		while (propertyNames_tRunJob_21.hasMoreElements()) {
			String key_tRunJob_21 = (String) propertyNames_tRunJob_21.nextElement();
			Object value_tRunJob_21 = (Object) context.get(key_tRunJob_21);
			if(value_tRunJob_21!=null) {  
				paraList_tRunJob_21.add("--context_param " + key_tRunJob_21 + "=" + value_tRunJob_21);
			} else {
				paraList_tRunJob_21.add("--context_param " + key_tRunJob_21 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_21 = null;

	
	
		brk.perceel_personen_0_1.perceel_personen childJob_tRunJob_21 = new brk.perceel_personen_0_1.perceel_personen();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_21 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_21) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_21 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_21 : talendDataSources_tRunJob_21
			        .entrySet()) {
	            dataSources_tRunJob_21.put(talendDataSourceEntry_tRunJob_21.getKey(),
	                    talendDataSourceEntry_tRunJob_21.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_21.setDataSources(dataSources_tRunJob_21);
	    }
		  
			childJob_tRunJob_21.parentContextMap = parentContextMap_tRunJob_21;
		  
		
		String[][] childReturn_tRunJob_21 = childJob_tRunJob_21.runJob((String[]) paraList_tRunJob_21.toArray(new String[paraList_tRunJob_21.size()]));
		
	  	
				errorCode = childJob_tRunJob_21.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_21.getErrorCode() == null){
				globalMap.put("tRunJob_21_CHILD_RETURN_CODE", childJob_tRunJob_21.getStatus() != null && ("failure").equals(childJob_tRunJob_21.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_21_CHILD_RETURN_CODE", childJob_tRunJob_21.getErrorCode());
		    }
		    if (childJob_tRunJob_21.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_21_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_21.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_21++;

/**
 * [tRunJob_21 main ] stop
 */
	
	/**
	 * [tRunJob_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	

 



/**
 * [tRunJob_21 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	

 



/**
 * [tRunJob_21 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_21 end ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	

 

ok_Hash.put("tRunJob_21", true);
end_Hash.put("tRunJob_21", System.currentTimeMillis());




/**
 * [tRunJob_21 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_21:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk27", 0, "ok");
								} 
							
							tRunJob_22Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_21 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	

 



/**
 * [tRunJob_21 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_21_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_22", false);
		start_Hash.put("tRunJob_22", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_22";

	
		int tos_count_tRunJob_22 = 0;
		


 



/**
 * [tRunJob_22 begin ] stop
 */
	
	/**
	 * [tRunJob_22 main ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	
	java.util.List<String> paraList_tRunJob_22 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_22.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_22.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_22.add("--father_node=tRunJob_22");
	      			
	        			paraList_tRunJob_22.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_22.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_22.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_22.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_22 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_22 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_22".equals(tRunJobName_tRunJob_22) && childResumePath_tRunJob_22 != null){
		paraList_tRunJob_22.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_22.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_22");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_22 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_22 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_22.put("xmlType", context.xmlType);
                    paraList_tRunJob_22.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_22.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_22.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_22.put("confDir", context.confDir);
                    paraList_tRunJob_22.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_22.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_22.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_22.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_22.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_22.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_22.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_22.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_22.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_22().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_22 = context.propertyNames();
		while (propertyNames_tRunJob_22.hasMoreElements()) {
			String key_tRunJob_22 = (String) propertyNames_tRunJob_22.nextElement();
			Object value_tRunJob_22 = (Object) context.get(key_tRunJob_22);
			if(value_tRunJob_22!=null) {  
				paraList_tRunJob_22.add("--context_param " + key_tRunJob_22 + "=" + value_tRunJob_22);
			} else {
				paraList_tRunJob_22.add("--context_param " + key_tRunJob_22 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_22 = null;

	
	
		brk.perceel_non_natural_persons_0_1.perceel_non_natural_persons childJob_tRunJob_22 = new brk.perceel_non_natural_persons_0_1.perceel_non_natural_persons();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_22 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_22) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_22 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_22 : talendDataSources_tRunJob_22
			        .entrySet()) {
	            dataSources_tRunJob_22.put(talendDataSourceEntry_tRunJob_22.getKey(),
	                    talendDataSourceEntry_tRunJob_22.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_22.setDataSources(dataSources_tRunJob_22);
	    }
		  
			childJob_tRunJob_22.parentContextMap = parentContextMap_tRunJob_22;
		  
		
		String[][] childReturn_tRunJob_22 = childJob_tRunJob_22.runJob((String[]) paraList_tRunJob_22.toArray(new String[paraList_tRunJob_22.size()]));
		
	  	
				errorCode = childJob_tRunJob_22.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_22.getErrorCode() == null){
				globalMap.put("tRunJob_22_CHILD_RETURN_CODE", childJob_tRunJob_22.getStatus() != null && ("failure").equals(childJob_tRunJob_22.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_22_CHILD_RETURN_CODE", childJob_tRunJob_22.getErrorCode());
		    }
		    if (childJob_tRunJob_22.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_22_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_22.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_22++;

/**
 * [tRunJob_22 main ] stop
 */
	
	/**
	 * [tRunJob_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	

 



/**
 * [tRunJob_22 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	

 



/**
 * [tRunJob_22 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_22 end ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	

 

ok_Hash.put("tRunJob_22", true);
end_Hash.put("tRunJob_22", System.currentTimeMillis());




/**
 * [tRunJob_22 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_22:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk33", 0, "ok");
								} 
							
							tRunJob_19Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_22 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	

 



/**
 * [tRunJob_22 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_22_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_19", false);
		start_Hash.put("tRunJob_19", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_19";

	
		int tos_count_tRunJob_19 = 0;
		


 



/**
 * [tRunJob_19 begin ] stop
 */
	
	/**
	 * [tRunJob_19 main ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	
	java.util.List<String> paraList_tRunJob_19 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_19.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_19.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_19.add("--father_node=tRunJob_19");
	      			
	        			paraList_tRunJob_19.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_19.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_19.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_19.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_19 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_19 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_19".equals(tRunJobName_tRunJob_19) && childResumePath_tRunJob_19 != null){
		paraList_tRunJob_19.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_19.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_19");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_19 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_19 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_19.put("xmlType", context.xmlType);
                    paraList_tRunJob_19.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_19.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_19.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_19.put("confDir", context.confDir);
                    paraList_tRunJob_19.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_19.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_19.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_19.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_19.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_19.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_19.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_19.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_19.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_19().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_19 = context.propertyNames();
		while (propertyNames_tRunJob_19.hasMoreElements()) {
			String key_tRunJob_19 = (String) propertyNames_tRunJob_19.nextElement();
			Object value_tRunJob_19 = (Object) context.get(key_tRunJob_19);
			if(value_tRunJob_19!=null) {  
				paraList_tRunJob_19.add("--context_param " + key_tRunJob_19 + "=" + value_tRunJob_19);
			} else {
				paraList_tRunJob_19.add("--context_param " + key_tRunJob_19 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_19 = null;

	
	
		brk.create_reports_tables_indexes_0_1.create_reports_tables_indexes childJob_tRunJob_19 = new brk.create_reports_tables_indexes_0_1.create_reports_tables_indexes();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_19 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_19) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_19 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_19 : talendDataSources_tRunJob_19
			        .entrySet()) {
	            dataSources_tRunJob_19.put(talendDataSourceEntry_tRunJob_19.getKey(),
	                    talendDataSourceEntry_tRunJob_19.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_19.setDataSources(dataSources_tRunJob_19);
	    }
		  
			childJob_tRunJob_19.parentContextMap = parentContextMap_tRunJob_19;
		  
		
		String[][] childReturn_tRunJob_19 = childJob_tRunJob_19.runJob((String[]) paraList_tRunJob_19.toArray(new String[paraList_tRunJob_19.size()]));
		
	  	
				errorCode = childJob_tRunJob_19.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_19.getErrorCode() == null){
				globalMap.put("tRunJob_19_CHILD_RETURN_CODE", childJob_tRunJob_19.getStatus() != null && ("failure").equals(childJob_tRunJob_19.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_19_CHILD_RETURN_CODE", childJob_tRunJob_19.getErrorCode());
		    }
		    if (childJob_tRunJob_19.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_19_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_19.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_19++;

/**
 * [tRunJob_19 main ] stop
 */
	
	/**
	 * [tRunJob_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	

 



/**
 * [tRunJob_19 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	

 



/**
 * [tRunJob_19 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_19 end ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	

 

ok_Hash.put("tRunJob_19", true);
end_Hash.put("tRunJob_19", System.currentTimeMillis());




/**
 * [tRunJob_19 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_19:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk35", 0, "ok");
								} 
							
							tRunJob_23Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_19 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	

 



/**
 * [tRunJob_19 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_19_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_23", false);
		start_Hash.put("tRunJob_23", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_23";

	
		int tos_count_tRunJob_23 = 0;
		


 



/**
 * [tRunJob_23 begin ] stop
 */
	
	/**
	 * [tRunJob_23 main ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	
	java.util.List<String> paraList_tRunJob_23 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_23.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_23.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_23.add("--father_node=tRunJob_23");
	      			
	        			paraList_tRunJob_23.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_23.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_23.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_23.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_23 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_23 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_23".equals(tRunJobName_tRunJob_23) && childResumePath_tRunJob_23 != null){
		paraList_tRunJob_23.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_23.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_23");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_23 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_23 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_23.put("xmlType", context.xmlType);
                    paraList_tRunJob_23.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_23.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_23.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_23.put("confDir", context.confDir);
                    paraList_tRunJob_23.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_23.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_23.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_23.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_23.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_23.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_23.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_23.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_23.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_23().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_23 = context.propertyNames();
		while (propertyNames_tRunJob_23.hasMoreElements()) {
			String key_tRunJob_23 = (String) propertyNames_tRunJob_23.nextElement();
			Object value_tRunJob_23 = (Object) context.get(key_tRunJob_23);
			if(value_tRunJob_23!=null) {  
				paraList_tRunJob_23.add("--context_param " + key_tRunJob_23 + "=" + value_tRunJob_23);
			} else {
				paraList_tRunJob_23.add("--context_param " + key_tRunJob_23 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_23 = null;

	
	
		brk.fill_original_objects_0_1.fill_original_objects childJob_tRunJob_23 = new brk.fill_original_objects_0_1.fill_original_objects();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_23 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_23) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_23 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_23 : talendDataSources_tRunJob_23
			        .entrySet()) {
	            dataSources_tRunJob_23.put(talendDataSourceEntry_tRunJob_23.getKey(),
	                    talendDataSourceEntry_tRunJob_23.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_23.setDataSources(dataSources_tRunJob_23);
	    }
		  
			childJob_tRunJob_23.parentContextMap = parentContextMap_tRunJob_23;
		  
		
		String[][] childReturn_tRunJob_23 = childJob_tRunJob_23.runJob((String[]) paraList_tRunJob_23.toArray(new String[paraList_tRunJob_23.size()]));
		
	  	
				errorCode = childJob_tRunJob_23.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_23.getErrorCode() == null){
				globalMap.put("tRunJob_23_CHILD_RETURN_CODE", childJob_tRunJob_23.getStatus() != null && ("failure").equals(childJob_tRunJob_23.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_23_CHILD_RETURN_CODE", childJob_tRunJob_23.getErrorCode());
		    }
		    if (childJob_tRunJob_23.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_23_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_23.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_23++;

/**
 * [tRunJob_23 main ] stop
 */
	
	/**
	 * [tRunJob_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	

 



/**
 * [tRunJob_23 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	

 



/**
 * [tRunJob_23 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_23 end ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	

 

ok_Hash.put("tRunJob_23", true);
end_Hash.put("tRunJob_23", System.currentTimeMillis());




/**
 * [tRunJob_23 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_23:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileDelete_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_23 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	

 



/**
 * [tRunJob_23 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_23_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";

	
		int tos_count_tFileDelete_2 = 0;
		

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(context.xmlLocation);
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",context.xmlLocation);
    
     
 

 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileDelete_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tRunJob_28Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_28", false);
		start_Hash.put("tRunJob_28", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_28";

	
		int tos_count_tRunJob_28 = 0;
		


 



/**
 * [tRunJob_28 begin ] stop
 */
	
	/**
	 * [tRunJob_28 main ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	
	java.util.List<String> paraList_tRunJob_28 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_28.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_28.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_28.add("--father_node=tRunJob_28");
	      			
	        			paraList_tRunJob_28.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_28.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_28.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_28.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_28 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_28 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_28".equals(tRunJobName_tRunJob_28) && childResumePath_tRunJob_28 != null){
		paraList_tRunJob_28.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_28.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_28");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_28 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_28 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_28.put("xmlType", context.xmlType);
                    paraList_tRunJob_28.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_28.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_28.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_28.put("confDir", context.confDir);
                    paraList_tRunJob_28.add("--context_type " + "confDir" + "=" + "id_String");
                    parentContextMap_tRunJob_28.put("inzicht_pw", context.inzicht_pw);
                    paraList_tRunJob_28.add("--context_type " + "inzicht_pw" + "=" + "id_Password");
                    parentContextMap_tRunJob_28.put("inzichtDataOwnerPassword", context.inzichtDataOwnerPassword);
                    paraList_tRunJob_28.add("--context_type " + "inzichtDataOwnerPassword" + "=" + "id_String");
                    parentContextMap_tRunJob_28.put("inzichtDataSchemaName", context.inzichtDataSchemaName);
                    paraList_tRunJob_28.add("--context_type " + "inzichtDataSchemaName" + "=" + "id_String");
                    parentContextMap_tRunJob_28.put("inzichtDataOwner", context.inzichtDataOwner);
                    paraList_tRunJob_28.add("--context_type " + "inzichtDataOwner" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_28().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_28 = context.propertyNames();
		while (propertyNames_tRunJob_28.hasMoreElements()) {
			String key_tRunJob_28 = (String) propertyNames_tRunJob_28.nextElement();
			Object value_tRunJob_28 = (Object) context.get(key_tRunJob_28);
			if(value_tRunJob_28!=null) {  
				paraList_tRunJob_28.add("--context_param " + key_tRunJob_28 + "=" + value_tRunJob_28);
			} else {
				paraList_tRunJob_28.add("--context_param " + key_tRunJob_28 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_28 = null;

	
	
		brk.brkinitialreportsresults_0_1.BRKInitialReportsResults childJob_tRunJob_28 = new brk.brkinitialreportsresults_0_1.BRKInitialReportsResults();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_28 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_28) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_28 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_28 : talendDataSources_tRunJob_28
			        .entrySet()) {
	            dataSources_tRunJob_28.put(talendDataSourceEntry_tRunJob_28.getKey(),
	                    talendDataSourceEntry_tRunJob_28.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_28.setDataSources(dataSources_tRunJob_28);
	    }
		  
			childJob_tRunJob_28.parentContextMap = parentContextMap_tRunJob_28;
		  
		
		String[][] childReturn_tRunJob_28 = childJob_tRunJob_28.runJob((String[]) paraList_tRunJob_28.toArray(new String[paraList_tRunJob_28.size()]));
		
	  	
				errorCode = childJob_tRunJob_28.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_28.getErrorCode() == null){
				globalMap.put("tRunJob_28_CHILD_RETURN_CODE", childJob_tRunJob_28.getStatus() != null && ("failure").equals(childJob_tRunJob_28.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_28_CHILD_RETURN_CODE", childJob_tRunJob_28.getErrorCode());
		    }
		    if (childJob_tRunJob_28.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_28_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_28.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_28++;

/**
 * [tRunJob_28 main ] stop
 */
	
	/**
	 * [tRunJob_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	

 



/**
 * [tRunJob_28 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	

 



/**
 * [tRunJob_28 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_28 end ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	

 

ok_Hash.put("tRunJob_28", true);
end_Hash.put("tRunJob_28", System.currentTimeMillis());




/**
 * [tRunJob_28 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_28:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk43", 0, "ok");
								} 
							
							tPostgresPlusClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_28 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	

 



/**
 * [tRunJob_28 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_28_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresPlusClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresPlusClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresPlusClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusClose_1", false);
		start_Hash.put("tPostgresPlusClose_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusClose_1";

	
		int tos_count_tPostgresPlusClose_1 = 0;
		

 



/**
 * [tPostgresPlusClose_1 begin ] stop
 */
	
	/**
	 * [tPostgresPlusClose_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusClose_1";

	



	java.sql.Connection conn_tPostgresPlusClose_1 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	if(conn_tPostgresPlusClose_1 != null && !conn_tPostgresPlusClose_1.isClosed())
	{
        conn_tPostgresPlusClose_1.close();
	}

 


	tos_count_tPostgresPlusClose_1++;

/**
 * [tPostgresPlusClose_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusClose_1";

	

 



/**
 * [tPostgresPlusClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusClose_1";

	

 



/**
 * [tPostgresPlusClose_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresPlusClose_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusClose_1";

	

 

ok_Hash.put("tPostgresPlusClose_1", true);
end_Hash.put("tPostgresPlusClose_1", System.currentTimeMillis());




/**
 * [tPostgresPlusClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresPlusClose_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusClose_1";

	

 



/**
 * [tPostgresPlusClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresPlusClose_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final initial_import initial_importClass = new initial_import();

        int exitCode = initial_importClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = initial_import.class.getClassLoader().getResourceAsStream("brk/initial_import_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = initial_import.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("xmlType", "id_String");
                            context.xmlType=(String) context.getProperty("xmlType");
                        context.setContextType("xmlLocation", "id_String");
                            context.xmlLocation=(String) context.getProperty("xmlLocation");
                        context.setContextType("confDir", "id_String");
                            context.confDir=(String) context.getProperty("confDir");
                        context.setContextType("inzicht_pw", "id_Password");
                            String pwd_inzicht_pw_value = context.getProperty("inzicht_pw");
                            context.inzicht_pw = null;
                            if(pwd_inzicht_pw_value!=null) {
                                if(context_param.containsKey("inzicht_pw")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.inzicht_pw = pwd_inzicht_pw_value;
                                } else if (!pwd_inzicht_pw_value.isEmpty()) {
                                    try {
                                        context.inzicht_pw = routines.system.PasswordEncryptUtil.decryptPassword(pwd_inzicht_pw_value);
                                        context.put("inzicht_pw",context.inzicht_pw);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("inzichtDataOwnerPassword", "id_String");
                            context.inzichtDataOwnerPassword=(String) context.getProperty("inzichtDataOwnerPassword");
                        context.setContextType("inzichtDataSchemaName", "id_String");
                            context.inzichtDataSchemaName=(String) context.getProperty("inzichtDataSchemaName");
                        context.setContextType("inzichtDataOwner", "id_String");
                            context.inzichtDataOwner=(String) context.getProperty("inzichtDataOwner");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("xmlType")) {
                context.xmlType = (String) parentContextMap.get("xmlType");
            }if (parentContextMap.containsKey("xmlLocation")) {
                context.xmlLocation = (String) parentContextMap.get("xmlLocation");
            }if (parentContextMap.containsKey("confDir")) {
                context.confDir = (String) parentContextMap.get("confDir");
            }if (parentContextMap.containsKey("inzicht_pw")) {
                context.inzicht_pw = (java.lang.String) parentContextMap.get("inzicht_pw");
            }if (parentContextMap.containsKey("inzichtDataOwnerPassword")) {
                context.inzichtDataOwnerPassword = (String) parentContextMap.get("inzichtDataOwnerPassword");
            }if (parentContextMap.containsKey("inzichtDataSchemaName")) {
                context.inzichtDataSchemaName = (String) parentContextMap.get("inzichtDataSchemaName");
            }if (parentContextMap.containsKey("inzichtDataOwner")) {
                context.inzichtDataOwner = (String) parentContextMap.get("inzichtDataOwner");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("inzicht_pw");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : initial_import");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tPostgresPlusConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tPostgresPlusConnection_1", globalMap.get("conn_tPostgresPlusConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     358851 characters generated by Talend Open Studio for Data Integration 
 *     on the 10 mei 2020 14:29:44 CEST
 ************************************************************************************************/