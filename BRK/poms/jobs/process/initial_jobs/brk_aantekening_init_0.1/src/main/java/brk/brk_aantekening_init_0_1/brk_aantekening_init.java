// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package brk.brk_aantekening_init_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Settings;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_12
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_13
	//import java.util.List;

	//the import part of tJava_11
	//import java.util.List;

	//the import part of tJava_14
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: brk_aantekening_init Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class brk_aantekening_init implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(xmlLocation != null){
				
					this.setProperty("xmlLocation", xmlLocation.toString());
				
			}
			
			if(xmlType != null){
				
					this.setProperty("xmlType", xmlType.toString());
				
			}
			
			if(jobName != null){
				
					this.setProperty("jobName", jobName.toString());
				
			}
			
			if(result != null){
				
					this.setProperty("result", result.toString());
				
			}
			
		}

public String xmlLocation;
public String getXmlLocation(){
	return this.xmlLocation;
}
public String xmlType;
public String getXmlType(){
	return this.xmlType;
}
public String jobName;
public String getJobName(){
	return this.jobName;
}
public Boolean result;
public Boolean getResult(){
	return this.result;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "brk_aantekening_init";
	private final String projectName = "BRK";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				brk_aantekening_init.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(brk_aantekening_init.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresPlusConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresPlusRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_3_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_3_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_3_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresPlusConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresPlusRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Begonnen met aantekening (2/23)","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Begonnen met aantekening (2/23)", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Begonnen met aantekening (2/23)"); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 42);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row3"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = " - ";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row2"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
row3Struct row3_tmp = new row3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row2.type = lcm.getType();
		row2.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row2.priority = lcm.getPriority();
		row2.message = lcm.getMessage();
		row2.code = lcm.getCode();
		
		row2.moment = java.util.Calendar.getInstance().getTime();
	
    	row2.pid = pid;
		row2.root_pid = rootPid;
		row2.father_pid = fatherPid;
	
    	row2.project = projectName;
    	row2.job = jobName;
    	row2.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row2
			//row2


			
				
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

row3 = null;


// # Output table : 'row3'
row3_tmp.moment = row2.moment;
row3_tmp.message = row2.message;
row3 = row3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row3
			//row3


			
				
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row3.moment != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row3.moment, "HH:mm:ss dd-MM-yyyy")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append(" - ");
    			


   				
	    		if(row3.message != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row2"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row3"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresPlusConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresPlusConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusConnection_1", false);
		start_Hash.put("tPostgresPlusConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusConnection_1";

	
		int tos_count_tPostgresPlusConnection_1 = 0;
		


	
            String dbProperties_tPostgresPlusConnection_1 = "";
            String url_tPostgresPlusConnection_1 = "jdbc:postgresql://"+Settings.get("CONNECTION_DEFINITION", "host")+":"+Settings.get("CONNECTION_DEFINITION", "port")+"/"+Settings.get("CONNECTION_DEFINITION", "database");

            if(dbProperties_tPostgresPlusConnection_1 != null && !"".equals(dbProperties_tPostgresPlusConnection_1.trim())) {
                url_tPostgresPlusConnection_1 = url_tPostgresPlusConnection_1 + "?" + dbProperties_tPostgresPlusConnection_1;
            }
		String dbUser_tPostgresPlusConnection_1 = Settings.get("CONNECTION_DEFINITION", "user");
		
		
			
	final String decryptedPassword_tPostgresPlusConnection_1 = Settings.get("CONNECTION_DEFINITION", "password"); 
			String dbPwd_tPostgresPlusConnection_1 = decryptedPassword_tPostgresPlusConnection_1;
		
	java.sql.Connection conn_tPostgresPlusConnection_1 = null;
	
	
			String sharedConnectionName_tPostgresPlusConnection_1 = "postgres";
			conn_tPostgresPlusConnection_1 = SharedDBConnection.getDBConnection("org.postgresql.Driver",url_tPostgresPlusConnection_1,dbUser_tPostgresPlusConnection_1 , dbPwd_tPostgresPlusConnection_1 , sharedConnectionName_tPostgresPlusConnection_1);
	if (null != conn_tPostgresPlusConnection_1) {
		
			conn_tPostgresPlusConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresPlusConnection_1",Settings.get("SCHEMA_NAME_LOOKUP", "ldf"));

	globalMap.put("conn_" + "tPostgresPlusConnection_1",conn_tPostgresPlusConnection_1);

 



/**
 * [tPostgresPlusConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 


	tos_count_tPostgresPlusConnection_1++;

/**
 * [tPostgresPlusConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 

ok_Hash.put("tPostgresPlusConnection_1", true);
end_Hash.put("tPostgresPlusConnection_1", System.currentTimeMillis());




/**
 * [tPostgresPlusConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresPlusConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputXML_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresPlusConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String toestandsdatum;

				public String getToestandsdatum () {
					return this.toestandsdatum;
				}
				
			    public String aantekeningid;

				public String getAantekeningid () {
					return this.aantekeningid;
				}
				
			    public String aantekeningidnamespace;

				public String getAantekeningidnamespace () {
					return this.aantekeningidnamespace;
				}
				
			    public String aantekeningidlokaalid;

				public String getAantekeningidlokaalid () {
					return this.aantekeningidlokaalid;
				}
				
			    public String aantekeningidversie;

				public String getAantekeningidversie () {
					return this.aantekeningidversie;
				}
				
			    public String aantekeningaardcode;

				public String getAantekeningaardcode () {
					return this.aantekeningaardcode;
				}
				
			    public String aantekeningaardwaarde;

				public String getAantekeningaardwaarde () {
					return this.aantekeningaardwaarde;
				}
				
			    public String aantekeningeinddatum;

				public String getAantekeningeinddatum () {
					return this.aantekeningeinddatum;
				}
				
			    public String aantekeningomschrijving;

				public String getAantekeningomschrijving () {
					return this.aantekeningomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.aantekeningid == null) ? 0 : this.aantekeningid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.aantekeningid == null) {
							if (other.aantekeningid != null)
								return false;
						
						} else if (!this.aantekeningid.equals(other.aantekeningid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.kdoreferentie = this.kdoreferentie;
	            other.toestandsdatum = this.toestandsdatum;
	            other.aantekeningid = this.aantekeningid;
	            other.aantekeningidnamespace = this.aantekeningidnamespace;
	            other.aantekeningidlokaalid = this.aantekeningidlokaalid;
	            other.aantekeningidversie = this.aantekeningidversie;
	            other.aantekeningaardcode = this.aantekeningaardcode;
	            other.aantekeningaardwaarde = this.aantekeningaardwaarde;
	            other.aantekeningeinddatum = this.aantekeningeinddatum;
	            other.aantekeningomschrijving = this.aantekeningomschrijving;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.aantekeningid = this.aantekeningid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.toestandsdatum = readString(dis);
					
					this.aantekeningid = readString(dis);
					
					this.aantekeningidnamespace = readString(dis);
					
					this.aantekeningidlokaalid = readString(dis);
					
					this.aantekeningidversie = readString(dis);
					
					this.aantekeningaardcode = readString(dis);
					
					this.aantekeningaardwaarde = readString(dis);
					
					this.aantekeningeinddatum = readString(dis);
					
					this.aantekeningomschrijving = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.toestandsdatum,dos);
					
					// String
				
						writeString(this.aantekeningid,dos);
					
					// String
				
						writeString(this.aantekeningidnamespace,dos);
					
					// String
				
						writeString(this.aantekeningidlokaalid,dos);
					
					// String
				
						writeString(this.aantekeningidversie,dos);
					
					// String
				
						writeString(this.aantekeningaardcode,dos);
					
					// String
				
						writeString(this.aantekeningaardwaarde,dos);
					
					// String
				
						writeString(this.aantekeningeinddatum,dos);
					
					// String
				
						writeString(this.aantekeningomschrijving,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",toestandsdatum="+toestandsdatum);
		sb.append(",aantekeningid="+aantekeningid);
		sb.append(",aantekeningidnamespace="+aantekeningidnamespace);
		sb.append(",aantekeningidlokaalid="+aantekeningidlokaalid);
		sb.append(",aantekeningidversie="+aantekeningidversie);
		sb.append(",aantekeningaardcode="+aantekeningaardcode);
		sb.append(",aantekeningaardwaarde="+aantekeningaardwaarde);
		sb.append(",aantekeningeinddatum="+aantekeningeinddatum);
		sb.append(",aantekeningomschrijving="+aantekeningomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.aantekeningid, other.aantekeningid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class aantekeningkdoStruct implements routines.system.IPersistableRow<aantekeningkdoStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String aantekeningid;

				public String getAantekeningid () {
					return this.aantekeningid;
				}
				
			    public String perceeltype;

				public String getPerceeltype () {
					return this.perceeltype;
				}
				
			    public String perceelhref;

				public String getPerceelhref () {
					return this.perceelhref;
				}
				
			    public String appartementsrechttype;

				public String getAppartementsrechttype () {
					return this.appartementsrechttype;
				}
				
			    public String appartementsrechthref;

				public String getAppartementsrechthref () {
					return this.appartementsrechthref;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.aantekeningid = readString(dis);
					
					this.perceeltype = readString(dis);
					
					this.perceelhref = readString(dis);
					
					this.appartementsrechttype = readString(dis);
					
					this.appartementsrechthref = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.aantekeningid,dos);
					
					// String
				
						writeString(this.perceeltype,dos);
					
					// String
				
						writeString(this.perceelhref,dos);
					
					// String
				
						writeString(this.appartementsrechttype,dos);
					
					// String
				
						writeString(this.appartementsrechthref,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",aantekeningid="+aantekeningid);
		sb.append(",perceeltype="+perceeltype);
		sb.append(",perceelhref="+perceelhref);
		sb.append(",appartementsrechttype="+appartementsrechttype);
		sb.append(",appartementsrechthref="+appartementsrechthref);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(aantekeningkdoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class aantekeningrechtStruct implements routines.system.IPersistableRow<aantekeningrechtStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String aantekeningid;

				public String getAantekeningid () {
					return this.aantekeningid;
				}
				
			    public String tennamstellingtype;

				public String getTennamstellingtype () {
					return this.tennamstellingtype;
				}
				
			    public String tennaamstellinghref;

				public String getTennaamstellinghref () {
					return this.tennaamstellinghref;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.aantekeningid = readString(dis);
					
					this.tennamstellingtype = readString(dis);
					
					this.tennaamstellinghref = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.aantekeningid,dos);
					
					// String
				
						writeString(this.tennamstellingtype,dos);
					
					// String
				
						writeString(this.tennaamstellinghref,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",aantekeningid="+aantekeningid);
		sb.append(",tennamstellingtype="+tennamstellingtype);
		sb.append(",tennaamstellinghref="+tennaamstellinghref);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(aantekeningrechtStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class stukdeelStruct implements routines.system.IPersistableRow<stukdeelStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String aantekeningid;

				public String getAantekeningid () {
					return this.aantekeningid;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String href;

				public String getHref () {
					return this.href;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.aantekeningid = readString(dis);
					
					this.type = readString(dis);
					
					this.href = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.aantekeningid,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.href,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",aantekeningid="+aantekeningid);
		sb.append(",type="+type);
		sb.append(",href="+href);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stukdeelStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class rechtspersoonStruct implements routines.system.IPersistableRow<rechtspersoonStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String aantekeningid;

				public String getAantekeningid () {
					return this.aantekeningid;
				}
				
			    public String soortprs;

				public String getSoortprs () {
					return this.soortprs;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String href;

				public String getHref () {
					return this.href;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.aantekeningid = readString(dis);
					
					this.soortprs = readString(dis);
					
					this.type = readString(dis);
					
					this.href = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.aantekeningid,dos);
					
					// String
				
						writeString(this.soortprs,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.href,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",aantekeningid="+aantekeningid);
		sb.append(",soortprs="+soortprs);
		sb.append(",type="+type);
		sb.append(",href="+href);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rechtspersoonStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class kadnnpStruct implements routines.system.IPersistableRow<kadnnpStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String aantekeningid;

				public String getAantekeningid () {
					return this.aantekeningid;
				}
				
			    public String soortprs;

				public String getSoortprs () {
					return this.soortprs;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String href;

				public String getHref () {
					return this.href;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.aantekeningid = readString(dis);
					
					this.soortprs = readString(dis);
					
					this.type = readString(dis);
					
					this.href = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.aantekeningid,dos);
					
					// String
				
						writeString(this.soortprs,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.href,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",aantekeningid="+aantekeningid);
		sb.append(",soortprs="+soortprs);
		sb.append(",type="+type);
		sb.append(",href="+href);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(kadnnpStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class kadpersoonStruct implements routines.system.IPersistableRow<kadpersoonStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String aantekeningid;

				public String getAantekeningid () {
					return this.aantekeningid;
				}
				
			    public String soortprs;

				public String getSoortprs () {
					return this.soortprs;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String href;

				public String getHref () {
					return this.href;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.aantekeningid = readString(dis);
					
					this.soortprs = readString(dis);
					
					this.type = readString(dis);
					
					this.href = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.aantekeningid,dos);
					
					// String
				
						writeString(this.soortprs,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.href,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",aantekeningid="+aantekeningid);
		sb.append(",soortprs="+soortprs);
		sb.append(",type="+type);
		sb.append(",href="+href);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(kadpersoonStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ingezeteneStruct implements routines.system.IPersistableRow<ingezeteneStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String aantekeningid;

				public String getAantekeningid () {
					return this.aantekeningid;
				}
				
			    public String soortprs;

				public String getSoortprs () {
					return this.soortprs;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String href;

				public String getHref () {
					return this.href;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.aantekeningid = readString(dis);
					
					this.soortprs = readString(dis);
					
					this.type = readString(dis);
					
					this.href = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.aantekeningid,dos);
					
					// String
				
						writeString(this.soortprs,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.href,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",aantekeningid="+aantekeningid);
		sb.append(",soortprs="+soortprs);
		sb.append(",type="+type);
		sb.append(",href="+href);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ingezeteneStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class nietingezeteneStruct implements routines.system.IPersistableRow<nietingezeteneStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String aantekeningid;

				public String getAantekeningid () {
					return this.aantekeningid;
				}
				
			    public String soortprs;

				public String getSoortprs () {
					return this.soortprs;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String href;

				public String getHref () {
					return this.href;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_aantekening_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_aantekening_init.length == 0) {
   					commonByteArray_BRK_brk_aantekening_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_aantekening_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_aantekening_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_aantekening_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.aantekeningid = readString(dis);
					
					this.soortprs = readString(dis);
					
					this.type = readString(dis);
					
					this.href = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.aantekeningid,dos);
					
					// String
				
						writeString(this.soortprs,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.href,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",aantekeningid="+aantekeningid);
		sb.append(",soortprs="+soortprs);
		sb.append(",type="+type);
		sb.append(",href="+href);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(nietingezeteneStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_aantekening_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_aantekening_init = new byte[0];

	
			    public routines.system.Document content;

				public routines.system.Document getContent () {
					return this.content;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_aantekening_init) {

        	try {

        		int length = 0;
		
						this.content = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("content="+String.valueOf(content));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
aantekeningkdoStruct aantekeningkdo = new aantekeningkdoStruct();
aantekeningrechtStruct aantekeningrecht = new aantekeningrechtStruct();
stukdeelStruct stukdeel = new stukdeelStruct();
rechtspersoonStruct rechtspersoon = new rechtspersoonStruct();
kadnnpStruct kadnnp = new kadnnpStruct();
kadpersoonStruct kadpersoon = new kadpersoonStruct();
ingezeteneStruct ingezetene = new ingezeteneStruct();
nietingezeteneStruct nietingezetene = new nietingezeteneStruct();




	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tXMLMap_3_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_3_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_3_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_3_TXMLMAP_OUT__Struct Var__tXMLMap_3_TXMLMAP_OUT = new Var__tXMLMap_3_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out1Struct out1_save = null;
//the aggregate variable
out1Struct out1_aggregate = null;
aantekeningkdoStruct aantekeningkdo_tmp = new aantekeningkdoStruct();
aantekeningkdoStruct aantekeningkdo_save = null;
//the aggregate variable
aantekeningkdoStruct aantekeningkdo_aggregate = null;
aantekeningrechtStruct aantekeningrecht_tmp = new aantekeningrechtStruct();
aantekeningrechtStruct aantekeningrecht_save = null;
//the aggregate variable
aantekeningrechtStruct aantekeningrecht_aggregate = null;
stukdeelStruct stukdeel_tmp = new stukdeelStruct();
stukdeelStruct stukdeel_save = null;
//the aggregate variable
stukdeelStruct stukdeel_aggregate = null;
rechtspersoonStruct rechtspersoon_tmp = new rechtspersoonStruct();
rechtspersoonStruct rechtspersoon_save = null;
//the aggregate variable
rechtspersoonStruct rechtspersoon_aggregate = null;
kadnnpStruct kadnnp_tmp = new kadnnpStruct();
kadnnpStruct kadnnp_save = null;
//the aggregate variable
kadnnpStruct kadnnp_aggregate = null;
kadpersoonStruct kadpersoon_tmp = new kadpersoonStruct();
kadpersoonStruct kadpersoon_save = null;
//the aggregate variable
kadpersoonStruct kadpersoon_aggregate = null;
ingezeteneStruct ingezetene_tmp = new ingezeteneStruct();
ingezeteneStruct ingezetene_save = null;
//the aggregate variable
ingezeteneStruct ingezetene_aggregate = null;
nietingezeteneStruct nietingezetene_tmp = new nietingezeteneStruct();
nietingezeteneStruct nietingezetene_save = null;
//the aggregate variable
nietingezeteneStruct nietingezetene_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_3 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_3",allOutsForAggregate_tXMLMap_3);
// ###############################
class TreeNode_API_tXMLMap_3_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_3_TXMLMAP_OUT treeNodeAPI_tXMLMap_3_TXMLMAP_OUT = new TreeNode_API_tXMLMap_3_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_3_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_3_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_3_TXMLMAP_OUT xml_api_tXMLMap_3_TXMLMAP_OUT = new XML_API_tXMLMap_3_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_3_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_3_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";

	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"."		
	,"."+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	true		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper(context.xmlType,queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.xmlLocation;
} catch(java.lang.Exception e) {
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get(".");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("."+"/@xsi:nil")};	
										if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.content =null;
										}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1) || xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)){
											row1.content=null;
										}else{
		row1.content = ParserUtils.parseTo_Document(str_tFileInputXML_1);
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

			//row1
			//row1


			
				
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				}
				
				
				
			

		

	boolean rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_3_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setOriginalLoop("/KadastraalObjectSnapshot/Aantekening/identificatie");
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT_0 = row1.content.getDocument();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_3_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setDefineNS(false);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT_0.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_0 = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/namespace");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("namespace");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betrokkenPersoon/RechtspersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betrokkenPersoon/RechtspersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../@id");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betrokkenPersoon/IngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/versie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("versie");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/waarde");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../aard/waarde");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("lokaalId");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betrokkenPersoon/NietIngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/einddatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../einddatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/code");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../aard/code");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../isGebaseerdOp/StukdeelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../isGebaseerdOp/StukdeelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betrokkenPersoon/NietIngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/omschrijving");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../omschrijving");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betrokkenPersoon/IngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../../referentie");
					
					String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT_0 = docToFlat_tXMLMap_3_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT_0: resultSet_tXMLMap_3_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_3_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT_0 : oneRow_tXMLMap_3_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_3_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output table

out1 = null;


// # Output table : 'out1'

out1_tmp = new out1Struct();
out1_tmp.kdoreferentie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
out1_tmp.toestandsdatum = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
out1_tmp.aantekeningid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
out1_tmp.aantekeningidnamespace = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/namespace");
out1_tmp.aantekeningidlokaalid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/lokaalId");
out1_tmp.aantekeningidversie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/versie");
out1_tmp.aantekeningaardcode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/code");
out1_tmp.aantekeningaardwaarde = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/waarde");
out1_tmp.aantekeningeinddatum = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/einddatum");
out1_tmp.aantekeningomschrijving = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/omschrijving");allOutsForAggregate_tXMLMap_3.add(out1_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT_1 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_1.setOriginalLoop("/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject");
					docToFlat_tXMLMap_3_TXMLMAP_OUT_1.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT_1 = row1.content.getDocument();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_1.setDoc(doc_tXMLMap_3_TXMLMAP_OUT_1);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_1.setDefineNS(false);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_1.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT_1.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_1 = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_1.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_1);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/namespace");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betrokkenPersoon/RechtspersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betrokkenPersoon/RechtspersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("heeftBetrekkingOp/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betrokkenPersoon/IngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("heeftBetrekkingOp/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/versie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/waarde");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../aard/waarde");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betrokkenPersoon/NietIngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/einddatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../einddatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("heeftBetrekkingOp/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/code");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../aard/code");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../isGebaseerdOp/StukdeelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../isGebaseerdOp/StukdeelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betrokkenPersoon/NietIngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/omschrijving");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../omschrijving");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betrokkenPersoon/IngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("heeftBetrekkingOp/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.add("../../../referentie");
					
					String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_1 = absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT_1 = relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_1.toArray(new String[0]);
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_1.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_1);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_1.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT_1);
					//generate document to flat data
					docToFlat_tXMLMap_3_TXMLMAP_OUT_1.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT_1 = docToFlat_tXMLMap_3_TXMLMAP_OUT_1.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT_1: resultSet_tXMLMap_3_TXMLMAP_OUT_1) { // G_TXM_M_001
						nb_line_tXMLMap_3_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT_1 : oneRow_tXMLMap_3_TXMLMAP_OUT_1.entrySet()) {
							treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT_1.getKey(),entry_tXMLMap_3_TXMLMAP_OUT_1.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output table

aantekeningkdo = null;


// # Output table : 'out1'

// # Output table : 'aantekeningkdo'

aantekeningkdo_tmp = new aantekeningkdoStruct();
aantekeningkdo_tmp.kdoreferentie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
aantekeningkdo_tmp.aantekeningid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
aantekeningkdo_tmp.perceeltype = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
aantekeningkdo_tmp.perceelhref = TalendString.talendTrim(treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href"),'#',0) ;
aantekeningkdo_tmp.appartementsrechttype = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
aantekeningkdo_tmp.appartementsrechthref = TalendString.talendTrim(treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href"),'#',0) ;allOutsForAggregate_tXMLMap_3.add(aantekeningkdo_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT_2 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_2.setOriginalLoop("/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht");
					docToFlat_tXMLMap_3_TXMLMAP_OUT_2.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT_2 = row1.content.getDocument();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_2.setDoc(doc_tXMLMap_3_TXMLMAP_OUT_2);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_2.setDefineNS(false);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_2.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT_2.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_2 = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_2.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_2);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/namespace");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betrokkenPersoon/RechtspersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("heeftBetrekkingOp/TenaamstellingRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betrokkenPersoon/RechtspersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betrokkenPersoon/IngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/versie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/waarde");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../aard/waarde");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betrokkenPersoon/NietIngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/einddatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../einddatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/code");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../aard/code");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../isGebaseerdOp/StukdeelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../isGebaseerdOp/StukdeelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betrokkenPersoon/NietIngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/omschrijving");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../omschrijving");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betrokkenPersoon/IngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("heeftBetrekkingOp/TenaamstellingRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.add("../../../referentie");
					
					String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_2 = absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT_2 = relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_2.toArray(new String[0]);
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_2.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_2);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_2.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT_2);
					//generate document to flat data
					docToFlat_tXMLMap_3_TXMLMAP_OUT_2.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT_2 = docToFlat_tXMLMap_3_TXMLMAP_OUT_2.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT_2: resultSet_tXMLMap_3_TXMLMAP_OUT_2) { // G_TXM_M_001
						nb_line_tXMLMap_3_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT_2 : oneRow_tXMLMap_3_TXMLMAP_OUT_2.entrySet()) {
							treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT_2.getKey(),entry_tXMLMap_3_TXMLMAP_OUT_2.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output table

aantekeningrecht = null;


// # Output table : 'out1'

// # Output table : 'aantekeningkdo'

// # Output table : 'aantekeningrecht'

aantekeningrecht_tmp = new aantekeningrechtStruct();
aantekeningrecht_tmp.kdoreferentie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
aantekeningrecht_tmp.aantekeningid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
aantekeningrecht_tmp.tennamstellingtype = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
aantekeningrecht_tmp.tennaamstellinghref = TalendString.talendTrim(treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href"),'#',0) ;allOutsForAggregate_tXMLMap_3.add(aantekeningrecht_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT_3 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_3.setOriginalLoop("/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef");
					docToFlat_tXMLMap_3_TXMLMAP_OUT_3.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT_3 = row1.content.getDocument();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_3.setDoc(doc_tXMLMap_3_TXMLMAP_OUT_3);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_3.setDefineNS(false);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_3.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT_3.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_3 = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_3.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_3);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/namespace");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betrokkenPersoon/RechtspersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betrokkenPersoon/RechtspersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betrokkenPersoon/IngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/versie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/waarde");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../aard/waarde");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betrokkenPersoon/NietIngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/einddatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../einddatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/code");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../aard/code");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betrokkenPersoon/NietIngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/omschrijving");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../omschrijving");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betrokkenPersoon/IngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.add("../../../referentie");
					
					String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_3 = absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT_3 = relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_3.toArray(new String[0]);
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_3.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_3);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_3.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT_3);
					//generate document to flat data
					docToFlat_tXMLMap_3_TXMLMAP_OUT_3.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT_3 = docToFlat_tXMLMap_3_TXMLMAP_OUT_3.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT_3: resultSet_tXMLMap_3_TXMLMAP_OUT_3) { // G_TXM_M_001
						nb_line_tXMLMap_3_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT_3 : oneRow_tXMLMap_3_TXMLMAP_OUT_3.entrySet()) {
							treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT_3.getKey(),entry_tXMLMap_3_TXMLMAP_OUT_3.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output table

stukdeel = null;


// # Output table : 'out1'

// # Output table : 'aantekeningkdo'

// # Output table : 'aantekeningrecht'

// # Output table : 'stukdeel'

stukdeel_tmp = new stukdeelStruct();
stukdeel_tmp.kdoreferentie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
stukdeel_tmp.aantekeningid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
stukdeel_tmp.type = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@type");
stukdeel_tmp.href = TalendString.talendTrim(treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@href"),'#',0) ;allOutsForAggregate_tXMLMap_3.add(stukdeel_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT_4 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_4.setOriginalLoop("/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef");
					docToFlat_tXMLMap_3_TXMLMAP_OUT_4.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT_4 = row1.content.getDocument();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_4.setDoc(doc_tXMLMap_3_TXMLMAP_OUT_4);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_4.setDefineNS(false);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_4.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT_4.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_4 = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_4.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_4);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/namespace");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../IngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/versie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../KADNietNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/waarde");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../aard/waarde");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../NietIngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/einddatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../einddatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/code");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../aard/code");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../KADNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../isGebaseerdOp/StukdeelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../isGebaseerdOp/StukdeelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../NietIngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/omschrijving");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../omschrijving");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../IngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../KADNietNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../KADNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.add("../../../referentie");
					
					String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_4 = absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT_4 = relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_4.toArray(new String[0]);
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_4.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_4);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_4.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT_4);
					//generate document to flat data
					docToFlat_tXMLMap_3_TXMLMAP_OUT_4.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT_4 = docToFlat_tXMLMap_3_TXMLMAP_OUT_4.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT_4: resultSet_tXMLMap_3_TXMLMAP_OUT_4) { // G_TXM_M_001
						nb_line_tXMLMap_3_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT_4 : oneRow_tXMLMap_3_TXMLMAP_OUT_4.entrySet()) {
							treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT_4.getKey(),entry_tXMLMap_3_TXMLMAP_OUT_4.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output table

rechtspersoon = null;


// # Output table : 'out1'

// # Output table : 'aantekeningkdo'

// # Output table : 'aantekeningrecht'

// # Output table : 'stukdeel'

// # Output table : 'rechtspersoon'

rechtspersoon_tmp = new rechtspersoonStruct();
rechtspersoon_tmp.kdoreferentie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
rechtspersoon_tmp.aantekeningid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
rechtspersoon_tmp.soortprs = "Rechtspersoon";
rechtspersoon_tmp.type = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@type");
rechtspersoon_tmp.href = TalendString.talendTrim(treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@href"),'#',0) ;allOutsForAggregate_tXMLMap_3.add(rechtspersoon_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT_5 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_5.setOriginalLoop("/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef");
					docToFlat_tXMLMap_3_TXMLMAP_OUT_5.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT_5 = row1.content.getDocument();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_5.setDoc(doc_tXMLMap_3_TXMLMAP_OUT_5);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_5.setDefineNS(false);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_5.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT_5.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_5 = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_5.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_5);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/namespace");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../RechtspersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../RechtspersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../IngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/versie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/waarde");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../aard/waarde");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../NietIngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/einddatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../einddatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/code");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../aard/code");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../KADNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../isGebaseerdOp/StukdeelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../isGebaseerdOp/StukdeelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../NietIngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/omschrijving");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../omschrijving");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../IngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../KADNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.add("../../../referentie");
					
					String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_5 = absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT_5 = relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_5.toArray(new String[0]);
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_5.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_5);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_5.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT_5);
					//generate document to flat data
					docToFlat_tXMLMap_3_TXMLMAP_OUT_5.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT_5 = docToFlat_tXMLMap_3_TXMLMAP_OUT_5.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT_5: resultSet_tXMLMap_3_TXMLMAP_OUT_5) { // G_TXM_M_001
						nb_line_tXMLMap_3_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT_5 : oneRow_tXMLMap_3_TXMLMAP_OUT_5.entrySet()) {
							treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT_5.getKey(),entry_tXMLMap_3_TXMLMAP_OUT_5.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output table

kadnnp = null;


// # Output table : 'out1'

// # Output table : 'aantekeningkdo'

// # Output table : 'aantekeningrecht'

// # Output table : 'stukdeel'

// # Output table : 'rechtspersoon'

// # Output table : 'kadnnp'

kadnnp_tmp = new kadnnpStruct();
kadnnp_tmp.kdoreferentie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
kadnnp_tmp.aantekeningid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
kadnnp_tmp.soortprs = "KAD niet natuurlijk persoon";
kadnnp_tmp.type = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
kadnnp_tmp.href = TalendString.talendTrim(treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href"),'#',0) ;allOutsForAggregate_tXMLMap_3.add(kadnnp_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT_6 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_6.setOriginalLoop("/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef");
					docToFlat_tXMLMap_3_TXMLMAP_OUT_6.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT_6 = row1.content.getDocument();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_6.setDoc(doc_tXMLMap_3_TXMLMAP_OUT_6);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_6.setDefineNS(false);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_6.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT_6.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_6 = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_6.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_6);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/namespace");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../RechtspersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../RechtspersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../IngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/versie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../KADNietNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/waarde");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../aard/waarde");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../NietIngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/einddatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../einddatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/code");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../aard/code");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../isGebaseerdOp/StukdeelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../isGebaseerdOp/StukdeelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../NietIngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/omschrijving");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../omschrijving");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../IngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../KADNietNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.add("../../../referentie");
					
					String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_6 = absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT_6 = relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_6.toArray(new String[0]);
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_6.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_6);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_6.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT_6);
					//generate document to flat data
					docToFlat_tXMLMap_3_TXMLMAP_OUT_6.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT_6 = docToFlat_tXMLMap_3_TXMLMAP_OUT_6.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT_6: resultSet_tXMLMap_3_TXMLMAP_OUT_6) { // G_TXM_M_001
						nb_line_tXMLMap_3_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT_6 : oneRow_tXMLMap_3_TXMLMAP_OUT_6.entrySet()) {
							treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT_6.getKey(),entry_tXMLMap_3_TXMLMAP_OUT_6.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output table

kadpersoon = null;


// # Output table : 'out1'

// # Output table : 'aantekeningkdo'

// # Output table : 'aantekeningrecht'

// # Output table : 'stukdeel'

// # Output table : 'rechtspersoon'

// # Output table : 'kadnnp'

// # Output table : 'kadpersoon'

kadpersoon_tmp = new kadpersoonStruct();
kadpersoon_tmp.kdoreferentie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
kadpersoon_tmp.aantekeningid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
kadpersoon_tmp.soortprs = "KAD persoon";
kadpersoon_tmp.type = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
kadpersoon_tmp.href = TalendString.talendTrim(treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@href"),'#',0) ;allOutsForAggregate_tXMLMap_3.add(kadpersoon_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT_7 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_7.setOriginalLoop("/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef");
					docToFlat_tXMLMap_3_TXMLMAP_OUT_7.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT_7 = row1.content.getDocument();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_7.setDoc(doc_tXMLMap_3_TXMLMAP_OUT_7);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_7.setDefineNS(false);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_7.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT_7.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_7 = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_7.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_7);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/namespace");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../RechtspersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../RechtspersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/versie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../KADNietNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/waarde");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../aard/waarde");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../NietIngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/einddatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../einddatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/code");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../aard/code");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../KADNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../isGebaseerdOp/StukdeelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../isGebaseerdOp/StukdeelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../NietIngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/omschrijving");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../omschrijving");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../KADNietNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../KADNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.add("../../../referentie");
					
					String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_7 = absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT_7 = relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_7.toArray(new String[0]);
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_7.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_7);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_7.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT_7);
					//generate document to flat data
					docToFlat_tXMLMap_3_TXMLMAP_OUT_7.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT_7 = docToFlat_tXMLMap_3_TXMLMAP_OUT_7.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT_7: resultSet_tXMLMap_3_TXMLMAP_OUT_7) { // G_TXM_M_001
						nb_line_tXMLMap_3_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT_7 : oneRow_tXMLMap_3_TXMLMAP_OUT_7.entrySet()) {
							treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT_7.getKey(),entry_tXMLMap_3_TXMLMAP_OUT_7.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output table

ingezetene = null;


// # Output table : 'out1'

// # Output table : 'aantekeningkdo'

// # Output table : 'aantekeningrecht'

// # Output table : 'stukdeel'

// # Output table : 'rechtspersoon'

// # Output table : 'kadnnp'

// # Output table : 'kadpersoon'

// # Output table : 'ingezetene'

ingezetene_tmp = new ingezeteneStruct();
ingezetene_tmp.kdoreferentie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
ingezetene_tmp.aantekeningid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
ingezetene_tmp.soortprs = "Ingezetene";
ingezetene_tmp.type = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@type");
ingezetene_tmp.href = TalendString.talendTrim(treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@href"),'#',0) ;allOutsForAggregate_tXMLMap_3.add(ingezetene_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT_8 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_8.setOriginalLoop("/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef");
					docToFlat_tXMLMap_3_TXMLMAP_OUT_8.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT_8 = row1.content.getDocument();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_8.setDoc(doc_tXMLMap_3_TXMLMAP_OUT_8);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_8.setDefineNS(false);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_8.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT_8.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_8 = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_8.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_8);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/namespace");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../RechtspersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/RechtspersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../RechtspersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../IngezeteneRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/versie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../KADNietNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/waarde");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../aard/waarde");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/einddatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../einddatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/aard/code");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../aard/code");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../KADNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../isGebaseerdOp/StukdeelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/isGebaseerdOp/StukdeelRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../isGebaseerdOp/StukdeelRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/omschrijving");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../omschrijving");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/IngezeteneRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../IngezeteneRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNietNatuurlijkPersoonRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../KADNietNatuurlijkPersoonRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../betreftAantekeningKadastraalObject/AantekeningKadastraalObject/heeftBetrekkingOp/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../betreftAantekeningRecht/AantekeningRecht/heeftBetrekkingOp/TenaamstellingRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/KADNatuurlijkPersoonRef/@href");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../KADNatuurlijkPersoonRef/@href");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.add("../../../referentie");
					
					String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_8 = absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT_8 = relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_8.toArray(new String[0]);
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_8.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_8);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_8.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT_8);
					//generate document to flat data
					docToFlat_tXMLMap_3_TXMLMAP_OUT_8.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT_8 = docToFlat_tXMLMap_3_TXMLMAP_OUT_8.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT_8: resultSet_tXMLMap_3_TXMLMAP_OUT_8) { // G_TXM_M_001
						nb_line_tXMLMap_3_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT_8 : oneRow_tXMLMap_3_TXMLMAP_OUT_8.entrySet()) {
							treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT_8.getKey(),entry_tXMLMap_3_TXMLMAP_OUT_8.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output table

nietingezetene = null;


// # Output table : 'out1'

// # Output table : 'aantekeningkdo'

// # Output table : 'aantekeningrecht'

// # Output table : 'stukdeel'

// # Output table : 'rechtspersoon'

// # Output table : 'kadnnp'

// # Output table : 'kadpersoon'

// # Output table : 'ingezetene'

// # Output table : 'nietingezetene'

nietingezetene_tmp = new nietingezeteneStruct();
nietingezetene_tmp.kdoreferentie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
nietingezetene_tmp.aantekeningid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/@id");
nietingezetene_tmp.soortprs = "Niet ingezetene";
nietingezetene_tmp.type = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@type");
nietingezetene_tmp.href = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Aantekening/betrokkenPersoon/NietIngezeteneRef/@href").replaceAll("#","");allOutsForAggregate_tXMLMap_3.add(nietingezetene_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_3_TXMLMAP_OUT++;

/**
 * [tXMLMap_3_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	
 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	




			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_3_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tPostgresPlusOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_1", false);
		start_Hash.put("tPostgresPlusOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("out1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_1 = 0;
		
	





String dbschema_tPostgresPlusOutput_1 = null;
	dbschema_tPostgresPlusOutput_1 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_1 = null;
if(dbschema_tPostgresPlusOutput_1 == null || dbschema_tPostgresPlusOutput_1.trim().length() == 0) {
	tableName_tPostgresPlusOutput_1 = "brk_aantekening";
} else {
	tableName_tPostgresPlusOutput_1 = dbschema_tPostgresPlusOutput_1 + "\".\"" + "brk_aantekening";
}

int nb_line_tPostgresPlusOutput_1 = 0;
int nb_line_update_tPostgresPlusOutput_1 = 0;
int nb_line_inserted_tPostgresPlusOutput_1 = 0;
int nb_line_deleted_tPostgresPlusOutput_1 = 0;
int nb_line_rejected_tPostgresPlusOutput_1 = 0;

int deletedCount_tPostgresPlusOutput_1=0;
int updatedCount_tPostgresPlusOutput_1=0;
int insertedCount_tPostgresPlusOutput_1=0;
int rejectedCount_tPostgresPlusOutput_1=0;

boolean whetherReject_tPostgresPlusOutput_1 = false;


java.sql.Connection conn_tPostgresPlusOutput_1 = null;
	conn_tPostgresPlusOutput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_1 = false;
            String defaultSchema_tPostgresPlusOutput_1 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_1 = dbMetaData_tPostgresPlusOutput_1.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_1 == null || dbschema_tPostgresPlusOutput_1.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_1 = stmtSchema_tPostgresPlusOutput_1.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_1.next()){
                            defaultSchema_tPostgresPlusOutput_1 = rsSchema_tPostgresPlusOutput_1.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_1.next()) {
                    String table_tPostgresPlusOutput_1 = rsTable_tPostgresPlusOutput_1.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_1 = rsTable_tPostgresPlusOutput_1.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_1.equals("brk_aantekening")
                        && (schema_tPostgresPlusOutput_1.equals(dbschema_tPostgresPlusOutput_1) || ((dbschema_tPostgresPlusOutput_1 == null || dbschema_tPostgresPlusOutput_1.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_1.equals(schema_tPostgresPlusOutput_1)))) {
                        whetherExist_tPostgresPlusOutput_1 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_1) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_1.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_1 + "\"(\"kdoreferentie\" VARCHAR(999)  ,\"toestandsdatum\" VARCHAR(999)  ,\"aantekeningid\" VARCHAR(999)  ,\"aantekeningidnamespace\" VARCHAR(999)  ,\"aantekeningidlokaalid\" VARCHAR(999)  ,\"aantekeningidversie\" VARCHAR(999)  ,\"aantekeningaardcode\" VARCHAR(999)  ,\"aantekeningaardwaarde\" VARCHAR(999)  ,\"aantekeningeinddatum\" VARCHAR(999)  ,\"aantekeningomschrijving\" VARCHAR(999)  ,primary key(\"aantekeningid\"))");
                    }
                }
	    String insert_tPostgresPlusOutput_1 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_1 + "\" (\"kdoreferentie\",\"toestandsdatum\",\"aantekeningid\",\"aantekeningidnamespace\",\"aantekeningidlokaalid\",\"aantekeningidversie\",\"aantekeningaardcode\",\"aantekeningaardwaarde\",\"aantekeningeinddatum\",\"aantekeningomschrijving\") VALUES (?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.prepareStatement(insert_tPostgresPlusOutput_1);
	    resourceMap.put("pstmt_tPostgresPlusOutput_1", pstmt_tPostgresPlusOutput_1);
	    

 



/**
 * [tPostgresPlusOutput_1 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_3", false);
		start_Hash.put("tPostgresPlusOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("aantekeningkdo"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_3 = 0;
		
	





String dbschema_tPostgresPlusOutput_3 = null;
	dbschema_tPostgresPlusOutput_3 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_3 = null;
if(dbschema_tPostgresPlusOutput_3 == null || dbschema_tPostgresPlusOutput_3.trim().length() == 0) {
	tableName_tPostgresPlusOutput_3 = "brk_aantekening_kdo";
} else {
	tableName_tPostgresPlusOutput_3 = dbschema_tPostgresPlusOutput_3 + "\".\"" + "brk_aantekening_kdo";
}

int nb_line_tPostgresPlusOutput_3 = 0;
int nb_line_update_tPostgresPlusOutput_3 = 0;
int nb_line_inserted_tPostgresPlusOutput_3 = 0;
int nb_line_deleted_tPostgresPlusOutput_3 = 0;
int nb_line_rejected_tPostgresPlusOutput_3 = 0;

int deletedCount_tPostgresPlusOutput_3=0;
int updatedCount_tPostgresPlusOutput_3=0;
int insertedCount_tPostgresPlusOutput_3=0;
int rejectedCount_tPostgresPlusOutput_3=0;

boolean whetherReject_tPostgresPlusOutput_3 = false;


java.sql.Connection conn_tPostgresPlusOutput_3 = null;
	conn_tPostgresPlusOutput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_3 = conn_tPostgresPlusOutput_3.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_3 = false;
            String defaultSchema_tPostgresPlusOutput_3 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_3 = dbMetaData_tPostgresPlusOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_3 == null || dbschema_tPostgresPlusOutput_3.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_3 = conn_tPostgresPlusOutput_3.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_3 = stmtSchema_tPostgresPlusOutput_3.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_3.next()){
                            defaultSchema_tPostgresPlusOutput_3 = rsSchema_tPostgresPlusOutput_3.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_3.next()) {
                    String table_tPostgresPlusOutput_3 = rsTable_tPostgresPlusOutput_3.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_3 = rsTable_tPostgresPlusOutput_3.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_3.equals("brk_aantekening_kdo")
                        && (schema_tPostgresPlusOutput_3.equals(dbschema_tPostgresPlusOutput_3) || ((dbschema_tPostgresPlusOutput_3 == null || dbschema_tPostgresPlusOutput_3.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_3.equals(schema_tPostgresPlusOutput_3)))) {
                        whetherExist_tPostgresPlusOutput_3 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_3) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_3 = conn_tPostgresPlusOutput_3.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_3.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_3 + "\"(\"kdoreferentie\" VARCHAR ,\"aantekeningid\" VARCHAR(999)  ,\"perceeltype\" VARCHAR(999)  ,\"perceelhref\" VARCHAR(999)  ,\"appartementsrechttype\" VARCHAR(999)  ,\"appartementsrechthref\" VARCHAR(999)  )");
                    }
                }
	    String insert_tPostgresPlusOutput_3 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_3 + "\" (\"kdoreferentie\",\"aantekeningid\",\"perceeltype\",\"perceelhref\",\"appartementsrechttype\",\"appartementsrechthref\") VALUES (?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_3 = conn_tPostgresPlusOutput_3.prepareStatement(insert_tPostgresPlusOutput_3);
	    resourceMap.put("pstmt_tPostgresPlusOutput_3", pstmt_tPostgresPlusOutput_3);
	    

 



/**
 * [tPostgresPlusOutput_3 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_2", false);
		start_Hash.put("tPostgresPlusOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("aantekeningrecht"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_2 = 0;
		
	





String dbschema_tPostgresPlusOutput_2 = null;
	dbschema_tPostgresPlusOutput_2 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_2 = null;
if(dbschema_tPostgresPlusOutput_2 == null || dbschema_tPostgresPlusOutput_2.trim().length() == 0) {
	tableName_tPostgresPlusOutput_2 = "brk_aantekening_recht";
} else {
	tableName_tPostgresPlusOutput_2 = dbschema_tPostgresPlusOutput_2 + "\".\"" + "brk_aantekening_recht";
}

int nb_line_tPostgresPlusOutput_2 = 0;
int nb_line_update_tPostgresPlusOutput_2 = 0;
int nb_line_inserted_tPostgresPlusOutput_2 = 0;
int nb_line_deleted_tPostgresPlusOutput_2 = 0;
int nb_line_rejected_tPostgresPlusOutput_2 = 0;

int deletedCount_tPostgresPlusOutput_2=0;
int updatedCount_tPostgresPlusOutput_2=0;
int insertedCount_tPostgresPlusOutput_2=0;
int rejectedCount_tPostgresPlusOutput_2=0;

boolean whetherReject_tPostgresPlusOutput_2 = false;


java.sql.Connection conn_tPostgresPlusOutput_2 = null;
	conn_tPostgresPlusOutput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_2 = conn_tPostgresPlusOutput_2.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_2 = false;
            String defaultSchema_tPostgresPlusOutput_2 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_2 = dbMetaData_tPostgresPlusOutput_2.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_2 == null || dbschema_tPostgresPlusOutput_2.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_2 = conn_tPostgresPlusOutput_2.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_2 = stmtSchema_tPostgresPlusOutput_2.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_2.next()){
                            defaultSchema_tPostgresPlusOutput_2 = rsSchema_tPostgresPlusOutput_2.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_2.next()) {
                    String table_tPostgresPlusOutput_2 = rsTable_tPostgresPlusOutput_2.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_2 = rsTable_tPostgresPlusOutput_2.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_2.equals("brk_aantekening_recht")
                        && (schema_tPostgresPlusOutput_2.equals(dbschema_tPostgresPlusOutput_2) || ((dbschema_tPostgresPlusOutput_2 == null || dbschema_tPostgresPlusOutput_2.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_2.equals(schema_tPostgresPlusOutput_2)))) {
                        whetherExist_tPostgresPlusOutput_2 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_2) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_2 = conn_tPostgresPlusOutput_2.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_2.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_2 + "\"(\"kdoreferentie\" VARCHAR ,\"aantekeningid\" VARCHAR(999)  ,\"tennamstellingtype\" VARCHAR(999)  ,\"tennaamstellinghref\" VARCHAR(999)  )");
                    }
                }
	    String insert_tPostgresPlusOutput_2 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_2 + "\" (\"kdoreferentie\",\"aantekeningid\",\"tennamstellingtype\",\"tennaamstellinghref\") VALUES (?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_2 = conn_tPostgresPlusOutput_2.prepareStatement(insert_tPostgresPlusOutput_2);
	    resourceMap.put("pstmt_tPostgresPlusOutput_2", pstmt_tPostgresPlusOutput_2);
	    

 



/**
 * [tPostgresPlusOutput_2 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_4", false);
		start_Hash.put("tPostgresPlusOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("stukdeel"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_4 = 0;
		
	





String dbschema_tPostgresPlusOutput_4 = null;
	dbschema_tPostgresPlusOutput_4 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_4 = null;
if(dbschema_tPostgresPlusOutput_4 == null || dbschema_tPostgresPlusOutput_4.trim().length() == 0) {
	tableName_tPostgresPlusOutput_4 = "brk_aantekening_stukdeel";
} else {
	tableName_tPostgresPlusOutput_4 = dbschema_tPostgresPlusOutput_4 + "\".\"" + "brk_aantekening_stukdeel";
}

int nb_line_tPostgresPlusOutput_4 = 0;
int nb_line_update_tPostgresPlusOutput_4 = 0;
int nb_line_inserted_tPostgresPlusOutput_4 = 0;
int nb_line_deleted_tPostgresPlusOutput_4 = 0;
int nb_line_rejected_tPostgresPlusOutput_4 = 0;

int deletedCount_tPostgresPlusOutput_4=0;
int updatedCount_tPostgresPlusOutput_4=0;
int insertedCount_tPostgresPlusOutput_4=0;
int rejectedCount_tPostgresPlusOutput_4=0;

boolean whetherReject_tPostgresPlusOutput_4 = false;


java.sql.Connection conn_tPostgresPlusOutput_4 = null;
	conn_tPostgresPlusOutput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_4 = conn_tPostgresPlusOutput_4.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_4 = false;
            String defaultSchema_tPostgresPlusOutput_4 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_4 = dbMetaData_tPostgresPlusOutput_4.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_4 == null || dbschema_tPostgresPlusOutput_4.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_4 = conn_tPostgresPlusOutput_4.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_4 = stmtSchema_tPostgresPlusOutput_4.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_4.next()){
                            defaultSchema_tPostgresPlusOutput_4 = rsSchema_tPostgresPlusOutput_4.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_4.next()) {
                    String table_tPostgresPlusOutput_4 = rsTable_tPostgresPlusOutput_4.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_4 = rsTable_tPostgresPlusOutput_4.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_4.equals("brk_aantekening_stukdeel")
                        && (schema_tPostgresPlusOutput_4.equals(dbschema_tPostgresPlusOutput_4) || ((dbschema_tPostgresPlusOutput_4 == null || dbschema_tPostgresPlusOutput_4.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_4.equals(schema_tPostgresPlusOutput_4)))) {
                        whetherExist_tPostgresPlusOutput_4 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_4) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_4 = conn_tPostgresPlusOutput_4.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_4.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_4 + "\"(\"kdoreferentie\" VARCHAR ,\"aantekeningid\" VARCHAR(999)  ,\"type\" VARCHAR(999)  ,\"href\" VARCHAR(999)  )");
                    }
                }
	    String insert_tPostgresPlusOutput_4 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_4 + "\" (\"kdoreferentie\",\"aantekeningid\",\"type\",\"href\") VALUES (?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_4 = conn_tPostgresPlusOutput_4.prepareStatement(insert_tPostgresPlusOutput_4);
	    resourceMap.put("pstmt_tPostgresPlusOutput_4", pstmt_tPostgresPlusOutput_4);
	    

 



/**
 * [tPostgresPlusOutput_4 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_6", false);
		start_Hash.put("tPostgresPlusOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("rechtspersoon"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_6 = 0;
		
	





String dbschema_tPostgresPlusOutput_6 = null;
	dbschema_tPostgresPlusOutput_6 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_6 = null;
if(dbschema_tPostgresPlusOutput_6 == null || dbschema_tPostgresPlusOutput_6.trim().length() == 0) {
	tableName_tPostgresPlusOutput_6 = "brk_aantekening_prs";
} else {
	tableName_tPostgresPlusOutput_6 = dbschema_tPostgresPlusOutput_6 + "\".\"" + "brk_aantekening_prs";
}

int nb_line_tPostgresPlusOutput_6 = 0;
int nb_line_update_tPostgresPlusOutput_6 = 0;
int nb_line_inserted_tPostgresPlusOutput_6 = 0;
int nb_line_deleted_tPostgresPlusOutput_6 = 0;
int nb_line_rejected_tPostgresPlusOutput_6 = 0;

int deletedCount_tPostgresPlusOutput_6=0;
int updatedCount_tPostgresPlusOutput_6=0;
int insertedCount_tPostgresPlusOutput_6=0;
int rejectedCount_tPostgresPlusOutput_6=0;

boolean whetherReject_tPostgresPlusOutput_6 = false;


java.sql.Connection conn_tPostgresPlusOutput_6 = null;
	conn_tPostgresPlusOutput_6 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_6 = conn_tPostgresPlusOutput_6.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_6 = false;
            String defaultSchema_tPostgresPlusOutput_6 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_6 = dbMetaData_tPostgresPlusOutput_6.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_6 == null || dbschema_tPostgresPlusOutput_6.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_6 = conn_tPostgresPlusOutput_6.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_6 = stmtSchema_tPostgresPlusOutput_6.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_6.next()){
                            defaultSchema_tPostgresPlusOutput_6 = rsSchema_tPostgresPlusOutput_6.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_6.next()) {
                    String table_tPostgresPlusOutput_6 = rsTable_tPostgresPlusOutput_6.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_6 = rsTable_tPostgresPlusOutput_6.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_6.equals("brk_aantekening_prs")
                        && (schema_tPostgresPlusOutput_6.equals(dbschema_tPostgresPlusOutput_6) || ((dbschema_tPostgresPlusOutput_6 == null || dbschema_tPostgresPlusOutput_6.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_6.equals(schema_tPostgresPlusOutput_6)))) {
                        whetherExist_tPostgresPlusOutput_6 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_6) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_6 = conn_tPostgresPlusOutput_6.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_6.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_6 + "\"(\"kdoreferentie\" VARCHAR ,\"aantekeningid\" VARCHAR(999)  ,\"soortprs\" VARCHAR(999)  ,\"type\" VARCHAR(999)  ,\"href\" VARCHAR(999)  )");
                    }
                }
	    String insert_tPostgresPlusOutput_6 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_6 + "\" (\"kdoreferentie\",\"aantekeningid\",\"soortprs\",\"type\",\"href\") VALUES (?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_6 = conn_tPostgresPlusOutput_6.prepareStatement(insert_tPostgresPlusOutput_6);
	    resourceMap.put("pstmt_tPostgresPlusOutput_6", pstmt_tPostgresPlusOutput_6);
	    

 



/**
 * [tPostgresPlusOutput_6 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_7", false);
		start_Hash.put("tPostgresPlusOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("kadnnp"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_7 = 0;
		
	





String dbschema_tPostgresPlusOutput_7 = null;
	dbschema_tPostgresPlusOutput_7 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_7 = null;
if(dbschema_tPostgresPlusOutput_7 == null || dbschema_tPostgresPlusOutput_7.trim().length() == 0) {
	tableName_tPostgresPlusOutput_7 = "brk_aantekening_prs";
} else {
	tableName_tPostgresPlusOutput_7 = dbschema_tPostgresPlusOutput_7 + "\".\"" + "brk_aantekening_prs";
}

int nb_line_tPostgresPlusOutput_7 = 0;
int nb_line_update_tPostgresPlusOutput_7 = 0;
int nb_line_inserted_tPostgresPlusOutput_7 = 0;
int nb_line_deleted_tPostgresPlusOutput_7 = 0;
int nb_line_rejected_tPostgresPlusOutput_7 = 0;

int deletedCount_tPostgresPlusOutput_7=0;
int updatedCount_tPostgresPlusOutput_7=0;
int insertedCount_tPostgresPlusOutput_7=0;
int rejectedCount_tPostgresPlusOutput_7=0;

boolean whetherReject_tPostgresPlusOutput_7 = false;


java.sql.Connection conn_tPostgresPlusOutput_7 = null;
	conn_tPostgresPlusOutput_7 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

	    String insert_tPostgresPlusOutput_7 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_7 + "\" (\"kdoreferentie\",\"aantekeningid\",\"soortprs\",\"type\",\"href\") VALUES (?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_7 = conn_tPostgresPlusOutput_7.prepareStatement(insert_tPostgresPlusOutput_7);
	    resourceMap.put("pstmt_tPostgresPlusOutput_7", pstmt_tPostgresPlusOutput_7);
	    

 



/**
 * [tPostgresPlusOutput_7 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_9", false);
		start_Hash.put("tPostgresPlusOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("kadpersoon"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_9 = 0;
		
	





String dbschema_tPostgresPlusOutput_9 = null;
	dbschema_tPostgresPlusOutput_9 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_9 = null;
if(dbschema_tPostgresPlusOutput_9 == null || dbschema_tPostgresPlusOutput_9.trim().length() == 0) {
	tableName_tPostgresPlusOutput_9 = "brk_aantekening_prs";
} else {
	tableName_tPostgresPlusOutput_9 = dbschema_tPostgresPlusOutput_9 + "\".\"" + "brk_aantekening_prs";
}

int nb_line_tPostgresPlusOutput_9 = 0;
int nb_line_update_tPostgresPlusOutput_9 = 0;
int nb_line_inserted_tPostgresPlusOutput_9 = 0;
int nb_line_deleted_tPostgresPlusOutput_9 = 0;
int nb_line_rejected_tPostgresPlusOutput_9 = 0;

int deletedCount_tPostgresPlusOutput_9=0;
int updatedCount_tPostgresPlusOutput_9=0;
int insertedCount_tPostgresPlusOutput_9=0;
int rejectedCount_tPostgresPlusOutput_9=0;

boolean whetherReject_tPostgresPlusOutput_9 = false;


java.sql.Connection conn_tPostgresPlusOutput_9 = null;
	conn_tPostgresPlusOutput_9 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

	    String insert_tPostgresPlusOutput_9 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_9 + "\" (\"kdoreferentie\",\"aantekeningid\",\"soortprs\",\"type\",\"href\") VALUES (?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_9 = conn_tPostgresPlusOutput_9.prepareStatement(insert_tPostgresPlusOutput_9);
	    resourceMap.put("pstmt_tPostgresPlusOutput_9", pstmt_tPostgresPlusOutput_9);
	    

 



/**
 * [tPostgresPlusOutput_9 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_12", false);
		start_Hash.put("tPostgresPlusOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("ingezetene"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_12 = 0;
		
	





String dbschema_tPostgresPlusOutput_12 = null;
	dbschema_tPostgresPlusOutput_12 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_12 = null;
if(dbschema_tPostgresPlusOutput_12 == null || dbschema_tPostgresPlusOutput_12.trim().length() == 0) {
	tableName_tPostgresPlusOutput_12 = "brk_aantekening_prs";
} else {
	tableName_tPostgresPlusOutput_12 = dbschema_tPostgresPlusOutput_12 + "\".\"" + "brk_aantekening_prs";
}

int nb_line_tPostgresPlusOutput_12 = 0;
int nb_line_update_tPostgresPlusOutput_12 = 0;
int nb_line_inserted_tPostgresPlusOutput_12 = 0;
int nb_line_deleted_tPostgresPlusOutput_12 = 0;
int nb_line_rejected_tPostgresPlusOutput_12 = 0;

int deletedCount_tPostgresPlusOutput_12=0;
int updatedCount_tPostgresPlusOutput_12=0;
int insertedCount_tPostgresPlusOutput_12=0;
int rejectedCount_tPostgresPlusOutput_12=0;

boolean whetherReject_tPostgresPlusOutput_12 = false;


java.sql.Connection conn_tPostgresPlusOutput_12 = null;
	conn_tPostgresPlusOutput_12 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

	    String insert_tPostgresPlusOutput_12 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_12 + "\" (\"kdoreferentie\",\"aantekeningid\",\"soortprs\",\"type\",\"href\") VALUES (?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_12 = conn_tPostgresPlusOutput_12.prepareStatement(insert_tPostgresPlusOutput_12);
	    resourceMap.put("pstmt_tPostgresPlusOutput_12", pstmt_tPostgresPlusOutput_12);
	    

 



/**
 * [tPostgresPlusOutput_12 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_10", false);
		start_Hash.put("tPostgresPlusOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("nietingezetene"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_10 = 0;
		
	





String dbschema_tPostgresPlusOutput_10 = null;
	dbschema_tPostgresPlusOutput_10 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_10 = null;
if(dbschema_tPostgresPlusOutput_10 == null || dbschema_tPostgresPlusOutput_10.trim().length() == 0) {
	tableName_tPostgresPlusOutput_10 = "brk_aantekening_prs";
} else {
	tableName_tPostgresPlusOutput_10 = dbschema_tPostgresPlusOutput_10 + "\".\"" + "brk_aantekening_prs";
}

int nb_line_tPostgresPlusOutput_10 = 0;
int nb_line_update_tPostgresPlusOutput_10 = 0;
int nb_line_inserted_tPostgresPlusOutput_10 = 0;
int nb_line_deleted_tPostgresPlusOutput_10 = 0;
int nb_line_rejected_tPostgresPlusOutput_10 = 0;

int deletedCount_tPostgresPlusOutput_10=0;
int updatedCount_tPostgresPlusOutput_10=0;
int insertedCount_tPostgresPlusOutput_10=0;
int rejectedCount_tPostgresPlusOutput_10=0;

boolean whetherReject_tPostgresPlusOutput_10 = false;


java.sql.Connection conn_tPostgresPlusOutput_10 = null;
	conn_tPostgresPlusOutput_10 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

	    String insert_tPostgresPlusOutput_10 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_10 + "\" (\"kdoreferentie\",\"aantekeningid\",\"soortprs\",\"type\",\"href\") VALUES (?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_10 = conn_tPostgresPlusOutput_10.prepareStatement(insert_tPostgresPlusOutput_10);
	    resourceMap.put("pstmt_tPostgresPlusOutput_10", pstmt_tPostgresPlusOutput_10);
	    

 



/**
 * [tPostgresPlusOutput_10 begin ] stop
 */



	
	/**
	 * [tXMLMap_3_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_3_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	
		int tos_count_tXMLMap_3_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_3 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_3");
for(Object  row_out_tXMLMap_3_TXMLMAP_IN : outs_tXMLMap_3) {//TD512
 



/**
 * [tXMLMap_3_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

	out1 = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof out1Struct) {
		out1 = (out1Struct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
	aantekeningkdo = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof aantekeningkdoStruct) {
		aantekeningkdo = (aantekeningkdoStruct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
	aantekeningrecht = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof aantekeningrechtStruct) {
		aantekeningrecht = (aantekeningrechtStruct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
	stukdeel = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof stukdeelStruct) {
		stukdeel = (stukdeelStruct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
	rechtspersoon = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof rechtspersoonStruct) {
		rechtspersoon = (rechtspersoonStruct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
	kadnnp = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof kadnnpStruct) {
		kadnnp = (kadnnpStruct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
	kadpersoon = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof kadpersoonStruct) {
		kadpersoon = (kadpersoonStruct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
	ingezetene = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof ingezeteneStruct) {
		ingezetene = (ingezeteneStruct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
	nietingezetene = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof nietingezeteneStruct) {
		nietingezetene = (nietingezeteneStruct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_3_TXMLMAP_IN++;

/**
 * [tXMLMap_3_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tPostgresPlusOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	

			//out1
			//out1


			
				
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_1 = false;
                    if(out1.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(1, out1.kdoreferentie);
}

                    if(out1.toestandsdatum == null) {
pstmt_tPostgresPlusOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(2, out1.toestandsdatum);
}

                    if(out1.aantekeningid == null) {
pstmt_tPostgresPlusOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(3, out1.aantekeningid);
}

                    if(out1.aantekeningidnamespace == null) {
pstmt_tPostgresPlusOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(4, out1.aantekeningidnamespace);
}

                    if(out1.aantekeningidlokaalid == null) {
pstmt_tPostgresPlusOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(5, out1.aantekeningidlokaalid);
}

                    if(out1.aantekeningidversie == null) {
pstmt_tPostgresPlusOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(6, out1.aantekeningidversie);
}

                    if(out1.aantekeningaardcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(7, out1.aantekeningaardcode);
}

                    if(out1.aantekeningaardwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(8, out1.aantekeningaardwaarde);
}

                    if(out1.aantekeningeinddatum == null) {
pstmt_tPostgresPlusOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(9, out1.aantekeningeinddatum);
}

                    if(out1.aantekeningomschrijving == null) {
pstmt_tPostgresPlusOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(10, out1.aantekeningomschrijving);
}


                       try {
                           insertedCount_tPostgresPlusOutput_1 = insertedCount_tPostgresPlusOutput_1 + pstmt_tPostgresPlusOutput_1.executeUpdate();
                           nb_line_tPostgresPlusOutput_1++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_1 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_1) {
            }

 


	tos_count_tPostgresPlusOutput_1++;

/**
 * [tPostgresPlusOutput_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	

 



/**
 * [tPostgresPlusOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	

 



/**
 * [tPostgresPlusOutput_1 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "aantekeningkdo"
if(aantekeningkdo != null) { 



	
	/**
	 * [tPostgresPlusOutput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_3";

	

			//aantekeningkdo
			//aantekeningkdo


			
				
				if(execStat){
					runStat.updateStatOnConnection("aantekeningkdo"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_3 = false;
                    if(aantekeningkdo.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(1, aantekeningkdo.kdoreferentie);
}

                    if(aantekeningkdo.aantekeningid == null) {
pstmt_tPostgresPlusOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(2, aantekeningkdo.aantekeningid);
}

                    if(aantekeningkdo.perceeltype == null) {
pstmt_tPostgresPlusOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(3, aantekeningkdo.perceeltype);
}

                    if(aantekeningkdo.perceelhref == null) {
pstmt_tPostgresPlusOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(4, aantekeningkdo.perceelhref);
}

                    if(aantekeningkdo.appartementsrechttype == null) {
pstmt_tPostgresPlusOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(5, aantekeningkdo.appartementsrechttype);
}

                    if(aantekeningkdo.appartementsrechthref == null) {
pstmt_tPostgresPlusOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(6, aantekeningkdo.appartementsrechthref);
}


                       try {
                           insertedCount_tPostgresPlusOutput_3 = insertedCount_tPostgresPlusOutput_3 + pstmt_tPostgresPlusOutput_3.executeUpdate();
                           nb_line_tPostgresPlusOutput_3++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_3 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_3) {
            }

 


	tos_count_tPostgresPlusOutput_3++;

/**
 * [tPostgresPlusOutput_3 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_3";

	

 



/**
 * [tPostgresPlusOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_3";

	

 



/**
 * [tPostgresPlusOutput_3 process_data_end ] stop
 */

} // End of branch "aantekeningkdo"




// Start of branch "aantekeningrecht"
if(aantekeningrecht != null) { 



	
	/**
	 * [tPostgresPlusOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_2";

	

			//aantekeningrecht
			//aantekeningrecht


			
				
				if(execStat){
					runStat.updateStatOnConnection("aantekeningrecht"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_2 = false;
                    if(aantekeningrecht.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(1, aantekeningrecht.kdoreferentie);
}

                    if(aantekeningrecht.aantekeningid == null) {
pstmt_tPostgresPlusOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(2, aantekeningrecht.aantekeningid);
}

                    if(aantekeningrecht.tennamstellingtype == null) {
pstmt_tPostgresPlusOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(3, aantekeningrecht.tennamstellingtype);
}

                    if(aantekeningrecht.tennaamstellinghref == null) {
pstmt_tPostgresPlusOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(4, aantekeningrecht.tennaamstellinghref);
}


                       try {
                           insertedCount_tPostgresPlusOutput_2 = insertedCount_tPostgresPlusOutput_2 + pstmt_tPostgresPlusOutput_2.executeUpdate();
                           nb_line_tPostgresPlusOutput_2++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_2 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_2) {
            }

 


	tos_count_tPostgresPlusOutput_2++;

/**
 * [tPostgresPlusOutput_2 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_2";

	

 



/**
 * [tPostgresPlusOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_2";

	

 



/**
 * [tPostgresPlusOutput_2 process_data_end ] stop
 */

} // End of branch "aantekeningrecht"




// Start of branch "stukdeel"
if(stukdeel != null) { 



	
	/**
	 * [tPostgresPlusOutput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_4";

	

			//stukdeel
			//stukdeel


			
				
				if(execStat){
					runStat.updateStatOnConnection("stukdeel"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_4 = false;
                    if(stukdeel.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_4.setString(1, stukdeel.kdoreferentie);
}

                    if(stukdeel.aantekeningid == null) {
pstmt_tPostgresPlusOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_4.setString(2, stukdeel.aantekeningid);
}

                    if(stukdeel.type == null) {
pstmt_tPostgresPlusOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_4.setString(3, stukdeel.type);
}

                    if(stukdeel.href == null) {
pstmt_tPostgresPlusOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_4.setString(4, stukdeel.href);
}


                       try {
                           insertedCount_tPostgresPlusOutput_4 = insertedCount_tPostgresPlusOutput_4 + pstmt_tPostgresPlusOutput_4.executeUpdate();
                           nb_line_tPostgresPlusOutput_4++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_4 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_4) {
            }

 


	tos_count_tPostgresPlusOutput_4++;

/**
 * [tPostgresPlusOutput_4 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_4";

	

 



/**
 * [tPostgresPlusOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_4";

	

 



/**
 * [tPostgresPlusOutput_4 process_data_end ] stop
 */

} // End of branch "stukdeel"




// Start of branch "rechtspersoon"
if(rechtspersoon != null) { 



	
	/**
	 * [tPostgresPlusOutput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_6";

	

			//rechtspersoon
			//rechtspersoon


			
				
				if(execStat){
					runStat.updateStatOnConnection("rechtspersoon"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_6 = false;
                    if(rechtspersoon.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(1, rechtspersoon.kdoreferentie);
}

                    if(rechtspersoon.aantekeningid == null) {
pstmt_tPostgresPlusOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(2, rechtspersoon.aantekeningid);
}

                    if(rechtspersoon.soortprs == null) {
pstmt_tPostgresPlusOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(3, rechtspersoon.soortprs);
}

                    if(rechtspersoon.type == null) {
pstmt_tPostgresPlusOutput_6.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(4, rechtspersoon.type);
}

                    if(rechtspersoon.href == null) {
pstmt_tPostgresPlusOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(5, rechtspersoon.href);
}


                       try {
                           insertedCount_tPostgresPlusOutput_6 = insertedCount_tPostgresPlusOutput_6 + pstmt_tPostgresPlusOutput_6.executeUpdate();
                           nb_line_tPostgresPlusOutput_6++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_6 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_6) {
            }

 


	tos_count_tPostgresPlusOutput_6++;

/**
 * [tPostgresPlusOutput_6 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_6";

	

 



/**
 * [tPostgresPlusOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_6";

	

 



/**
 * [tPostgresPlusOutput_6 process_data_end ] stop
 */

} // End of branch "rechtspersoon"




// Start of branch "kadnnp"
if(kadnnp != null) { 



	
	/**
	 * [tPostgresPlusOutput_7 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_7";

	

			//kadnnp
			//kadnnp


			
				
				if(execStat){
					runStat.updateStatOnConnection("kadnnp"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_7 = false;
                    if(kadnnp.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_7.setString(1, kadnnp.kdoreferentie);
}

                    if(kadnnp.aantekeningid == null) {
pstmt_tPostgresPlusOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_7.setString(2, kadnnp.aantekeningid);
}

                    if(kadnnp.soortprs == null) {
pstmt_tPostgresPlusOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_7.setString(3, kadnnp.soortprs);
}

                    if(kadnnp.type == null) {
pstmt_tPostgresPlusOutput_7.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_7.setString(4, kadnnp.type);
}

                    if(kadnnp.href == null) {
pstmt_tPostgresPlusOutput_7.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_7.setString(5, kadnnp.href);
}


                       try {
                           insertedCount_tPostgresPlusOutput_7 = insertedCount_tPostgresPlusOutput_7 + pstmt_tPostgresPlusOutput_7.executeUpdate();
                           nb_line_tPostgresPlusOutput_7++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_7 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_7) {
            }

 


	tos_count_tPostgresPlusOutput_7++;

/**
 * [tPostgresPlusOutput_7 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_7";

	

 



/**
 * [tPostgresPlusOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_7";

	

 



/**
 * [tPostgresPlusOutput_7 process_data_end ] stop
 */

} // End of branch "kadnnp"




// Start of branch "kadpersoon"
if(kadpersoon != null) { 



	
	/**
	 * [tPostgresPlusOutput_9 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_9";

	

			//kadpersoon
			//kadpersoon


			
				
				if(execStat){
					runStat.updateStatOnConnection("kadpersoon"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_9 = false;
                    if(kadpersoon.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_9.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_9.setString(1, kadpersoon.kdoreferentie);
}

                    if(kadpersoon.aantekeningid == null) {
pstmt_tPostgresPlusOutput_9.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_9.setString(2, kadpersoon.aantekeningid);
}

                    if(kadpersoon.soortprs == null) {
pstmt_tPostgresPlusOutput_9.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_9.setString(3, kadpersoon.soortprs);
}

                    if(kadpersoon.type == null) {
pstmt_tPostgresPlusOutput_9.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_9.setString(4, kadpersoon.type);
}

                    if(kadpersoon.href == null) {
pstmt_tPostgresPlusOutput_9.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_9.setString(5, kadpersoon.href);
}


                       try {
                           insertedCount_tPostgresPlusOutput_9 = insertedCount_tPostgresPlusOutput_9 + pstmt_tPostgresPlusOutput_9.executeUpdate();
                           nb_line_tPostgresPlusOutput_9++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_9 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_9) {
            }

 


	tos_count_tPostgresPlusOutput_9++;

/**
 * [tPostgresPlusOutput_9 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_9";

	

 



/**
 * [tPostgresPlusOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_9";

	

 



/**
 * [tPostgresPlusOutput_9 process_data_end ] stop
 */

} // End of branch "kadpersoon"




// Start of branch "ingezetene"
if(ingezetene != null) { 



	
	/**
	 * [tPostgresPlusOutput_12 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_12";

	

			//ingezetene
			//ingezetene


			
				
				if(execStat){
					runStat.updateStatOnConnection("ingezetene"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_12 = false;
                    if(ingezetene.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_12.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_12.setString(1, ingezetene.kdoreferentie);
}

                    if(ingezetene.aantekeningid == null) {
pstmt_tPostgresPlusOutput_12.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_12.setString(2, ingezetene.aantekeningid);
}

                    if(ingezetene.soortprs == null) {
pstmt_tPostgresPlusOutput_12.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_12.setString(3, ingezetene.soortprs);
}

                    if(ingezetene.type == null) {
pstmt_tPostgresPlusOutput_12.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_12.setString(4, ingezetene.type);
}

                    if(ingezetene.href == null) {
pstmt_tPostgresPlusOutput_12.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_12.setString(5, ingezetene.href);
}


                       try {
                           insertedCount_tPostgresPlusOutput_12 = insertedCount_tPostgresPlusOutput_12 + pstmt_tPostgresPlusOutput_12.executeUpdate();
                           nb_line_tPostgresPlusOutput_12++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_12 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_12) {
            }

 


	tos_count_tPostgresPlusOutput_12++;

/**
 * [tPostgresPlusOutput_12 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_12";

	

 



/**
 * [tPostgresPlusOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_12";

	

 



/**
 * [tPostgresPlusOutput_12 process_data_end ] stop
 */

} // End of branch "ingezetene"




// Start of branch "nietingezetene"
if(nietingezetene != null) { 



	
	/**
	 * [tPostgresPlusOutput_10 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_10";

	

			//nietingezetene
			//nietingezetene


			
				
				if(execStat){
					runStat.updateStatOnConnection("nietingezetene"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_10 = false;
                    if(nietingezetene.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_10.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_10.setString(1, nietingezetene.kdoreferentie);
}

                    if(nietingezetene.aantekeningid == null) {
pstmt_tPostgresPlusOutput_10.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_10.setString(2, nietingezetene.aantekeningid);
}

                    if(nietingezetene.soortprs == null) {
pstmt_tPostgresPlusOutput_10.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_10.setString(3, nietingezetene.soortprs);
}

                    if(nietingezetene.type == null) {
pstmt_tPostgresPlusOutput_10.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_10.setString(4, nietingezetene.type);
}

                    if(nietingezetene.href == null) {
pstmt_tPostgresPlusOutput_10.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_10.setString(5, nietingezetene.href);
}


                       try {
                           insertedCount_tPostgresPlusOutput_10 = insertedCount_tPostgresPlusOutput_10 + pstmt_tPostgresPlusOutput_10.executeUpdate();
                           nb_line_tPostgresPlusOutput_10++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_10 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_10) {
            }

 


	tos_count_tPostgresPlusOutput_10++;

/**
 * [tPostgresPlusOutput_10 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_10";

	

 



/**
 * [tPostgresPlusOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_10";

	

 



/**
 * [tPostgresPlusOutput_10 process_data_end ] stop
 */

} // End of branch "nietingezetene"




	
	/**
	 * [tXMLMap_3_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_3_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_3_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tPostgresPlusOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	



        if(pstmt_tPostgresPlusOutput_1 != null) {
            pstmt_tPostgresPlusOutput_1.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_1");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_1", true);

	nb_line_deleted_tPostgresPlusOutput_1=nb_line_deleted_tPostgresPlusOutput_1+ deletedCount_tPostgresPlusOutput_1;
	nb_line_update_tPostgresPlusOutput_1=nb_line_update_tPostgresPlusOutput_1 + updatedCount_tPostgresPlusOutput_1;
	nb_line_inserted_tPostgresPlusOutput_1=nb_line_inserted_tPostgresPlusOutput_1 + insertedCount_tPostgresPlusOutput_1;
	nb_line_rejected_tPostgresPlusOutput_1=nb_line_rejected_tPostgresPlusOutput_1 + rejectedCount_tPostgresPlusOutput_1;
	
        globalMap.put("tPostgresPlusOutput_1_NB_LINE",nb_line_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_1);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("out1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_1", true);
end_Hash.put("tPostgresPlusOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostgresPlusOutput_1 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_3";

	



        if(pstmt_tPostgresPlusOutput_3 != null) {
            pstmt_tPostgresPlusOutput_3.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_3");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_3", true);

	nb_line_deleted_tPostgresPlusOutput_3=nb_line_deleted_tPostgresPlusOutput_3+ deletedCount_tPostgresPlusOutput_3;
	nb_line_update_tPostgresPlusOutput_3=nb_line_update_tPostgresPlusOutput_3 + updatedCount_tPostgresPlusOutput_3;
	nb_line_inserted_tPostgresPlusOutput_3=nb_line_inserted_tPostgresPlusOutput_3 + insertedCount_tPostgresPlusOutput_3;
	nb_line_rejected_tPostgresPlusOutput_3=nb_line_rejected_tPostgresPlusOutput_3 + rejectedCount_tPostgresPlusOutput_3;
	
        globalMap.put("tPostgresPlusOutput_3_NB_LINE",nb_line_tPostgresPlusOutput_3);
        globalMap.put("tPostgresPlusOutput_3_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_3);
        globalMap.put("tPostgresPlusOutput_3_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_3);
        globalMap.put("tPostgresPlusOutput_3_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_3);
        globalMap.put("tPostgresPlusOutput_3_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_3);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("aantekeningkdo"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_3", true);
end_Hash.put("tPostgresPlusOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tJava_7Process(globalMap);



/**
 * [tPostgresPlusOutput_3 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_2";

	



        if(pstmt_tPostgresPlusOutput_2 != null) {
            pstmt_tPostgresPlusOutput_2.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_2");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_2", true);

	nb_line_deleted_tPostgresPlusOutput_2=nb_line_deleted_tPostgresPlusOutput_2+ deletedCount_tPostgresPlusOutput_2;
	nb_line_update_tPostgresPlusOutput_2=nb_line_update_tPostgresPlusOutput_2 + updatedCount_tPostgresPlusOutput_2;
	nb_line_inserted_tPostgresPlusOutput_2=nb_line_inserted_tPostgresPlusOutput_2 + insertedCount_tPostgresPlusOutput_2;
	nb_line_rejected_tPostgresPlusOutput_2=nb_line_rejected_tPostgresPlusOutput_2 + rejectedCount_tPostgresPlusOutput_2;
	
        globalMap.put("tPostgresPlusOutput_2_NB_LINE",nb_line_tPostgresPlusOutput_2);
        globalMap.put("tPostgresPlusOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_2);
        globalMap.put("tPostgresPlusOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_2);
        globalMap.put("tPostgresPlusOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_2);
        globalMap.put("tPostgresPlusOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_2);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("aantekeningrecht"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_2", true);
end_Hash.put("tPostgresPlusOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tJava_9Process(globalMap);



/**
 * [tPostgresPlusOutput_2 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_4";

	



        if(pstmt_tPostgresPlusOutput_4 != null) {
            pstmt_tPostgresPlusOutput_4.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_4");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_4", true);

	nb_line_deleted_tPostgresPlusOutput_4=nb_line_deleted_tPostgresPlusOutput_4+ deletedCount_tPostgresPlusOutput_4;
	nb_line_update_tPostgresPlusOutput_4=nb_line_update_tPostgresPlusOutput_4 + updatedCount_tPostgresPlusOutput_4;
	nb_line_inserted_tPostgresPlusOutput_4=nb_line_inserted_tPostgresPlusOutput_4 + insertedCount_tPostgresPlusOutput_4;
	nb_line_rejected_tPostgresPlusOutput_4=nb_line_rejected_tPostgresPlusOutput_4 + rejectedCount_tPostgresPlusOutput_4;
	
        globalMap.put("tPostgresPlusOutput_4_NB_LINE",nb_line_tPostgresPlusOutput_4);
        globalMap.put("tPostgresPlusOutput_4_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_4);
        globalMap.put("tPostgresPlusOutput_4_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_4);
        globalMap.put("tPostgresPlusOutput_4_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_4);
        globalMap.put("tPostgresPlusOutput_4_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_4);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("stukdeel"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_4", true);
end_Hash.put("tPostgresPlusOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tJava_5Process(globalMap);



/**
 * [tPostgresPlusOutput_4 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_6";

	



        if(pstmt_tPostgresPlusOutput_6 != null) {
            pstmt_tPostgresPlusOutput_6.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_6");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_6", true);

	nb_line_deleted_tPostgresPlusOutput_6=nb_line_deleted_tPostgresPlusOutput_6+ deletedCount_tPostgresPlusOutput_6;
	nb_line_update_tPostgresPlusOutput_6=nb_line_update_tPostgresPlusOutput_6 + updatedCount_tPostgresPlusOutput_6;
	nb_line_inserted_tPostgresPlusOutput_6=nb_line_inserted_tPostgresPlusOutput_6 + insertedCount_tPostgresPlusOutput_6;
	nb_line_rejected_tPostgresPlusOutput_6=nb_line_rejected_tPostgresPlusOutput_6 + rejectedCount_tPostgresPlusOutput_6;
	
        globalMap.put("tPostgresPlusOutput_6_NB_LINE",nb_line_tPostgresPlusOutput_6);
        globalMap.put("tPostgresPlusOutput_6_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_6);
        globalMap.put("tPostgresPlusOutput_6_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_6);
        globalMap.put("tPostgresPlusOutput_6_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_6);
        globalMap.put("tPostgresPlusOutput_6_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_6);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("rechtspersoon"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_6", true);
end_Hash.put("tPostgresPlusOutput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_12Process(globalMap);



/**
 * [tPostgresPlusOutput_6 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_7 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_7";

	



        if(pstmt_tPostgresPlusOutput_7 != null) {
            pstmt_tPostgresPlusOutput_7.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_7");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_7", true);

	nb_line_deleted_tPostgresPlusOutput_7=nb_line_deleted_tPostgresPlusOutput_7+ deletedCount_tPostgresPlusOutput_7;
	nb_line_update_tPostgresPlusOutput_7=nb_line_update_tPostgresPlusOutput_7 + updatedCount_tPostgresPlusOutput_7;
	nb_line_inserted_tPostgresPlusOutput_7=nb_line_inserted_tPostgresPlusOutput_7 + insertedCount_tPostgresPlusOutput_7;
	nb_line_rejected_tPostgresPlusOutput_7=nb_line_rejected_tPostgresPlusOutput_7 + rejectedCount_tPostgresPlusOutput_7;
	
        globalMap.put("tPostgresPlusOutput_7_NB_LINE",nb_line_tPostgresPlusOutput_7);
        globalMap.put("tPostgresPlusOutput_7_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_7);
        globalMap.put("tPostgresPlusOutput_7_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_7);
        globalMap.put("tPostgresPlusOutput_7_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_7);
        globalMap.put("tPostgresPlusOutput_7_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_7);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("kadnnp"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_7", true);
end_Hash.put("tPostgresPlusOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tPostgresPlusOutput_7 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_9 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_9";

	



        if(pstmt_tPostgresPlusOutput_9 != null) {
            pstmt_tPostgresPlusOutput_9.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_9");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_9", true);

	nb_line_deleted_tPostgresPlusOutput_9=nb_line_deleted_tPostgresPlusOutput_9+ deletedCount_tPostgresPlusOutput_9;
	nb_line_update_tPostgresPlusOutput_9=nb_line_update_tPostgresPlusOutput_9 + updatedCount_tPostgresPlusOutput_9;
	nb_line_inserted_tPostgresPlusOutput_9=nb_line_inserted_tPostgresPlusOutput_9 + insertedCount_tPostgresPlusOutput_9;
	nb_line_rejected_tPostgresPlusOutput_9=nb_line_rejected_tPostgresPlusOutput_9 + rejectedCount_tPostgresPlusOutput_9;
	
        globalMap.put("tPostgresPlusOutput_9_NB_LINE",nb_line_tPostgresPlusOutput_9);
        globalMap.put("tPostgresPlusOutput_9_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_9);
        globalMap.put("tPostgresPlusOutput_9_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_9);
        globalMap.put("tPostgresPlusOutput_9_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_9);
        globalMap.put("tPostgresPlusOutput_9_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_9);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("kadpersoon"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_9", true);
end_Hash.put("tPostgresPlusOutput_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_13Process(globalMap);



/**
 * [tPostgresPlusOutput_9 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_12 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_12";

	



        if(pstmt_tPostgresPlusOutput_12 != null) {
            pstmt_tPostgresPlusOutput_12.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_12");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_12", true);

	nb_line_deleted_tPostgresPlusOutput_12=nb_line_deleted_tPostgresPlusOutput_12+ deletedCount_tPostgresPlusOutput_12;
	nb_line_update_tPostgresPlusOutput_12=nb_line_update_tPostgresPlusOutput_12 + updatedCount_tPostgresPlusOutput_12;
	nb_line_inserted_tPostgresPlusOutput_12=nb_line_inserted_tPostgresPlusOutput_12 + insertedCount_tPostgresPlusOutput_12;
	nb_line_rejected_tPostgresPlusOutput_12=nb_line_rejected_tPostgresPlusOutput_12 + rejectedCount_tPostgresPlusOutput_12;
	
        globalMap.put("tPostgresPlusOutput_12_NB_LINE",nb_line_tPostgresPlusOutput_12);
        globalMap.put("tPostgresPlusOutput_12_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_12);
        globalMap.put("tPostgresPlusOutput_12_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_12);
        globalMap.put("tPostgresPlusOutput_12_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_12);
        globalMap.put("tPostgresPlusOutput_12_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_12);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("ingezetene"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_12", true);
end_Hash.put("tPostgresPlusOutput_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_11Process(globalMap);



/**
 * [tPostgresPlusOutput_12 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_10 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_10";

	



        if(pstmt_tPostgresPlusOutput_10 != null) {
            pstmt_tPostgresPlusOutput_10.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_10");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_10", true);

	nb_line_deleted_tPostgresPlusOutput_10=nb_line_deleted_tPostgresPlusOutput_10+ deletedCount_tPostgresPlusOutput_10;
	nb_line_update_tPostgresPlusOutput_10=nb_line_update_tPostgresPlusOutput_10 + updatedCount_tPostgresPlusOutput_10;
	nb_line_inserted_tPostgresPlusOutput_10=nb_line_inserted_tPostgresPlusOutput_10 + insertedCount_tPostgresPlusOutput_10;
	nb_line_rejected_tPostgresPlusOutput_10=nb_line_rejected_tPostgresPlusOutput_10 + rejectedCount_tPostgresPlusOutput_10;
	
        globalMap.put("tPostgresPlusOutput_10_NB_LINE",nb_line_tPostgresPlusOutput_10);
        globalMap.put("tPostgresPlusOutput_10_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_10);
        globalMap.put("tPostgresPlusOutput_10_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_10);
        globalMap.put("tPostgresPlusOutput_10_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_10);
        globalMap.put("tPostgresPlusOutput_10_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_10);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("nietingezetene"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_10", true);
end_Hash.put("tPostgresPlusOutput_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_14Process(globalMap);



/**
 * [tPostgresPlusOutput_10 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputXML_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tPostgresPlusRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tPostgresPlusOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_1 = null;
                if ((pstmtToClose_tPostgresPlusOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_1")) != null) {
                    pstmtToClose_tPostgresPlusOutput_1.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_1 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_3";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_3 = null;
                if ((pstmtToClose_tPostgresPlusOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_3")) != null) {
                    pstmtToClose_tPostgresPlusOutput_3.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_3 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_2";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_2 = null;
                if ((pstmtToClose_tPostgresPlusOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_2")) != null) {
                    pstmtToClose_tPostgresPlusOutput_2.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_2 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_4";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_4 = null;
                if ((pstmtToClose_tPostgresPlusOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_4")) != null) {
                    pstmtToClose_tPostgresPlusOutput_4.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_4 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_6";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_6 = null;
                if ((pstmtToClose_tPostgresPlusOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_6")) != null) {
                    pstmtToClose_tPostgresPlusOutput_6.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_6 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_7";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_7 = null;
                if ((pstmtToClose_tPostgresPlusOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_7")) != null) {
                    pstmtToClose_tPostgresPlusOutput_7.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_7 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_9";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_9 = null;
                if ((pstmtToClose_tPostgresPlusOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_9")) != null) {
                    pstmtToClose_tPostgresPlusOutput_9.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_9 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_12";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_12 = null;
                if ((pstmtToClose_tPostgresPlusOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_12")) != null) {
                    pstmtToClose_tPostgresPlusOutput_12.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_12 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_10";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_10 = null;
                if ((pstmtToClose_tPostgresPlusOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_10")) != null) {
                    pstmtToClose_tPostgresPlusOutput_10.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_10 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


context.result = true;
context.jobName = "brk_aantekening_job";
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_1.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("xmlType", context.xmlType);
                    paraList_tRunJob_1.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("jobName", context.jobName);
                    paraList_tRunJob_1.add("--context_type " + "jobName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("result", context.result);
                    paraList_tRunJob_1.add("--context_type " + "result" + "=" + "id_Boolean");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		brk.joblogger_0_1.JobLogger childJob_tRunJob_1 = new brk.joblogger_0_1.JobLogger();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
					java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";

	
		int tos_count_tJava_7 = 0;
		


context.result = true;
context.jobName = "brk_aantekening_kdo_job";
 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";

	
		int tos_count_tJava_9 = 0;
		


context.result = true;
context.jobName = "brk_aantekening_recht_job";
 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 process_data_begin ] stop
 */
	
	/**
	 * [tJava_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 process_data_end ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		


context.result = true;
context.jobName = "brk_aantekening_stukdeel_job";
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_12", false);
		start_Hash.put("tJava_12", System.currentTimeMillis());
		
	
	currentComponent="tJava_12";

	
		int tos_count_tJava_12 = 0;
		


context.result = true;
context.jobName = "brk_aantekening_prs_job3";
 



/**
 * [tJava_12 begin ] stop
 */
	
	/**
	 * [tJava_12 main ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 


	tos_count_tJava_12++;

/**
 * [tJava_12 main ] stop
 */
	
	/**
	 * [tJava_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 



/**
 * [tJava_12 process_data_begin ] stop
 */
	
	/**
	 * [tJava_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 



/**
 * [tJava_12 process_data_end ] stop
 */
	
	/**
	 * [tJava_12 end ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 

ok_Hash.put("tJava_12", true);
end_Hash.put("tJava_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk22", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_12 finally ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 



/**
 * [tJava_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


context.result = true;
context.jobName = "brk_aantekening_prs_job1";
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_13", false);
		start_Hash.put("tJava_13", System.currentTimeMillis());
		
	
	currentComponent="tJava_13";

	
		int tos_count_tJava_13 = 0;
		


context.result = true;
context.jobName = "brk_aantekening_prs_job4";
 



/**
 * [tJava_13 begin ] stop
 */
	
	/**
	 * [tJava_13 main ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 


	tos_count_tJava_13++;

/**
 * [tJava_13 main ] stop
 */
	
	/**
	 * [tJava_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 



/**
 * [tJava_13 process_data_begin ] stop
 */
	
	/**
	 * [tJava_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 



/**
 * [tJava_13 process_data_end ] stop
 */
	
	/**
	 * [tJava_13 end ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 

ok_Hash.put("tJava_13", true);
end_Hash.put("tJava_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk24", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_13 finally ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 



/**
 * [tJava_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}
	

public void tJava_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_11", false);
		start_Hash.put("tJava_11", System.currentTimeMillis());
		
	
	currentComponent="tJava_11";

	
		int tos_count_tJava_11 = 0;
		


context.result = true;
context.jobName = "brk_aantekening_prs_job2";
 



/**
 * [tJava_11 begin ] stop
 */
	
	/**
	 * [tJava_11 main ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 


	tos_count_tJava_11++;

/**
 * [tJava_11 main ] stop
 */
	
	/**
	 * [tJava_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 process_data_begin ] stop
 */
	
	/**
	 * [tJava_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 process_data_end ] stop
 */
	
	/**
	 * [tJava_11 end ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 

ok_Hash.put("tJava_11", true);
end_Hash.put("tJava_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk23", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_11 finally ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}
	

public void tJava_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_14", false);
		start_Hash.put("tJava_14", System.currentTimeMillis());
		
	
	currentComponent="tJava_14";

	
		int tos_count_tJava_14 = 0;
		


context.result = true;
context.jobName = "brk_aantekening_prs_job5";
 



/**
 * [tJava_14 begin ] stop
 */
	
	/**
	 * [tJava_14 main ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 


	tos_count_tJava_14++;

/**
 * [tJava_14 main ] stop
 */
	
	/**
	 * [tJava_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 



/**
 * [tJava_14 process_data_begin ] stop
 */
	
	/**
	 * [tJava_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 



/**
 * [tJava_14 process_data_end ] stop
 */
	
	/**
	 * [tJava_14 end ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 

ok_Hash.put("tJava_14", true);
end_Hash.put("tJava_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk31", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_14 finally ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 



/**
 * [tJava_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresPlusRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresPlusRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresPlusRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusRow_1", false);
		start_Hash.put("tPostgresPlusRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusRow_1";

	
		int tos_count_tPostgresPlusRow_1 = 0;
		

	java.sql.Connection conn_tPostgresPlusRow_1 = null;
	String query_tPostgresPlusRow_1 = "";
	boolean whetherReject_tPostgresPlusRow_1 = false;
				conn_tPostgresPlusRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
			
    resourceMap.put("conn_tPostgresPlusRow_1", conn_tPostgresPlusRow_1);
        java.sql.Statement stmt_tPostgresPlusRow_1 = conn_tPostgresPlusRow_1.createStatement();
        resourceMap.put("stmt_tPostgresPlusRow_1", stmt_tPostgresPlusRow_1);

 



/**
 * [tPostgresPlusRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

query_tPostgresPlusRow_1 = "COMMENT ON TABLE brk_aantekening IS 'Aantekening';\nCOMMENT ON COLUMN brk_aantekening.kdoreferentie IS 'kdo referentie'"
+";\nCOMMENT ON COLUMN brk_aantekening.aantekeningid IS 'id';\nCOMMENT ON COLUMN brk_aantekening.aantekeningidnamespace IS"
+" 'namespace';\nCOMMENT ON COLUMN brk_aantekening.aantekeningidlokaalid IS 'id lokaal id';\nCOMMENT ON COLUMN brk_aanteke"
+"ning.aantekeningidversie IS 'id versie';\nCOMMENT ON COLUMN brk_aantekening.aantekeningaardcode IS 'Aard code';\nCOMMENT"
+" ON COLUMN brk_aantekening.aantekeningaardwaarde IS 'Aard';\nCOMMENT ON COLUMN brk_aantekening.aantekeningeinddatum IS '"
+"Einddatum';\nCOMMENT ON COLUMN brk_aantekening.aantekeningomschrijving IS 'Omschrijving';";
whetherReject_tPostgresPlusRow_1 = false;
globalMap.put("tPostgresPlusRow_1_QUERY",query_tPostgresPlusRow_1);
try {
		stmt_tPostgresPlusRow_1.execute(query_tPostgresPlusRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresPlusRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tPostgresPlusRow_1++;

/**
 * [tPostgresPlusRow_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

 



/**
 * [tPostgresPlusRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

 



/**
 * [tPostgresPlusRow_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

	
        stmt_tPostgresPlusRow_1.close();
        resourceMap.remove("stmt_tPostgresPlusRow_1");
    resourceMap.put("statementClosed_tPostgresPlusRow_1", true);
    resourceMap.put("finish_tPostgresPlusRow_1", true);
 

ok_Hash.put("tPostgresPlusRow_1", true);
end_Hash.put("tPostgresPlusRow_1", System.currentTimeMillis());




/**
 * [tPostgresPlusRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresPlusRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

    if (resourceMap.get("statementClosed_tPostgresPlusRow_1") == null) {
            java.sql.Statement stmtToClose_tPostgresPlusRow_1 = null;
            if ((stmtToClose_tPostgresPlusRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresPlusRow_1")) != null) {
                stmtToClose_tPostgresPlusRow_1.close();
            }
    }
 



/**
 * [tPostgresPlusRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresPlusRow_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final brk_aantekening_init brk_aantekening_initClass = new brk_aantekening_init();

        int exitCode = brk_aantekening_initClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = brk_aantekening_init.class.getClassLoader().getResourceAsStream("brk/brk_aantekening_init_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = brk_aantekening_init.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("xmlLocation", "id_String");
                            context.xmlLocation=(String) context.getProperty("xmlLocation");
                        context.setContextType("xmlType", "id_String");
                            context.xmlType=(String) context.getProperty("xmlType");
                        context.setContextType("jobName", "id_String");
                            context.jobName=(String) context.getProperty("jobName");
                        context.setContextType("result", "id_Boolean");
                            try{
                                context.result=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("result"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "result", e.getMessage()));
                                context.result=null;
                            }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("xmlLocation")) {
                context.xmlLocation = (String) parentContextMap.get("xmlLocation");
            }if (parentContextMap.containsKey("xmlType")) {
                context.xmlType = (String) parentContextMap.get("xmlType");
            }if (parentContextMap.containsKey("jobName")) {
                context.jobName = (String) parentContextMap.get("jobName");
            }if (parentContextMap.containsKey("result")) {
                context.result = (Boolean) parentContextMap.get("result");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tWarn_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tWarn_1) {
globalMap.put("tWarn_1_SUBPROCESS_STATE", -1);

e_tWarn_1.printStackTrace();

}
try {
errorCode = null;tPostgresPlusConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresPlusConnection_1) {
globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", -1);

e_tPostgresPlusConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : brk_aantekening_init");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresPlusConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresPlusConnection_1", globalMap.get("conn_tPostgresPlusConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     352441 characters generated by Talend Open Studio for Data Integration 
 *     on the 10 mei 2020 14:29:40 CEST
 ************************************************************************************************/