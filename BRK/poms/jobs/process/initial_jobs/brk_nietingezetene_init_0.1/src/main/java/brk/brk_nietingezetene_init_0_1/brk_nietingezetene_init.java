// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package brk.brk_nietingezetene_init_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Settings;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: brk_nietingezetene_init Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class brk_nietingezetene_init implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(xmlLocation != null){
				
					this.setProperty("xmlLocation", xmlLocation.toString());
				
			}
			
			if(xmlType != null){
				
					this.setProperty("xmlType", xmlType.toString());
				
			}
			
			if(jobName != null){
				
					this.setProperty("jobName", jobName.toString());
				
			}
			
			if(result != null){
				
					this.setProperty("result", result.toString());
				
			}
			
		}

public String xmlLocation;
public String getXmlLocation(){
	return this.xmlLocation;
}
public String xmlType;
public String getXmlType(){
	return this.xmlType;
}
public String jobName;
public String getJobName(){
	return this.jobName;
}
public Boolean result;
public Boolean getResult(){
	return this.result;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "brk_nietingezetene_init";
	private final String projectName = "BRK";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				brk_nietingezetene_init.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(brk_nietingezetene_init.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresPlusConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresPlusRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_3_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_3_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_3_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresPlusConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresPlusRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Begonnen met niet ingezetene (9/23)","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Begonnen met niet ingezetene (9/23)", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Begonnen met niet ingezetene (9/23)"); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 42);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_nietingezetene_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_nietingezetene_init = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_nietingezetene_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_nietingezetene_init.length == 0) {
   					commonByteArray_BRK_brk_nietingezetene_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_nietingezetene_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_nietingezetene_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_nietingezetene_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_nietingezetene_init) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_nietingezetene_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_nietingezetene_init = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_nietingezetene_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_nietingezetene_init.length == 0) {
   					commonByteArray_BRK_brk_nietingezetene_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_nietingezetene_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_nietingezetene_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_nietingezetene_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_nietingezetene_init) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row3"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = " - ";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row2"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
row3Struct row3_tmp = new row3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row2.type = lcm.getType();
		row2.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row2.priority = lcm.getPriority();
		row2.message = lcm.getMessage();
		row2.code = lcm.getCode();
		
		row2.moment = java.util.Calendar.getInstance().getTime();
	
    	row2.pid = pid;
		row2.root_pid = rootPid;
		row2.father_pid = fatherPid;
	
    	row2.project = projectName;
    	row2.job = jobName;
    	row2.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row2
			//row2


			
				
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

row3 = null;


// # Output table : 'row3'
row3_tmp.moment = row2.moment;
row3_tmp.message = row2.message;
row3 = row3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row3
			//row3


			
				
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row3.moment != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row3.moment, "HH:mm:ss dd-MM-yyyy")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append(" - ");
    			


   				
	    		if(row3.message != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row2"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row3"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresPlusConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresPlusConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusConnection_1", false);
		start_Hash.put("tPostgresPlusConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusConnection_1";

	
		int tos_count_tPostgresPlusConnection_1 = 0;
		


	
            String dbProperties_tPostgresPlusConnection_1 = "";
            String url_tPostgresPlusConnection_1 = "jdbc:postgresql://"+Settings.get("CONNECTION_DEFINITION", "host")+":"+Settings.get("CONNECTION_DEFINITION", "port")+"/"+Settings.get("CONNECTION_DEFINITION", "database");

            if(dbProperties_tPostgresPlusConnection_1 != null && !"".equals(dbProperties_tPostgresPlusConnection_1.trim())) {
                url_tPostgresPlusConnection_1 = url_tPostgresPlusConnection_1 + "?" + dbProperties_tPostgresPlusConnection_1;
            }
		String dbUser_tPostgresPlusConnection_1 = Settings.get("CONNECTION_DEFINITION", "user");
		
		
			
	final String decryptedPassword_tPostgresPlusConnection_1 = Settings.get("CONNECTION_DEFINITION", "password"); 
			String dbPwd_tPostgresPlusConnection_1 = decryptedPassword_tPostgresPlusConnection_1;
		
	java.sql.Connection conn_tPostgresPlusConnection_1 = null;
	
	
			String sharedConnectionName_tPostgresPlusConnection_1 = "postgres";
			conn_tPostgresPlusConnection_1 = SharedDBConnection.getDBConnection("org.postgresql.Driver",url_tPostgresPlusConnection_1,dbUser_tPostgresPlusConnection_1 , dbPwd_tPostgresPlusConnection_1 , sharedConnectionName_tPostgresPlusConnection_1);
	if (null != conn_tPostgresPlusConnection_1) {
		
			conn_tPostgresPlusConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresPlusConnection_1",Settings.get("SCHEMA_NAME_LOOKUP", "ldf"));

	globalMap.put("conn_" + "tPostgresPlusConnection_1",conn_tPostgresPlusConnection_1);

 



/**
 * [tPostgresPlusConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 


	tos_count_tPostgresPlusConnection_1++;

/**
 * [tPostgresPlusConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 

ok_Hash.put("tPostgresPlusConnection_1", true);
end_Hash.put("tPostgresPlusConnection_1", System.currentTimeMillis());




/**
 * [tPostgresPlusConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresPlusConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputXML_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresPlusConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_nietingezetene_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_nietingezetene_init = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String toestandsdatum;

				public String getToestandsdatum () {
					return this.toestandsdatum;
				}
				
			    public String nietingezeteneid;

				public String getNietingezeteneid () {
					return this.nietingezeteneid;
				}
				
			    public String nietingezeteneidnamespace;

				public String getNietingezeteneidnamespace () {
					return this.nietingezeteneidnamespace;
				}
				
			    public String nietingezeteneidlokaalid;

				public String getNietingezeteneidlokaalid () {
					return this.nietingezeteneidlokaalid;
				}
				
			    public String nietingezeteneidversie;

				public String getNietingezeteneidversie () {
					return this.nietingezeteneidversie;
				}
				
			    public String nietingezetenebeschikkingsbevoegdheidcode;

				public String getNietingezetenebeschikkingsbevoegdheidcode () {
					return this.nietingezetenebeschikkingsbevoegdheidcode;
				}
				
			    public String nietingezetenebeschikkingsbevoegdheidwaarde;

				public String getNietingezetenebeschikkingsbevoegdheidwaarde () {
					return this.nietingezetenebeschikkingsbevoegdheidwaarde;
				}
				
			    public String nietingezeteneposlockadbinadroprnaam;

				public String getNietingezeteneposlockadbinadroprnaam () {
					return this.nietingezeteneposlockadbinadroprnaam;
				}
				
			    public String nietingezeteneposlockadbinadrhuisletter;

				public String getNietingezeteneposlockadbinadrhuisletter () {
					return this.nietingezeteneposlockadbinadrhuisletter;
				}
				
			    public String nietingezeteneposlockadbinadrhuisnum;

				public String getNietingezeteneposlockadbinadrhuisnum () {
					return this.nietingezeteneposlockadbinadrhuisnum;
				}
				
			    public String nietingezeteneposlockadbinadrhuisnumtoevoeg;

				public String getNietingezeteneposlockadbinadrhuisnumtoevoeg () {
					return this.nietingezeteneposlockadbinadrhuisnumtoevoeg;
				}
				
			    public String nietingezeteneposlockadbinadrpostcode;

				public String getNietingezeteneposlockadbinadrpostcode () {
					return this.nietingezeteneposlockadbinadrpostcode;
				}
				
			    public String nietingezeteneposlockadbinadrwplnaam;

				public String getNietingezeteneposlockadbinadrwplnaam () {
					return this.nietingezeteneposlockadbinadrwplnaam;
				}
				
			    public String nietingezeteneposlockadbuitadres;

				public String getNietingezeteneposlockadbuitadres () {
					return this.nietingezeteneposlockadbuitadres;
				}
				
			    public String nietingezeteneposlockadbuitadrwoonplaats;

				public String getNietingezeteneposlockadbuitadrwoonplaats () {
					return this.nietingezeteneposlockadbuitadrwoonplaats;
				}
				
			    public String nietingezeteneposlockadbuitadrregio;

				public String getNietingezeteneposlockadbuitadrregio () {
					return this.nietingezeteneposlockadbuitadrregio;
				}
				
			    public String nietingezeteneposlockadbuitadrland;

				public String getNietingezeteneposlockadbuitadrland () {
					return this.nietingezeteneposlockadbuitadrland;
				}
				
			    public String nietingezeteneposlocbuitadres;

				public String getNietingezeteneposlocbuitadres () {
					return this.nietingezeteneposlocbuitadres;
				}
				
			    public String nietingezeteneposlocbuitadrwoonplaats;

				public String getNietingezeteneposlocbuitadrwoonplaats () {
					return this.nietingezeteneposlocbuitadrwoonplaats;
				}
				
			    public String nietingezeteneposlocbuitadrregio;

				public String getNietingezeteneposlocbuitadrregio () {
					return this.nietingezeteneposlocbuitadrregio;
				}
				
			    public String nietingezeteneposlocbuitadrlandcode;

				public String getNietingezeteneposlocbuitadrlandcode () {
					return this.nietingezeteneposlocbuitadrlandcode;
				}
				
			    public String nietingezeteneposlocbuitadrlandwaarde;

				public String getNietingezeteneposlocbuitadrlandwaarde () {
					return this.nietingezeteneposlocbuitadrlandwaarde;
				}
				
			    public String nietingezeteneposlocpostbusnummer;

				public String getNietingezeteneposlocpostbusnummer () {
					return this.nietingezeteneposlocpostbusnummer;
				}
				
			    public String nietingezeteneposlocpostbusadrpostcode;

				public String getNietingezeteneposlocpostbusadrpostcode () {
					return this.nietingezeteneposlocpostbusadrpostcode;
				}
				
			    public String nietingezeteneposlocpostbusadrwoonplaatsnaam;

				public String getNietingezeteneposlocpostbusadrwoonplaatsnaam () {
					return this.nietingezeteneposlocpostbusadrwoonplaatsnaam;
				}
				
			    public String nietingezetenewoonlocbuitadres;

				public String getNietingezetenewoonlocbuitadres () {
					return this.nietingezetenewoonlocbuitadres;
				}
				
			    public String nietingezetenewoonlocbuitadrwoonplaats;

				public String getNietingezetenewoonlocbuitadrwoonplaats () {
					return this.nietingezetenewoonlocbuitadrwoonplaats;
				}
				
			    public String nietingezetenewoonlocbuitadrregio;

				public String getNietingezetenewoonlocbuitadrregio () {
					return this.nietingezetenewoonlocbuitadrregio;
				}
				
			    public String nietingezetenewoonlocbuitadrlandcode;

				public String getNietingezetenewoonlocbuitadrlandcode () {
					return this.nietingezetenewoonlocbuitadrlandcode;
				}
				
			    public String nietingezetenewoonlocbuitadrlandwaarde;

				public String getNietingezetenewoonlocbuitadrlandwaarde () {
					return this.nietingezetenewoonlocbuitadrlandwaarde;
				}
				
			    public String nietingezetenewoonlockadbuitadres;

				public String getNietingezetenewoonlockadbuitadres () {
					return this.nietingezetenewoonlockadbuitadres;
				}
				
			    public String nietingezetenewoonlockadbuitadrwoonplaats;

				public String getNietingezetenewoonlockadbuitadrwoonplaats () {
					return this.nietingezetenewoonlockadbuitadrwoonplaats;
				}
				
			    public String nietingezetenewoonlockadbuitadrregio;

				public String getNietingezetenewoonlockadbuitadrregio () {
					return this.nietingezetenewoonlockadbuitadrregio;
				}
				
			    public String nietingezetenewoonlockadbuitadrland;

				public String getNietingezetenewoonlockadbuitadrland () {
					return this.nietingezetenewoonlockadbuitadrland;
				}
				
			    public String nietingezetenewoonlockadbinadroprnaam;

				public String getNietingezetenewoonlockadbinadroprnaam () {
					return this.nietingezetenewoonlockadbinadroprnaam;
				}
				
			    public String nietingezetenewoonlockadbinadrhuislet;

				public String getNietingezetenewoonlockadbinadrhuislet () {
					return this.nietingezetenewoonlockadbinadrhuislet;
				}
				
			    public String nietingezetenewoonlockadbinadrhuisnum;

				public String getNietingezetenewoonlockadbinadrhuisnum () {
					return this.nietingezetenewoonlockadbinadrhuisnum;
				}
				
			    public String nietingezetenewoonlockadbinadrhuisnumtoevoeg;

				public String getNietingezetenewoonlockadbinadrhuisnumtoevoeg () {
					return this.nietingezetenewoonlockadbinadrhuisnumtoevoeg;
				}
				
			    public String nietingezetenewoonlockadbinadrpostcode;

				public String getNietingezetenewoonlockadbinadrpostcode () {
					return this.nietingezetenewoonlockadbinadrpostcode;
				}
				
			    public String nietingezetenewoonlockadbinadrwplnaam;

				public String getNietingezetenewoonlockadbinadrwplnaam () {
					return this.nietingezetenewoonlockadbinadrwplnaam;
				}
				
			    public String nietingezetenebsn;

				public String getNietingezetenebsn () {
					return this.nietingezetenebsn;
				}
				
			    public String nietingezetenebsnnilreason;

				public String getNietingezetenebsnnilreason () {
					return this.nietingezetenebsnnilreason;
				}
				
			    public String nietingezetenenaamgeslachtsnaam;

				public String getNietingezetenenaamgeslachtsnaam () {
					return this.nietingezetenenaamgeslachtsnaam;
				}
				
			    public String nietingezetenenaamvoornamen;

				public String getNietingezetenenaamvoornamen () {
					return this.nietingezetenenaamvoornamen;
				}
				
			    public String nietingezetenenaamvoorvoegselsgeslachtsnaam;

				public String getNietingezetenenaamvoorvoegselsgeslachtsnaam () {
					return this.nietingezetenenaamvoorvoegselsgeslachtsnaam;
				}
				
			    public String nietingezetenegeslachtsaanduidingcode;

				public String getNietingezetenegeslachtsaanduidingcode () {
					return this.nietingezetenegeslachtsaanduidingcode;
				}
				
			    public String nietingezetenegeslachtsaanduidingwaarde;

				public String getNietingezetenegeslachtsaanduidingwaarde () {
					return this.nietingezetenegeslachtsaanduidingwaarde;
				}
				
			    public String nietingezeteneaanduidingnaamgebruikcode;

				public String getNietingezeteneaanduidingnaamgebruikcode () {
					return this.nietingezeteneaanduidingnaamgebruikcode;
				}
				
			    public String nietingezeteneaanduidingnaamgebruikwaarde;

				public String getNietingezeteneaanduidingnaamgebruikwaarde () {
					return this.nietingezeteneaanduidingnaamgebruikwaarde;
				}
				
			    public String nietingezetenegeboortedatum;

				public String getNietingezetenegeboortedatum () {
					return this.nietingezetenegeboortedatum;
				}
				
			    public String nietingezetenegeboortedatumnilreason;

				public String getNietingezetenegeboortedatumnilreason () {
					return this.nietingezetenegeboortedatumnilreason;
				}
				
			    public String nietingezetenegeboorteplaats;

				public String getNietingezetenegeboorteplaats () {
					return this.nietingezetenegeboorteplaats;
				}
				
			    public String nietingezetenegeboortelandcode;

				public String getNietingezetenegeboortelandcode () {
					return this.nietingezetenegeboortelandcode;
				}
				
			    public String nietingezetenegeboortelandwaarde;

				public String getNietingezetenegeboortelandwaarde () {
					return this.nietingezetenegeboortelandwaarde;
				}
				
			    public String nietingezetenedatumoverlijden;

				public String getNietingezetenedatumoverlijden () {
					return this.nietingezetenedatumoverlijden;
				}
				
			    public String nietingezeteheeftpartnergeslachtsnaam;

				public String getNietingezeteheeftpartnergeslachtsnaam () {
					return this.nietingezeteheeftpartnergeslachtsnaam;
				}
				
			    public String nietingezeteheeftpartnervoornamen;

				public String getNietingezeteheeftpartnervoornamen () {
					return this.nietingezeteheeftpartnervoornamen;
				}
				
			    public String nietingezeteheeftpartnervoorvoegselsgeslachtsnaam;

				public String getNietingezeteheeftpartnervoorvoegselsgeslachtsnaam () {
					return this.nietingezeteheeftpartnervoorvoegselsgeslachtsnaam;
				}
				
			    public String nietingezetenelandwaarnaarvertrokkencode;

				public String getNietingezetenelandwaarnaarvertrokkencode () {
					return this.nietingezetenelandwaarnaarvertrokkencode;
				}
				
			    public String nietingezetenelandwaarnaarvertrokkenwaarde;

				public String getNietingezetenelandwaarnaarvertrokkenwaarde () {
					return this.nietingezetenelandwaarnaarvertrokkenwaarde;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.nietingezeteneid == null) ? 0 : this.nietingezeteneid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.nietingezeteneid == null) {
							if (other.nietingezeteneid != null)
								return false;
						
						} else if (!this.nietingezeteneid.equals(other.nietingezeteneid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.kdoreferentie = this.kdoreferentie;
	            other.toestandsdatum = this.toestandsdatum;
	            other.nietingezeteneid = this.nietingezeteneid;
	            other.nietingezeteneidnamespace = this.nietingezeteneidnamespace;
	            other.nietingezeteneidlokaalid = this.nietingezeteneidlokaalid;
	            other.nietingezeteneidversie = this.nietingezeteneidversie;
	            other.nietingezetenebeschikkingsbevoegdheidcode = this.nietingezetenebeschikkingsbevoegdheidcode;
	            other.nietingezetenebeschikkingsbevoegdheidwaarde = this.nietingezetenebeschikkingsbevoegdheidwaarde;
	            other.nietingezeteneposlockadbinadroprnaam = this.nietingezeteneposlockadbinadroprnaam;
	            other.nietingezeteneposlockadbinadrhuisletter = this.nietingezeteneposlockadbinadrhuisletter;
	            other.nietingezeteneposlockadbinadrhuisnum = this.nietingezeteneposlockadbinadrhuisnum;
	            other.nietingezeteneposlockadbinadrhuisnumtoevoeg = this.nietingezeteneposlockadbinadrhuisnumtoevoeg;
	            other.nietingezeteneposlockadbinadrpostcode = this.nietingezeteneposlockadbinadrpostcode;
	            other.nietingezeteneposlockadbinadrwplnaam = this.nietingezeteneposlockadbinadrwplnaam;
	            other.nietingezeteneposlockadbuitadres = this.nietingezeteneposlockadbuitadres;
	            other.nietingezeteneposlockadbuitadrwoonplaats = this.nietingezeteneposlockadbuitadrwoonplaats;
	            other.nietingezeteneposlockadbuitadrregio = this.nietingezeteneposlockadbuitadrregio;
	            other.nietingezeteneposlockadbuitadrland = this.nietingezeteneposlockadbuitadrland;
	            other.nietingezeteneposlocbuitadres = this.nietingezeteneposlocbuitadres;
	            other.nietingezeteneposlocbuitadrwoonplaats = this.nietingezeteneposlocbuitadrwoonplaats;
	            other.nietingezeteneposlocbuitadrregio = this.nietingezeteneposlocbuitadrregio;
	            other.nietingezeteneposlocbuitadrlandcode = this.nietingezeteneposlocbuitadrlandcode;
	            other.nietingezeteneposlocbuitadrlandwaarde = this.nietingezeteneposlocbuitadrlandwaarde;
	            other.nietingezeteneposlocpostbusnummer = this.nietingezeteneposlocpostbusnummer;
	            other.nietingezeteneposlocpostbusadrpostcode = this.nietingezeteneposlocpostbusadrpostcode;
	            other.nietingezeteneposlocpostbusadrwoonplaatsnaam = this.nietingezeteneposlocpostbusadrwoonplaatsnaam;
	            other.nietingezetenewoonlocbuitadres = this.nietingezetenewoonlocbuitadres;
	            other.nietingezetenewoonlocbuitadrwoonplaats = this.nietingezetenewoonlocbuitadrwoonplaats;
	            other.nietingezetenewoonlocbuitadrregio = this.nietingezetenewoonlocbuitadrregio;
	            other.nietingezetenewoonlocbuitadrlandcode = this.nietingezetenewoonlocbuitadrlandcode;
	            other.nietingezetenewoonlocbuitadrlandwaarde = this.nietingezetenewoonlocbuitadrlandwaarde;
	            other.nietingezetenewoonlockadbuitadres = this.nietingezetenewoonlockadbuitadres;
	            other.nietingezetenewoonlockadbuitadrwoonplaats = this.nietingezetenewoonlockadbuitadrwoonplaats;
	            other.nietingezetenewoonlockadbuitadrregio = this.nietingezetenewoonlockadbuitadrregio;
	            other.nietingezetenewoonlockadbuitadrland = this.nietingezetenewoonlockadbuitadrland;
	            other.nietingezetenewoonlockadbinadroprnaam = this.nietingezetenewoonlockadbinadroprnaam;
	            other.nietingezetenewoonlockadbinadrhuislet = this.nietingezetenewoonlockadbinadrhuislet;
	            other.nietingezetenewoonlockadbinadrhuisnum = this.nietingezetenewoonlockadbinadrhuisnum;
	            other.nietingezetenewoonlockadbinadrhuisnumtoevoeg = this.nietingezetenewoonlockadbinadrhuisnumtoevoeg;
	            other.nietingezetenewoonlockadbinadrpostcode = this.nietingezetenewoonlockadbinadrpostcode;
	            other.nietingezetenewoonlockadbinadrwplnaam = this.nietingezetenewoonlockadbinadrwplnaam;
	            other.nietingezetenebsn = this.nietingezetenebsn;
	            other.nietingezetenebsnnilreason = this.nietingezetenebsnnilreason;
	            other.nietingezetenenaamgeslachtsnaam = this.nietingezetenenaamgeslachtsnaam;
	            other.nietingezetenenaamvoornamen = this.nietingezetenenaamvoornamen;
	            other.nietingezetenenaamvoorvoegselsgeslachtsnaam = this.nietingezetenenaamvoorvoegselsgeslachtsnaam;
	            other.nietingezetenegeslachtsaanduidingcode = this.nietingezetenegeslachtsaanduidingcode;
	            other.nietingezetenegeslachtsaanduidingwaarde = this.nietingezetenegeslachtsaanduidingwaarde;
	            other.nietingezeteneaanduidingnaamgebruikcode = this.nietingezeteneaanduidingnaamgebruikcode;
	            other.nietingezeteneaanduidingnaamgebruikwaarde = this.nietingezeteneaanduidingnaamgebruikwaarde;
	            other.nietingezetenegeboortedatum = this.nietingezetenegeboortedatum;
	            other.nietingezetenegeboortedatumnilreason = this.nietingezetenegeboortedatumnilreason;
	            other.nietingezetenegeboorteplaats = this.nietingezetenegeboorteplaats;
	            other.nietingezetenegeboortelandcode = this.nietingezetenegeboortelandcode;
	            other.nietingezetenegeboortelandwaarde = this.nietingezetenegeboortelandwaarde;
	            other.nietingezetenedatumoverlijden = this.nietingezetenedatumoverlijden;
	            other.nietingezeteheeftpartnergeslachtsnaam = this.nietingezeteheeftpartnergeslachtsnaam;
	            other.nietingezeteheeftpartnervoornamen = this.nietingezeteheeftpartnervoornamen;
	            other.nietingezeteheeftpartnervoorvoegselsgeslachtsnaam = this.nietingezeteheeftpartnervoorvoegselsgeslachtsnaam;
	            other.nietingezetenelandwaarnaarvertrokkencode = this.nietingezetenelandwaarnaarvertrokkencode;
	            other.nietingezetenelandwaarnaarvertrokkenwaarde = this.nietingezetenelandwaarnaarvertrokkenwaarde;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.nietingezeteneid = this.nietingezeteneid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_nietingezetene_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_nietingezetene_init.length == 0) {
   					commonByteArray_BRK_brk_nietingezetene_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_nietingezetene_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_nietingezetene_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_nietingezetene_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_nietingezetene_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.toestandsdatum = readString(dis);
					
					this.nietingezeteneid = readString(dis);
					
					this.nietingezeteneidnamespace = readString(dis);
					
					this.nietingezeteneidlokaalid = readString(dis);
					
					this.nietingezeteneidversie = readString(dis);
					
					this.nietingezetenebeschikkingsbevoegdheidcode = readString(dis);
					
					this.nietingezetenebeschikkingsbevoegdheidwaarde = readString(dis);
					
					this.nietingezeteneposlockadbinadroprnaam = readString(dis);
					
					this.nietingezeteneposlockadbinadrhuisletter = readString(dis);
					
					this.nietingezeteneposlockadbinadrhuisnum = readString(dis);
					
					this.nietingezeteneposlockadbinadrhuisnumtoevoeg = readString(dis);
					
					this.nietingezeteneposlockadbinadrpostcode = readString(dis);
					
					this.nietingezeteneposlockadbinadrwplnaam = readString(dis);
					
					this.nietingezeteneposlockadbuitadres = readString(dis);
					
					this.nietingezeteneposlockadbuitadrwoonplaats = readString(dis);
					
					this.nietingezeteneposlockadbuitadrregio = readString(dis);
					
					this.nietingezeteneposlockadbuitadrland = readString(dis);
					
					this.nietingezeteneposlocbuitadres = readString(dis);
					
					this.nietingezeteneposlocbuitadrwoonplaats = readString(dis);
					
					this.nietingezeteneposlocbuitadrregio = readString(dis);
					
					this.nietingezeteneposlocbuitadrlandcode = readString(dis);
					
					this.nietingezeteneposlocbuitadrlandwaarde = readString(dis);
					
					this.nietingezeteneposlocpostbusnummer = readString(dis);
					
					this.nietingezeteneposlocpostbusadrpostcode = readString(dis);
					
					this.nietingezeteneposlocpostbusadrwoonplaatsnaam = readString(dis);
					
					this.nietingezetenewoonlocbuitadres = readString(dis);
					
					this.nietingezetenewoonlocbuitadrwoonplaats = readString(dis);
					
					this.nietingezetenewoonlocbuitadrregio = readString(dis);
					
					this.nietingezetenewoonlocbuitadrlandcode = readString(dis);
					
					this.nietingezetenewoonlocbuitadrlandwaarde = readString(dis);
					
					this.nietingezetenewoonlockadbuitadres = readString(dis);
					
					this.nietingezetenewoonlockadbuitadrwoonplaats = readString(dis);
					
					this.nietingezetenewoonlockadbuitadrregio = readString(dis);
					
					this.nietingezetenewoonlockadbuitadrland = readString(dis);
					
					this.nietingezetenewoonlockadbinadroprnaam = readString(dis);
					
					this.nietingezetenewoonlockadbinadrhuislet = readString(dis);
					
					this.nietingezetenewoonlockadbinadrhuisnum = readString(dis);
					
					this.nietingezetenewoonlockadbinadrhuisnumtoevoeg = readString(dis);
					
					this.nietingezetenewoonlockadbinadrpostcode = readString(dis);
					
					this.nietingezetenewoonlockadbinadrwplnaam = readString(dis);
					
					this.nietingezetenebsn = readString(dis);
					
					this.nietingezetenebsnnilreason = readString(dis);
					
					this.nietingezetenenaamgeslachtsnaam = readString(dis);
					
					this.nietingezetenenaamvoornamen = readString(dis);
					
					this.nietingezetenenaamvoorvoegselsgeslachtsnaam = readString(dis);
					
					this.nietingezetenegeslachtsaanduidingcode = readString(dis);
					
					this.nietingezetenegeslachtsaanduidingwaarde = readString(dis);
					
					this.nietingezeteneaanduidingnaamgebruikcode = readString(dis);
					
					this.nietingezeteneaanduidingnaamgebruikwaarde = readString(dis);
					
					this.nietingezetenegeboortedatum = readString(dis);
					
					this.nietingezetenegeboortedatumnilreason = readString(dis);
					
					this.nietingezetenegeboorteplaats = readString(dis);
					
					this.nietingezetenegeboortelandcode = readString(dis);
					
					this.nietingezetenegeboortelandwaarde = readString(dis);
					
					this.nietingezetenedatumoverlijden = readString(dis);
					
					this.nietingezeteheeftpartnergeslachtsnaam = readString(dis);
					
					this.nietingezeteheeftpartnervoornamen = readString(dis);
					
					this.nietingezeteheeftpartnervoorvoegselsgeslachtsnaam = readString(dis);
					
					this.nietingezetenelandwaarnaarvertrokkencode = readString(dis);
					
					this.nietingezetenelandwaarnaarvertrokkenwaarde = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.toestandsdatum,dos);
					
					// String
				
						writeString(this.nietingezeteneid,dos);
					
					// String
				
						writeString(this.nietingezeteneidnamespace,dos);
					
					// String
				
						writeString(this.nietingezeteneidlokaalid,dos);
					
					// String
				
						writeString(this.nietingezeteneidversie,dos);
					
					// String
				
						writeString(this.nietingezetenebeschikkingsbevoegdheidcode,dos);
					
					// String
				
						writeString(this.nietingezetenebeschikkingsbevoegdheidwaarde,dos);
					
					// String
				
						writeString(this.nietingezeteneposlockadbinadroprnaam,dos);
					
					// String
				
						writeString(this.nietingezeteneposlockadbinadrhuisletter,dos);
					
					// String
				
						writeString(this.nietingezeteneposlockadbinadrhuisnum,dos);
					
					// String
				
						writeString(this.nietingezeteneposlockadbinadrhuisnumtoevoeg,dos);
					
					// String
				
						writeString(this.nietingezeteneposlockadbinadrpostcode,dos);
					
					// String
				
						writeString(this.nietingezeteneposlockadbinadrwplnaam,dos);
					
					// String
				
						writeString(this.nietingezeteneposlockadbuitadres,dos);
					
					// String
				
						writeString(this.nietingezeteneposlockadbuitadrwoonplaats,dos);
					
					// String
				
						writeString(this.nietingezeteneposlockadbuitadrregio,dos);
					
					// String
				
						writeString(this.nietingezeteneposlockadbuitadrland,dos);
					
					// String
				
						writeString(this.nietingezeteneposlocbuitadres,dos);
					
					// String
				
						writeString(this.nietingezeteneposlocbuitadrwoonplaats,dos);
					
					// String
				
						writeString(this.nietingezeteneposlocbuitadrregio,dos);
					
					// String
				
						writeString(this.nietingezeteneposlocbuitadrlandcode,dos);
					
					// String
				
						writeString(this.nietingezeteneposlocbuitadrlandwaarde,dos);
					
					// String
				
						writeString(this.nietingezeteneposlocpostbusnummer,dos);
					
					// String
				
						writeString(this.nietingezeteneposlocpostbusadrpostcode,dos);
					
					// String
				
						writeString(this.nietingezeteneposlocpostbusadrwoonplaatsnaam,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlocbuitadres,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlocbuitadrwoonplaats,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlocbuitadrregio,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlocbuitadrlandcode,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlocbuitadrlandwaarde,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlockadbuitadres,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlockadbuitadrwoonplaats,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlockadbuitadrregio,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlockadbuitadrland,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlockadbinadroprnaam,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlockadbinadrhuislet,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlockadbinadrhuisnum,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlockadbinadrhuisnumtoevoeg,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlockadbinadrpostcode,dos);
					
					// String
				
						writeString(this.nietingezetenewoonlockadbinadrwplnaam,dos);
					
					// String
				
						writeString(this.nietingezetenebsn,dos);
					
					// String
				
						writeString(this.nietingezetenebsnnilreason,dos);
					
					// String
				
						writeString(this.nietingezetenenaamgeslachtsnaam,dos);
					
					// String
				
						writeString(this.nietingezetenenaamvoornamen,dos);
					
					// String
				
						writeString(this.nietingezetenenaamvoorvoegselsgeslachtsnaam,dos);
					
					// String
				
						writeString(this.nietingezetenegeslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.nietingezetenegeslachtsaanduidingwaarde,dos);
					
					// String
				
						writeString(this.nietingezeteneaanduidingnaamgebruikcode,dos);
					
					// String
				
						writeString(this.nietingezeteneaanduidingnaamgebruikwaarde,dos);
					
					// String
				
						writeString(this.nietingezetenegeboortedatum,dos);
					
					// String
				
						writeString(this.nietingezetenegeboortedatumnilreason,dos);
					
					// String
				
						writeString(this.nietingezetenegeboorteplaats,dos);
					
					// String
				
						writeString(this.nietingezetenegeboortelandcode,dos);
					
					// String
				
						writeString(this.nietingezetenegeboortelandwaarde,dos);
					
					// String
				
						writeString(this.nietingezetenedatumoverlijden,dos);
					
					// String
				
						writeString(this.nietingezeteheeftpartnergeslachtsnaam,dos);
					
					// String
				
						writeString(this.nietingezeteheeftpartnervoornamen,dos);
					
					// String
				
						writeString(this.nietingezeteheeftpartnervoorvoegselsgeslachtsnaam,dos);
					
					// String
				
						writeString(this.nietingezetenelandwaarnaarvertrokkencode,dos);
					
					// String
				
						writeString(this.nietingezetenelandwaarnaarvertrokkenwaarde,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",toestandsdatum="+toestandsdatum);
		sb.append(",nietingezeteneid="+nietingezeteneid);
		sb.append(",nietingezeteneidnamespace="+nietingezeteneidnamespace);
		sb.append(",nietingezeteneidlokaalid="+nietingezeteneidlokaalid);
		sb.append(",nietingezeteneidversie="+nietingezeteneidversie);
		sb.append(",nietingezetenebeschikkingsbevoegdheidcode="+nietingezetenebeschikkingsbevoegdheidcode);
		sb.append(",nietingezetenebeschikkingsbevoegdheidwaarde="+nietingezetenebeschikkingsbevoegdheidwaarde);
		sb.append(",nietingezeteneposlockadbinadroprnaam="+nietingezeteneposlockadbinadroprnaam);
		sb.append(",nietingezeteneposlockadbinadrhuisletter="+nietingezeteneposlockadbinadrhuisletter);
		sb.append(",nietingezeteneposlockadbinadrhuisnum="+nietingezeteneposlockadbinadrhuisnum);
		sb.append(",nietingezeteneposlockadbinadrhuisnumtoevoeg="+nietingezeteneposlockadbinadrhuisnumtoevoeg);
		sb.append(",nietingezeteneposlockadbinadrpostcode="+nietingezeteneposlockadbinadrpostcode);
		sb.append(",nietingezeteneposlockadbinadrwplnaam="+nietingezeteneposlockadbinadrwplnaam);
		sb.append(",nietingezeteneposlockadbuitadres="+nietingezeteneposlockadbuitadres);
		sb.append(",nietingezeteneposlockadbuitadrwoonplaats="+nietingezeteneposlockadbuitadrwoonplaats);
		sb.append(",nietingezeteneposlockadbuitadrregio="+nietingezeteneposlockadbuitadrregio);
		sb.append(",nietingezeteneposlockadbuitadrland="+nietingezeteneposlockadbuitadrland);
		sb.append(",nietingezeteneposlocbuitadres="+nietingezeteneposlocbuitadres);
		sb.append(",nietingezeteneposlocbuitadrwoonplaats="+nietingezeteneposlocbuitadrwoonplaats);
		sb.append(",nietingezeteneposlocbuitadrregio="+nietingezeteneposlocbuitadrregio);
		sb.append(",nietingezeteneposlocbuitadrlandcode="+nietingezeteneposlocbuitadrlandcode);
		sb.append(",nietingezeteneposlocbuitadrlandwaarde="+nietingezeteneposlocbuitadrlandwaarde);
		sb.append(",nietingezeteneposlocpostbusnummer="+nietingezeteneposlocpostbusnummer);
		sb.append(",nietingezeteneposlocpostbusadrpostcode="+nietingezeteneposlocpostbusadrpostcode);
		sb.append(",nietingezeteneposlocpostbusadrwoonplaatsnaam="+nietingezeteneposlocpostbusadrwoonplaatsnaam);
		sb.append(",nietingezetenewoonlocbuitadres="+nietingezetenewoonlocbuitadres);
		sb.append(",nietingezetenewoonlocbuitadrwoonplaats="+nietingezetenewoonlocbuitadrwoonplaats);
		sb.append(",nietingezetenewoonlocbuitadrregio="+nietingezetenewoonlocbuitadrregio);
		sb.append(",nietingezetenewoonlocbuitadrlandcode="+nietingezetenewoonlocbuitadrlandcode);
		sb.append(",nietingezetenewoonlocbuitadrlandwaarde="+nietingezetenewoonlocbuitadrlandwaarde);
		sb.append(",nietingezetenewoonlockadbuitadres="+nietingezetenewoonlockadbuitadres);
		sb.append(",nietingezetenewoonlockadbuitadrwoonplaats="+nietingezetenewoonlockadbuitadrwoonplaats);
		sb.append(",nietingezetenewoonlockadbuitadrregio="+nietingezetenewoonlockadbuitadrregio);
		sb.append(",nietingezetenewoonlockadbuitadrland="+nietingezetenewoonlockadbuitadrland);
		sb.append(",nietingezetenewoonlockadbinadroprnaam="+nietingezetenewoonlockadbinadroprnaam);
		sb.append(",nietingezetenewoonlockadbinadrhuislet="+nietingezetenewoonlockadbinadrhuislet);
		sb.append(",nietingezetenewoonlockadbinadrhuisnum="+nietingezetenewoonlockadbinadrhuisnum);
		sb.append(",nietingezetenewoonlockadbinadrhuisnumtoevoeg="+nietingezetenewoonlockadbinadrhuisnumtoevoeg);
		sb.append(",nietingezetenewoonlockadbinadrpostcode="+nietingezetenewoonlockadbinadrpostcode);
		sb.append(",nietingezetenewoonlockadbinadrwplnaam="+nietingezetenewoonlockadbinadrwplnaam);
		sb.append(",nietingezetenebsn="+nietingezetenebsn);
		sb.append(",nietingezetenebsnnilreason="+nietingezetenebsnnilreason);
		sb.append(",nietingezetenenaamgeslachtsnaam="+nietingezetenenaamgeslachtsnaam);
		sb.append(",nietingezetenenaamvoornamen="+nietingezetenenaamvoornamen);
		sb.append(",nietingezetenenaamvoorvoegselsgeslachtsnaam="+nietingezetenenaamvoorvoegselsgeslachtsnaam);
		sb.append(",nietingezetenegeslachtsaanduidingcode="+nietingezetenegeslachtsaanduidingcode);
		sb.append(",nietingezetenegeslachtsaanduidingwaarde="+nietingezetenegeslachtsaanduidingwaarde);
		sb.append(",nietingezeteneaanduidingnaamgebruikcode="+nietingezeteneaanduidingnaamgebruikcode);
		sb.append(",nietingezeteneaanduidingnaamgebruikwaarde="+nietingezeteneaanduidingnaamgebruikwaarde);
		sb.append(",nietingezetenegeboortedatum="+nietingezetenegeboortedatum);
		sb.append(",nietingezetenegeboortedatumnilreason="+nietingezetenegeboortedatumnilreason);
		sb.append(",nietingezetenegeboorteplaats="+nietingezetenegeboorteplaats);
		sb.append(",nietingezetenegeboortelandcode="+nietingezetenegeboortelandcode);
		sb.append(",nietingezetenegeboortelandwaarde="+nietingezetenegeboortelandwaarde);
		sb.append(",nietingezetenedatumoverlijden="+nietingezetenedatumoverlijden);
		sb.append(",nietingezeteheeftpartnergeslachtsnaam="+nietingezeteheeftpartnergeslachtsnaam);
		sb.append(",nietingezeteheeftpartnervoornamen="+nietingezeteheeftpartnervoornamen);
		sb.append(",nietingezeteheeftpartnervoorvoegselsgeslachtsnaam="+nietingezeteheeftpartnervoorvoegselsgeslachtsnaam);
		sb.append(",nietingezetenelandwaarnaarvertrokkencode="+nietingezetenelandwaarnaarvertrokkencode);
		sb.append(",nietingezetenelandwaarnaarvertrokkenwaarde="+nietingezetenelandwaarnaarvertrokkenwaarde);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.nietingezeteneid, other.nietingezeteneid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_nietingezetene_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_nietingezetene_init = new byte[0];

	
			    public routines.system.Document content;

				public routines.system.Document getContent () {
					return this.content;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_nietingezetene_init) {

        	try {

        		int length = 0;
		
						this.content = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("content="+String.valueOf(content));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();




	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tXMLMap_3_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_3_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_3_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_3_TXMLMAP_OUT__Struct Var__tXMLMap_3_TXMLMAP_OUT = new Var__tXMLMap_3_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out1Struct out1_save = null;
//the aggregate variable
out1Struct out1_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_3 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_3",allOutsForAggregate_tXMLMap_3);
// ###############################
class TreeNode_API_tXMLMap_3_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_3_TXMLMAP_OUT treeNodeAPI_tXMLMap_3_TXMLMAP_OUT = new TreeNode_API_tXMLMap_3_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_3_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_3_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_3_TXMLMAP_OUT xml_api_tXMLMap_3_TXMLMAP_OUT = new XML_API_tXMLMap_3_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_3_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_3_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";

	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"."		
	,"."+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	true		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper(context.xmlType,queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.xmlLocation;
} catch(java.lang.Exception e) {
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get(".");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("."+"/@xsi:nil")};	
										if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.content =null;
										}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1) || xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)){
											row1.content=null;
										}else{
		row1.content = ParserUtils.parseTo_Document(str_tFileInputXML_1);
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

			//row1
			//row1


			
				
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				}
				
				
				
			

		

	boolean rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_3_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setOriginalLoop("/KadastraalObjectSnapshot/NietIngezetene/identificatie");
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setIsOptional(false);
				if(row1.content == null || row1.content.getDocument() == null) {
					throw new RuntimeException("row1.content can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT = row1.content.getDocument();
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setDoc(doc_tXMLMap_3_TXMLMAP_OUT);
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT = new String[61];
				String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT = new String[61];
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[0] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/identificatie/versie";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[0] = "versie";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[1] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/landWaarnaarVertrokken/code";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[1] = "../landWaarnaarVertrokken/code";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[2] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBuitenlandsAdres/regio";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[2] = "../postlocatie/KADBuitenlandsAdres/regio";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[3] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/BuitenlandsAdres/land/code";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[3] = "../postlocatie/BuitenlandsAdres/land/code";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[4] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/landWaarnaarVertrokken/waarde";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[4] = "../landWaarnaarVertrokken/waarde";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[5] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBuitenlandsAdres/woonplaats";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[5] = "../postlocatie/KADBuitenlandsAdres/woonplaats";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[6] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBuitenlandsAdres/land";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[6] = "../postlocatie/KADBuitenlandsAdres/land";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[7] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/BuitenlandsAdres/regio";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[7] = "../woonlocatie/BuitenlandsAdres/regio";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[8] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/BuitenlandsAdres/woonplaats";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[8] = "../woonlocatie/BuitenlandsAdres/woonplaats";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[9] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/openbareRuimteNaam";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[9] = "../postlocatie/KADBinnenlandsAdres/openbareRuimteNaam";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[10] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/naam/voorvoegselsgeslachtsnaam";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[10] = "../naam/voorvoegselsgeslachtsnaam";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[11] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/geboorte/geboorteplaats";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[11] = "../geboorte/geboorteplaats";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[12] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/woonplaatsNaam";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[12] = "../woonlocatie/KADBinnenlandsAdres/woonplaatsNaam";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[13] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/BSN";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[13] = "../BSN";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[14] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/geboorte/geboorteland/waarde";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[14] = "../geboorte/geboorteland/waarde";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[15] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/huisNummer";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[15] = "../postlocatie/KADBinnenlandsAdres/huisNummer";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[16] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/PostbusAdres/postcode";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[16] = "../postlocatie/PostbusAdres/postcode";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[17] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/heeftPartnerschap/Partnerschap/naamPartner/geslachtsnaam";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[17] = "../heeftPartnerschap/Partnerschap/naamPartner/geslachtsnaam";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[18] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/BuitenlandsAdres/land/waarde";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[18] = "../postlocatie/BuitenlandsAdres/land/waarde";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[19] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/huisNummerToevoeging";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[19] = "../postlocatie/KADBinnenlandsAdres/huisNummerToevoeging";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[20] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBuitenlandsAdres/adres";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[20] = "../postlocatie/KADBuitenlandsAdres/adres";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[21] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/huisLetter";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[21] = "../woonlocatie/KADBinnenlandsAdres/huisLetter";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[22] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/heeftPartnerschap/Partnerschap/naamPartner/voorvoegselsgeslachtsnaam";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[22] = "../heeftPartnerschap/Partnerschap/naamPartner/voorvoegselsgeslachtsnaam";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[23] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/huisLetter";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[23] = "../postlocatie/KADBinnenlandsAdres/huisLetter";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[24] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/beschikkingsbevoegdheid/code";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[24] = "../beschikkingsbevoegdheid/code";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[25] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/PostbusAdres/woonplaatsNaam";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[25] = "../postlocatie/PostbusAdres/woonplaatsNaam";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[26] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/BuitenlandsAdres/land/code";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[26] = "../woonlocatie/BuitenlandsAdres/land/code";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[27] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/heeftPartnerschap/Partnerschap/naamPartner/voornamen";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[27] = "../heeftPartnerschap/Partnerschap/naamPartner/voornamen";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[28] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/BuitenlandsAdres/regio";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[28] = "../postlocatie/BuitenlandsAdres/regio";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[29] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/BuitenlandsAdres/adres";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[29] = "../woonlocatie/BuitenlandsAdres/adres";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[30] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/geboorte/geboortedatum/@nilReason";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[30] = "../geboorte/geboortedatum/@nilReason";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[31] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/naam/geslachtsnaam";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[31] = "../naam/geslachtsnaam";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[32] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/BuitenlandsAdres/adres";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[32] = "../postlocatie/BuitenlandsAdres/adres";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[33] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/naam/voornamen";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[33] = "../naam/voornamen";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[34] = "row1.content:/KadastraalObjectSnapshot/referentie";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[34] = "../../referentie";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[35] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/BSN/@nilReason";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[35] = "../BSN/@nilReason";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[36] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/geslacht/geslachtsaanduiding/waarde";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[36] = "../geslacht/geslachtsaanduiding/waarde";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[37] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/openbareRuimteNaam";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[37] = "../woonlocatie/KADBinnenlandsAdres/openbareRuimteNaam";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[38] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/huisNummerToevoeging";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[38] = "../woonlocatie/KADBinnenlandsAdres/huisNummerToevoeging";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[39] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/postcode";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[39] = "../woonlocatie/KADBinnenlandsAdres/postcode";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[40] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/overlijden/datumOverlijden";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[40] = "../overlijden/datumOverlijden";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[41] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/BuitenlandsAdres/woonplaats";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[41] = "../postlocatie/BuitenlandsAdres/woonplaats";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[42] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/@id";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[42] = "../@id";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[43] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/woonplaatsNaam";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[43] = "../postlocatie/KADBinnenlandsAdres/woonplaatsNaam";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[44] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/BuitenlandsAdres/land/waarde";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[44] = "../woonlocatie/BuitenlandsAdres/land/waarde";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[45] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/PostbusAdres/postbusnummer";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[45] = "../postlocatie/PostbusAdres/postbusnummer";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[46] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/identificatie/namespace";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[46] = "namespace";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[47] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/beschikkingsbevoegdheid/waarde";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[47] = "../beschikkingsbevoegdheid/waarde";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[48] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBuitenlandsAdres/regio";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[48] = "../woonlocatie/KADBuitenlandsAdres/regio";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[49] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBuitenlandsAdres/woonplaats";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[49] = "../woonlocatie/KADBuitenlandsAdres/woonplaats";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[50] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/geboorte/geboorteland/code";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[50] = "../geboorte/geboorteland/code";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[51] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBuitenlandsAdres/land";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[51] = "../woonlocatie/KADBuitenlandsAdres/land";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[52] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/geslacht/geslachtsaanduiding/code";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[52] = "../geslacht/geslachtsaanduiding/code";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[53] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/postcode";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[53] = "../postlocatie/KADBinnenlandsAdres/postcode";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[54] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/aanduidingNaamgebruik/waarde";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[54] = "../aanduidingNaamgebruik/waarde";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[55] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/identificatie/lokaalId";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[55] = "lokaalId";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[56] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBuitenlandsAdres/adres";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[56] = "../woonlocatie/KADBuitenlandsAdres/adres";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[57] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/aanduidingNaamgebruik/code";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[57] = "../aanduidingNaamgebruik/code";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[58] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/geboorte/geboortedatum";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[58] = "../geboorte/geboortedatum";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[59] = "row1.content:/KadastraalObjectSnapshot/toestandsdatum";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[59] = "../../toestandsdatum";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[60] = "row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/huisNummer";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[60] = "../woonlocatie/KADBinnenlandsAdres/huisNummer";
				
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT);
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_3_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT = docToFlat_tXMLMap_3_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT: resultSet_tXMLMap_3_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_3_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT : oneRow_tXMLMap_3_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT.getKey(),entry_tXMLMap_3_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output tables

out1 = null;


// # Output table : 'out1'

out1_tmp = new out1Struct();
out1_tmp.kdoreferentie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
out1_tmp.toestandsdatum = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/toestandsdatum") ;
out1_tmp.nietingezeteneid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/@id");
out1_tmp.nietingezeteneidnamespace = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/identificatie/namespace");
out1_tmp.nietingezeteneidlokaalid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/identificatie/lokaalId");
out1_tmp.nietingezeteneidversie = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/identificatie/versie");
out1_tmp.nietingezetenebeschikkingsbevoegdheidcode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/beschikkingsbevoegdheid/code");
out1_tmp.nietingezetenebeschikkingsbevoegdheidwaarde = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/beschikkingsbevoegdheid/waarde");
out1_tmp.nietingezeteneposlockadbinadroprnaam = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/openbareRuimteNaam");
out1_tmp.nietingezeteneposlockadbinadrhuisletter = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/huisLetter");
out1_tmp.nietingezeteneposlockadbinadrhuisnum = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/huisNummer");
out1_tmp.nietingezeteneposlockadbinadrhuisnumtoevoeg = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/huisNummerToevoeging");
out1_tmp.nietingezeteneposlockadbinadrpostcode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/postcode");
out1_tmp.nietingezeteneposlockadbinadrwplnaam = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBinnenlandsAdres/woonplaatsNaam");
out1_tmp.nietingezeteneposlockadbuitadres = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBuitenlandsAdres/adres");
out1_tmp.nietingezeteneposlockadbuitadrwoonplaats = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBuitenlandsAdres/woonplaats");
out1_tmp.nietingezeteneposlockadbuitadrregio = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBuitenlandsAdres/regio");
out1_tmp.nietingezeteneposlockadbuitadrland = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/KADBuitenlandsAdres/land");
out1_tmp.nietingezeteneposlocbuitadres = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/BuitenlandsAdres/adres");
out1_tmp.nietingezeteneposlocbuitadrwoonplaats = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/BuitenlandsAdres/woonplaats");
out1_tmp.nietingezeteneposlocbuitadrregio = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/BuitenlandsAdres/regio");
out1_tmp.nietingezeteneposlocbuitadrlandcode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/BuitenlandsAdres/land/code");
out1_tmp.nietingezeteneposlocbuitadrlandwaarde = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/BuitenlandsAdres/land/waarde");
out1_tmp.nietingezeteneposlocpostbusnummer = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/PostbusAdres/postbusnummer");
out1_tmp.nietingezeteneposlocpostbusadrpostcode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/PostbusAdres/postcode");
out1_tmp.nietingezeteneposlocpostbusadrwoonplaatsnaam = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/postlocatie/PostbusAdres/woonplaatsNaam");
out1_tmp.nietingezetenewoonlocbuitadres = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/BuitenlandsAdres/adres");
out1_tmp.nietingezetenewoonlocbuitadrwoonplaats = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/BuitenlandsAdres/woonplaats");
out1_tmp.nietingezetenewoonlocbuitadrregio = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/BuitenlandsAdres/regio");
out1_tmp.nietingezetenewoonlocbuitadrlandcode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/BuitenlandsAdres/land/code");
out1_tmp.nietingezetenewoonlocbuitadrlandwaarde = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/BuitenlandsAdres/land/waarde");
out1_tmp.nietingezetenewoonlockadbuitadres = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBuitenlandsAdres/adres");
out1_tmp.nietingezetenewoonlockadbuitadrwoonplaats = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBuitenlandsAdres/woonplaats");
out1_tmp.nietingezetenewoonlockadbuitadrregio = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBuitenlandsAdres/regio");
out1_tmp.nietingezetenewoonlockadbuitadrland = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBuitenlandsAdres/land");
out1_tmp.nietingezetenewoonlockadbinadroprnaam = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/openbareRuimteNaam");
out1_tmp.nietingezetenewoonlockadbinadrhuislet = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/huisLetter");
out1_tmp.nietingezetenewoonlockadbinadrhuisnum = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/huisNummer");
out1_tmp.nietingezetenewoonlockadbinadrhuisnumtoevoeg = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/huisNummerToevoeging");
out1_tmp.nietingezetenewoonlockadbinadrpostcode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/postcode");
out1_tmp.nietingezetenewoonlockadbinadrwplnaam = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/woonlocatie/KADBinnenlandsAdres/woonplaatsNaam");
out1_tmp.nietingezetenebsn = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/BSN");
out1_tmp.nietingezetenebsnnilreason = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/BSN/@nilReason");
out1_tmp.nietingezetenenaamgeslachtsnaam = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/naam/geslachtsnaam");
out1_tmp.nietingezetenenaamvoornamen = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/naam/voornamen");
out1_tmp.nietingezetenenaamvoorvoegselsgeslachtsnaam = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/naam/voorvoegselsgeslachtsnaam");
out1_tmp.nietingezetenegeslachtsaanduidingcode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/geslacht/geslachtsaanduiding/code");
out1_tmp.nietingezetenegeslachtsaanduidingwaarde = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/geslacht/geslachtsaanduiding/waarde");
out1_tmp.nietingezeteneaanduidingnaamgebruikcode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/aanduidingNaamgebruik/code");
out1_tmp.nietingezeteneaanduidingnaamgebruikwaarde = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/aanduidingNaamgebruik/waarde");
out1_tmp.nietingezetenegeboortedatum = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/geboorte/geboortedatum");
out1_tmp.nietingezetenegeboortedatumnilreason = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/geboorte/geboortedatum/@nilReason");
out1_tmp.nietingezetenegeboorteplaats = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/geboorte/geboorteplaats");
out1_tmp.nietingezetenegeboortelandcode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/geboorte/geboorteland/code");
out1_tmp.nietingezetenegeboortelandwaarde = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/geboorte/geboorteland/waarde");
out1_tmp.nietingezetenedatumoverlijden = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/overlijden/datumOverlijden");
out1_tmp.nietingezeteheeftpartnergeslachtsnaam = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/heeftPartnerschap/Partnerschap/naamPartner/geslachtsnaam");
out1_tmp.nietingezeteheeftpartnervoornamen = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/heeftPartnerschap/Partnerschap/naamPartner/voornamen");
out1_tmp.nietingezeteheeftpartnervoorvoegselsgeslachtsnaam = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/heeftPartnerschap/Partnerschap/naamPartner/voorvoegselsgeslachtsnaam");
out1_tmp.nietingezetenelandwaarnaarvertrokkencode = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/landWaarnaarVertrokken/code");
out1_tmp.nietingezetenelandwaarnaarvertrokkenwaarde = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/NietIngezetene/landWaarnaarVertrokken/waarde");allOutsForAggregate_tXMLMap_3.add(out1_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_3_TXMLMAP_OUT++;

/**
 * [tXMLMap_3_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	
 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	




			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_3_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tPostgresPlusOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_1", false);
		start_Hash.put("tPostgresPlusOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("out1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_1 = 0;
		
	





String dbschema_tPostgresPlusOutput_1 = null;
	dbschema_tPostgresPlusOutput_1 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_1 = null;
if(dbschema_tPostgresPlusOutput_1 == null || dbschema_tPostgresPlusOutput_1.trim().length() == 0) {
	tableName_tPostgresPlusOutput_1 = "brk_nietingezetene";
} else {
	tableName_tPostgresPlusOutput_1 = dbschema_tPostgresPlusOutput_1 + "\".\"" + "brk_nietingezetene";
}

int nb_line_tPostgresPlusOutput_1 = 0;
int nb_line_update_tPostgresPlusOutput_1 = 0;
int nb_line_inserted_tPostgresPlusOutput_1 = 0;
int nb_line_deleted_tPostgresPlusOutput_1 = 0;
int nb_line_rejected_tPostgresPlusOutput_1 = 0;

int deletedCount_tPostgresPlusOutput_1=0;
int updatedCount_tPostgresPlusOutput_1=0;
int insertedCount_tPostgresPlusOutput_1=0;
int rejectedCount_tPostgresPlusOutput_1=0;

boolean whetherReject_tPostgresPlusOutput_1 = false;


java.sql.Connection conn_tPostgresPlusOutput_1 = null;
	conn_tPostgresPlusOutput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_1 = false;
            String defaultSchema_tPostgresPlusOutput_1 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_1 = dbMetaData_tPostgresPlusOutput_1.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_1 == null || dbschema_tPostgresPlusOutput_1.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_1 = stmtSchema_tPostgresPlusOutput_1.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_1.next()){
                            defaultSchema_tPostgresPlusOutput_1 = rsSchema_tPostgresPlusOutput_1.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_1.next()) {
                    String table_tPostgresPlusOutput_1 = rsTable_tPostgresPlusOutput_1.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_1 = rsTable_tPostgresPlusOutput_1.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_1.equals("brk_nietingezetene")
                        && (schema_tPostgresPlusOutput_1.equals(dbschema_tPostgresPlusOutput_1) || ((dbschema_tPostgresPlusOutput_1 == null || dbschema_tPostgresPlusOutput_1.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_1.equals(schema_tPostgresPlusOutput_1)))) {
                        whetherExist_tPostgresPlusOutput_1 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_1) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_1.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_1 + "\"(\"kdoreferentie\" VARCHAR(999)  ,\"toestandsdatum\" VARCHAR(999)  ,\"nietingezeteneid\" VARCHAR(999)  ,\"nietingezeteneidnamespace\" VARCHAR(999)  ,\"nietingezeteneidlokaalid\" VARCHAR(999)  ,\"nietingezeteneidversie\" VARCHAR(999)  ,\"nietingezetenebeschikkingsbevoegdheidcode\" VARCHAR(999)  ,\"nietingezetenebeschikkingsbevoegdheidwaarde\" VARCHAR(999)  ,\"nietingezeteneposlockadbinadroprnaam\" VARCHAR(999)  ,\"nietingezeteneposlockadbinadrhuisletter\" VARCHAR(999)  ,\"nietingezeteneposlockadbinadrhuisnum\" VARCHAR(999)  ,\"nietingezeteneposlockadbinadrhuisnumtoevoeg\" VARCHAR(999)  ,\"nietingezeteneposlockadbinadrpostcode\" VARCHAR(999)  ,\"nietingezeteneposlockadbinadrwplnaam\" VARCHAR(999)  ,\"nietingezeteneposlockadbuitadres\" VARCHAR(999)  ,\"nietingezeteneposlockadbuitadrwoonplaats\" VARCHAR(999)  ,\"nietingezeteneposlockadbuitadrregio\" VARCHAR(999)  ,\"nietingezeteneposlockadbuitadrland\" VARCHAR(999)  ,\"nietingezeteneposlocbuitadres\" VARCHAR(999)  ,\"nietingezeteneposlocbuitadrwoonplaats\" VARCHAR(999)  ,\"nietingezeteneposlocbuitadrregio\" VARCHAR(999)  ,\"nietingezeteneposlocbuitadrlandcode\" VARCHAR(999)  ,\"nietingezeteneposlocbuitadrlandwaarde\" VARCHAR(999)  ,\"nietingezeteneposlocpostbusnummer\" VARCHAR(999)  ,\"nietingezeteneposlocpostbusadrpostcode\" VARCHAR(999)  ,\"nietingezeteneposlocpostbusadrwoonplaatsnaam\" VARCHAR(999)  ,\"nietingezetenewoonlocbuitadres\" VARCHAR(999)  ,\"nietingezetenewoonlocbuitadrwoonplaats\" VARCHAR(999)  ,\"nietingezetenewoonlocbuitadrregio\" VARCHAR(999)  ,\"nietingezetenewoonlocbuitadrlandcode\" VARCHAR(999)  ,\"nietingezetenewoonlocbuitadrlandwaarde\" VARCHAR(999)  ,\"nietingezetenewoonlockadbuitadres\" VARCHAR(999)  ,\"nietingezetenewoonlockadbuitadrwoonplaats\" VARCHAR(999)  ,\"nietingezetenewoonlockadbuitadrregio\" VARCHAR(999)  ,\"nietingezetenewoonlockadbuitadrland\" VARCHAR(999)  ,\"nietingezetenewoonlockadbinadroprnaam\" VARCHAR(999)  ,\"nietingezetenewoonlockadbinadrhuislet\" VARCHAR(999)  ,\"nietingezetenewoonlockadbinadrhuisnum\" VARCHAR(999)  ,\"nietingezetenewoonlockadbinadrhuisnumtoevoeg\" VARCHAR(999)  ,\"nietingezetenewoonlockadbinadrpostcode\" VARCHAR(999)  ,\"nietingezetenewoonlockadbinadrwplnaam\" VARCHAR(999)  ,\"nietingezetenebsn\" VARCHAR(999)  ,\"nietingezetenebsnnilreason\" VARCHAR(999)  ,\"nietingezetenenaamgeslachtsnaam\" VARCHAR(999)  ,\"nietingezetenenaamvoornamen\" VARCHAR(999)  ,\"nietingezetenenaamvoorvoegselsgeslachtsnaam\" VARCHAR(999)  ,\"nietingezetenegeslachtsaanduidingcode\" VARCHAR(999)  ,\"nietingezetenegeslachtsaanduidingwaarde\" VARCHAR(999)  ,\"nietingezeteneaanduidingnaamgebruikcode\" VARCHAR(999)  ,\"nietingezeteneaanduidingnaamgebruikwaarde\" VARCHAR(999)  ,\"nietingezetenegeboortedatum\" VARCHAR(999)  ,\"nietingezetenegeboortedatumnilreason\" VARCHAR(999)  ,\"nietingezetenegeboorteplaats\" VARCHAR(999)  ,\"nietingezetenegeboortelandcode\" VARCHAR(999)  ,\"nietingezetenegeboortelandwaarde\" VARCHAR(999)  ,\"nietingezetenedatumoverlijden\" VARCHAR(999)  ,\"nietingezeteheeftpartnergeslachtsnaam\" VARCHAR(999)  ,\"nietingezeteheeftpartnervoornamen\" VARCHAR(999)  ,\"nietingezeteheeftpartnervoorvoegselsgeslachtsnaam\" VARCHAR(999)  ,\"nietingezetenelandwaarnaarvertrokkencode\" VARCHAR(999)  ,\"nietingezetenelandwaarnaarvertrokkenwaarde\" VARCHAR(999)  ,primary key(\"nietingezeteneid\"))");
                    }
                }
	    String insert_tPostgresPlusOutput_1 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_1 + "\" (\"kdoreferentie\",\"toestandsdatum\",\"nietingezeteneid\",\"nietingezeteneidnamespace\",\"nietingezeteneidlokaalid\",\"nietingezeteneidversie\",\"nietingezetenebeschikkingsbevoegdheidcode\",\"nietingezetenebeschikkingsbevoegdheidwaarde\",\"nietingezeteneposlockadbinadroprnaam\",\"nietingezeteneposlockadbinadrhuisletter\",\"nietingezeteneposlockadbinadrhuisnum\",\"nietingezeteneposlockadbinadrhuisnumtoevoeg\",\"nietingezeteneposlockadbinadrpostcode\",\"nietingezeteneposlockadbinadrwplnaam\",\"nietingezeteneposlockadbuitadres\",\"nietingezeteneposlockadbuitadrwoonplaats\",\"nietingezeteneposlockadbuitadrregio\",\"nietingezeteneposlockadbuitadrland\",\"nietingezeteneposlocbuitadres\",\"nietingezeteneposlocbuitadrwoonplaats\",\"nietingezeteneposlocbuitadrregio\",\"nietingezeteneposlocbuitadrlandcode\",\"nietingezeteneposlocbuitadrlandwaarde\",\"nietingezeteneposlocpostbusnummer\",\"nietingezeteneposlocpostbusadrpostcode\",\"nietingezeteneposlocpostbusadrwoonplaatsnaam\",\"nietingezetenewoonlocbuitadres\",\"nietingezetenewoonlocbuitadrwoonplaats\",\"nietingezetenewoonlocbuitadrregio\",\"nietingezetenewoonlocbuitadrlandcode\",\"nietingezetenewoonlocbuitadrlandwaarde\",\"nietingezetenewoonlockadbuitadres\",\"nietingezetenewoonlockadbuitadrwoonplaats\",\"nietingezetenewoonlockadbuitadrregio\",\"nietingezetenewoonlockadbuitadrland\",\"nietingezetenewoonlockadbinadroprnaam\",\"nietingezetenewoonlockadbinadrhuislet\",\"nietingezetenewoonlockadbinadrhuisnum\",\"nietingezetenewoonlockadbinadrhuisnumtoevoeg\",\"nietingezetenewoonlockadbinadrpostcode\",\"nietingezetenewoonlockadbinadrwplnaam\",\"nietingezetenebsn\",\"nietingezetenebsnnilreason\",\"nietingezetenenaamgeslachtsnaam\",\"nietingezetenenaamvoornamen\",\"nietingezetenenaamvoorvoegselsgeslachtsnaam\",\"nietingezetenegeslachtsaanduidingcode\",\"nietingezetenegeslachtsaanduidingwaarde\",\"nietingezeteneaanduidingnaamgebruikcode\",\"nietingezeteneaanduidingnaamgebruikwaarde\",\"nietingezetenegeboortedatum\",\"nietingezetenegeboortedatumnilreason\",\"nietingezetenegeboorteplaats\",\"nietingezetenegeboortelandcode\",\"nietingezetenegeboortelandwaarde\",\"nietingezetenedatumoverlijden\",\"nietingezeteheeftpartnergeslachtsnaam\",\"nietingezeteheeftpartnervoornamen\",\"nietingezeteheeftpartnervoorvoegselsgeslachtsnaam\",\"nietingezetenelandwaarnaarvertrokkencode\",\"nietingezetenelandwaarnaarvertrokkenwaarde\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.prepareStatement(insert_tPostgresPlusOutput_1);
	    resourceMap.put("pstmt_tPostgresPlusOutput_1", pstmt_tPostgresPlusOutput_1);
	    

 



/**
 * [tPostgresPlusOutput_1 begin ] stop
 */



	
	/**
	 * [tXMLMap_3_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_3_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	
		int tos_count_tXMLMap_3_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_3 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_3");
for(Object  row_out_tXMLMap_3_TXMLMAP_IN : outs_tXMLMap_3) {//TD512
 



/**
 * [tXMLMap_3_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

	out1 = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof out1Struct) {
		out1 = (out1Struct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_3_TXMLMAP_IN++;

/**
 * [tXMLMap_3_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tPostgresPlusOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	

			//out1
			//out1


			
				
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_1 = false;
                    if(out1.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(1, out1.kdoreferentie);
}

                    if(out1.toestandsdatum == null) {
pstmt_tPostgresPlusOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(2, out1.toestandsdatum);
}

                    if(out1.nietingezeteneid == null) {
pstmt_tPostgresPlusOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(3, out1.nietingezeteneid);
}

                    if(out1.nietingezeteneidnamespace == null) {
pstmt_tPostgresPlusOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(4, out1.nietingezeteneidnamespace);
}

                    if(out1.nietingezeteneidlokaalid == null) {
pstmt_tPostgresPlusOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(5, out1.nietingezeteneidlokaalid);
}

                    if(out1.nietingezeteneidversie == null) {
pstmt_tPostgresPlusOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(6, out1.nietingezeteneidversie);
}

                    if(out1.nietingezetenebeschikkingsbevoegdheidcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(7, out1.nietingezetenebeschikkingsbevoegdheidcode);
}

                    if(out1.nietingezetenebeschikkingsbevoegdheidwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(8, out1.nietingezetenebeschikkingsbevoegdheidwaarde);
}

                    if(out1.nietingezeteneposlockadbinadroprnaam == null) {
pstmt_tPostgresPlusOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(9, out1.nietingezeteneposlockadbinadroprnaam);
}

                    if(out1.nietingezeteneposlockadbinadrhuisletter == null) {
pstmt_tPostgresPlusOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(10, out1.nietingezeteneposlockadbinadrhuisletter);
}

                    if(out1.nietingezeteneposlockadbinadrhuisnum == null) {
pstmt_tPostgresPlusOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(11, out1.nietingezeteneposlockadbinadrhuisnum);
}

                    if(out1.nietingezeteneposlockadbinadrhuisnumtoevoeg == null) {
pstmt_tPostgresPlusOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(12, out1.nietingezeteneposlockadbinadrhuisnumtoevoeg);
}

                    if(out1.nietingezeteneposlockadbinadrpostcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(13, out1.nietingezeteneposlockadbinadrpostcode);
}

                    if(out1.nietingezeteneposlockadbinadrwplnaam == null) {
pstmt_tPostgresPlusOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(14, out1.nietingezeteneposlockadbinadrwplnaam);
}

                    if(out1.nietingezeteneposlockadbuitadres == null) {
pstmt_tPostgresPlusOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(15, out1.nietingezeteneposlockadbuitadres);
}

                    if(out1.nietingezeteneposlockadbuitadrwoonplaats == null) {
pstmt_tPostgresPlusOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(16, out1.nietingezeteneposlockadbuitadrwoonplaats);
}

                    if(out1.nietingezeteneposlockadbuitadrregio == null) {
pstmt_tPostgresPlusOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(17, out1.nietingezeteneposlockadbuitadrregio);
}

                    if(out1.nietingezeteneposlockadbuitadrland == null) {
pstmt_tPostgresPlusOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(18, out1.nietingezeteneposlockadbuitadrland);
}

                    if(out1.nietingezeteneposlocbuitadres == null) {
pstmt_tPostgresPlusOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(19, out1.nietingezeteneposlocbuitadres);
}

                    if(out1.nietingezeteneposlocbuitadrwoonplaats == null) {
pstmt_tPostgresPlusOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(20, out1.nietingezeteneposlocbuitadrwoonplaats);
}

                    if(out1.nietingezeteneposlocbuitadrregio == null) {
pstmt_tPostgresPlusOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(21, out1.nietingezeteneposlocbuitadrregio);
}

                    if(out1.nietingezeteneposlocbuitadrlandcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(22, out1.nietingezeteneposlocbuitadrlandcode);
}

                    if(out1.nietingezeteneposlocbuitadrlandwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(23, out1.nietingezeteneposlocbuitadrlandwaarde);
}

                    if(out1.nietingezeteneposlocpostbusnummer == null) {
pstmt_tPostgresPlusOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(24, out1.nietingezeteneposlocpostbusnummer);
}

                    if(out1.nietingezeteneposlocpostbusadrpostcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(25, out1.nietingezeteneposlocpostbusadrpostcode);
}

                    if(out1.nietingezeteneposlocpostbusadrwoonplaatsnaam == null) {
pstmt_tPostgresPlusOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(26, out1.nietingezeteneposlocpostbusadrwoonplaatsnaam);
}

                    if(out1.nietingezetenewoonlocbuitadres == null) {
pstmt_tPostgresPlusOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(27, out1.nietingezetenewoonlocbuitadres);
}

                    if(out1.nietingezetenewoonlocbuitadrwoonplaats == null) {
pstmt_tPostgresPlusOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(28, out1.nietingezetenewoonlocbuitadrwoonplaats);
}

                    if(out1.nietingezetenewoonlocbuitadrregio == null) {
pstmt_tPostgresPlusOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(29, out1.nietingezetenewoonlocbuitadrregio);
}

                    if(out1.nietingezetenewoonlocbuitadrlandcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(30, out1.nietingezetenewoonlocbuitadrlandcode);
}

                    if(out1.nietingezetenewoonlocbuitadrlandwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(31, out1.nietingezetenewoonlocbuitadrlandwaarde);
}

                    if(out1.nietingezetenewoonlockadbuitadres == null) {
pstmt_tPostgresPlusOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(32, out1.nietingezetenewoonlockadbuitadres);
}

                    if(out1.nietingezetenewoonlockadbuitadrwoonplaats == null) {
pstmt_tPostgresPlusOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(33, out1.nietingezetenewoonlockadbuitadrwoonplaats);
}

                    if(out1.nietingezetenewoonlockadbuitadrregio == null) {
pstmt_tPostgresPlusOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(34, out1.nietingezetenewoonlockadbuitadrregio);
}

                    if(out1.nietingezetenewoonlockadbuitadrland == null) {
pstmt_tPostgresPlusOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(35, out1.nietingezetenewoonlockadbuitadrland);
}

                    if(out1.nietingezetenewoonlockadbinadroprnaam == null) {
pstmt_tPostgresPlusOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(36, out1.nietingezetenewoonlockadbinadroprnaam);
}

                    if(out1.nietingezetenewoonlockadbinadrhuislet == null) {
pstmt_tPostgresPlusOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(37, out1.nietingezetenewoonlockadbinadrhuislet);
}

                    if(out1.nietingezetenewoonlockadbinadrhuisnum == null) {
pstmt_tPostgresPlusOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(38, out1.nietingezetenewoonlockadbinadrhuisnum);
}

                    if(out1.nietingezetenewoonlockadbinadrhuisnumtoevoeg == null) {
pstmt_tPostgresPlusOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(39, out1.nietingezetenewoonlockadbinadrhuisnumtoevoeg);
}

                    if(out1.nietingezetenewoonlockadbinadrpostcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(40, out1.nietingezetenewoonlockadbinadrpostcode);
}

                    if(out1.nietingezetenewoonlockadbinadrwplnaam == null) {
pstmt_tPostgresPlusOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(41, out1.nietingezetenewoonlockadbinadrwplnaam);
}

                    if(out1.nietingezetenebsn == null) {
pstmt_tPostgresPlusOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(42, out1.nietingezetenebsn);
}

                    if(out1.nietingezetenebsnnilreason == null) {
pstmt_tPostgresPlusOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(43, out1.nietingezetenebsnnilreason);
}

                    if(out1.nietingezetenenaamgeslachtsnaam == null) {
pstmt_tPostgresPlusOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(44, out1.nietingezetenenaamgeslachtsnaam);
}

                    if(out1.nietingezetenenaamvoornamen == null) {
pstmt_tPostgresPlusOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(45, out1.nietingezetenenaamvoornamen);
}

                    if(out1.nietingezetenenaamvoorvoegselsgeslachtsnaam == null) {
pstmt_tPostgresPlusOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(46, out1.nietingezetenenaamvoorvoegselsgeslachtsnaam);
}

                    if(out1.nietingezetenegeslachtsaanduidingcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(47, out1.nietingezetenegeslachtsaanduidingcode);
}

                    if(out1.nietingezetenegeslachtsaanduidingwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(48, out1.nietingezetenegeslachtsaanduidingwaarde);
}

                    if(out1.nietingezeteneaanduidingnaamgebruikcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(49, out1.nietingezeteneaanduidingnaamgebruikcode);
}

                    if(out1.nietingezeteneaanduidingnaamgebruikwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(50, out1.nietingezeteneaanduidingnaamgebruikwaarde);
}

                    if(out1.nietingezetenegeboortedatum == null) {
pstmt_tPostgresPlusOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(51, out1.nietingezetenegeboortedatum);
}

                    if(out1.nietingezetenegeboortedatumnilreason == null) {
pstmt_tPostgresPlusOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(52, out1.nietingezetenegeboortedatumnilreason);
}

                    if(out1.nietingezetenegeboorteplaats == null) {
pstmt_tPostgresPlusOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(53, out1.nietingezetenegeboorteplaats);
}

                    if(out1.nietingezetenegeboortelandcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(54, out1.nietingezetenegeboortelandcode);
}

                    if(out1.nietingezetenegeboortelandwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(55, out1.nietingezetenegeboortelandwaarde);
}

                    if(out1.nietingezetenedatumoverlijden == null) {
pstmt_tPostgresPlusOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(56, out1.nietingezetenedatumoverlijden);
}

                    if(out1.nietingezeteheeftpartnergeslachtsnaam == null) {
pstmt_tPostgresPlusOutput_1.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(57, out1.nietingezeteheeftpartnergeslachtsnaam);
}

                    if(out1.nietingezeteheeftpartnervoornamen == null) {
pstmt_tPostgresPlusOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(58, out1.nietingezeteheeftpartnervoornamen);
}

                    if(out1.nietingezeteheeftpartnervoorvoegselsgeslachtsnaam == null) {
pstmt_tPostgresPlusOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(59, out1.nietingezeteheeftpartnervoorvoegselsgeslachtsnaam);
}

                    if(out1.nietingezetenelandwaarnaarvertrokkencode == null) {
pstmt_tPostgresPlusOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(60, out1.nietingezetenelandwaarnaarvertrokkencode);
}

                    if(out1.nietingezetenelandwaarnaarvertrokkenwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(61, out1.nietingezetenelandwaarnaarvertrokkenwaarde);
}


                       try {
                           insertedCount_tPostgresPlusOutput_1 = insertedCount_tPostgresPlusOutput_1 + pstmt_tPostgresPlusOutput_1.executeUpdate();
                           nb_line_tPostgresPlusOutput_1++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_1 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_1) {
            }

 


	tos_count_tPostgresPlusOutput_1++;

/**
 * [tPostgresPlusOutput_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	

 



/**
 * [tPostgresPlusOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	

 



/**
 * [tPostgresPlusOutput_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tXMLMap_3_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_3_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_3_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tPostgresPlusOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	



        if(pstmt_tPostgresPlusOutput_1 != null) {
            pstmt_tPostgresPlusOutput_1.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_1");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_1", true);

	nb_line_deleted_tPostgresPlusOutput_1=nb_line_deleted_tPostgresPlusOutput_1+ deletedCount_tPostgresPlusOutput_1;
	nb_line_update_tPostgresPlusOutput_1=nb_line_update_tPostgresPlusOutput_1 + updatedCount_tPostgresPlusOutput_1;
	nb_line_inserted_tPostgresPlusOutput_1=nb_line_inserted_tPostgresPlusOutput_1 + insertedCount_tPostgresPlusOutput_1;
	nb_line_rejected_tPostgresPlusOutput_1=nb_line_rejected_tPostgresPlusOutput_1 + rejectedCount_tPostgresPlusOutput_1;
	
        globalMap.put("tPostgresPlusOutput_1_NB_LINE",nb_line_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_1);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("out1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_1", true);
end_Hash.put("tPostgresPlusOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostgresPlusOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputXML_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tPostgresPlusRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tPostgresPlusOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_1 = null;
                if ((pstmtToClose_tPostgresPlusOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_1")) != null) {
                    pstmtToClose_tPostgresPlusOutput_1.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


context.result = true;
context.jobName = "brk_nietingezetene_job";
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_1.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("xmlType", context.xmlType);
                    paraList_tRunJob_1.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("jobName", context.jobName);
                    paraList_tRunJob_1.add("--context_type " + "jobName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("result", context.result);
                    paraList_tRunJob_1.add("--context_type " + "result" + "=" + "id_Boolean");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		brk.joblogger_0_1.JobLogger childJob_tRunJob_1 = new brk.joblogger_0_1.JobLogger();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
					java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresPlusRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresPlusRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresPlusRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusRow_1", false);
		start_Hash.put("tPostgresPlusRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusRow_1";

	
		int tos_count_tPostgresPlusRow_1 = 0;
		

	java.sql.Connection conn_tPostgresPlusRow_1 = null;
	String query_tPostgresPlusRow_1 = "";
	boolean whetherReject_tPostgresPlusRow_1 = false;
				conn_tPostgresPlusRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
			
    resourceMap.put("conn_tPostgresPlusRow_1", conn_tPostgresPlusRow_1);
        java.sql.Statement stmt_tPostgresPlusRow_1 = conn_tPostgresPlusRow_1.createStatement();
        resourceMap.put("stmt_tPostgresPlusRow_1", stmt_tPostgresPlusRow_1);

 



/**
 * [tPostgresPlusRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

query_tPostgresPlusRow_1 = "COMMENT ON TABLE brk_nietingezetene IS 'Niet ingezetene';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenebsn IS 'B"
+"SN';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenenaamvoornamen IS 'Voornaam';\nCOMMENT ON COLUMN brk_nietingezet"
+"ene.nietingezetenenaamvoorvoegselsgeslachtsnaam IS 'Tussenvoegsel';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetene"
+"naamgeslachtsnaam IS 'Achternaam';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenegeboortedatum IS 'Geboortedatum';"
+"\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenedatumoverlijden IS 'Datum overlijden';\n\n--KAD postlocatie binnenl"
+"and\nCOMMENT ON COLUMN brk_nietingezetene.nietingezeteneposlockadbinadroprnaam IS 'KAD Postlocatie openbareruimtenaam';"
+"\nCOMMENT ON COLUMN brk_nietingezetene.nietingezeteneposlockadbinadrhuisnum IS 'KAD Postlocatie huisnummer';\nCOMMENT ON "
+"COLUMN brk_nietingezetene.nietingezeteneposlockadbinadrhuisletter IS 'KAD Postlocatie huisletter';\nCOMMENT ON COLUMN br"
+"k_nietingezetene.nietingezeteneposlockadbinadrhuisnumtoevoeg IS 'KAD Postlocatie huisnummertoevoeging';\nCOMMENT ON COLU"
+"MN brk_nietingezetene.nietingezeteneposlockadbinadrpostcode IS 'KAD Postlocatie postcode';\nCOMMENT ON COLUMN brk_nietin"
+"gezetene.nietingezeteneposlockadbinadrwplnaam IS 'KAD Postlocatie woonplaats';\n\n--KAD postlocatie buitenland\nCOMMENT "
+"ON COLUMN brk_nietingezetene.nietingezeteneposlockadbuitadres IS 'KAD Postlocatie buitenland adres';\nCOMMENT ON COLUMN "
+"brk_nietingezetene.nietingezeteneposlockadbuitadrwoonplaats IS 'KAD Postlocatie buitenland woonplaats';\nCOMMENT ON COLU"
+"MN brk_nietingezetene.nietingezeteneposlockadbuitadrregio IS 'KAD Postlocatie buitenland regio';\nCOMMENT ON COLUMN brk_"
+"nietingezetene.nietingezeteneposlockadbuitadrland IS 'KAD Postlocatie buitenland';\n\n--Postlocatie buitenland\nCOMMENT "
+"ON COLUMN brk_nietingezetene.nietingezeteneposlocbuitadres IS 'Postlocatie buitenland adres';\nCOMMENT ON COLUMN brk_nie"
+"tingezetene.nietingezeteneposlocbuitadrwoonplaats IS 'Postlocatie buitenland woonplaats';\nCOMMENT ON COLUMN brk_nieting"
+"ezetene.nietingezeteneposlocbuitadrregio IS 'Postlocatie buitenland regio';\nCOMMENT ON COLUMN brk_nietingezetene.nietin"
+"gezeteneposlocbuitadrlandcode IS 'Postlocatie buitenland code';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezeteneposl"
+"ocbuitadrlandwaarde IS 'Postlocatie buitenland';\n\n--Postlocaite binnenland\nCOMMENT ON COLUMN brk_nietingezetene.nieti"
+"ngezeteneposlocpostbusnummer IS 'Postlocatie postbusnummer';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezeteneposlocp"
+"ostbusadrpostcode IS 'Postlocatie postcode';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezeteneposlocpostbusadrwoonpla"
+"atsnaam IS 'Postlocatie woonplaats';\n\n--Woonlocaite buitenland\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoo"
+"nlocbuitadres IS 'Woonlocatie buitenland adres';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlocbuitadrwoonp"
+"laats IS 'Woonlocatie buitenland woonplaats';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlocbuitadrregio IS"
+" 'Woonlocatie buitenland regio';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlocbuitadrlandcode IS 'Woonloca"
+"ite buitenland landcode';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlocbuitadrlandwaarde IS 'Woonlocatie b"
+"uitenland';\n\n--KAD woonlocaite buitenland\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlockadbuitadres IS '"
+"KAD woonlocatie buitenland adres';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlockadbuitadrwoonplaats IS 'K"
+"AD woonlocatie buitenland woonplaats';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlockadbuitadrregio IS 'KA"
+"D woonlocatie stlocatie buitenland regio';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlockadbuitadrland IS "
+"'KAD woonlocatie buitenland';\n\n--KAD woonlocatie binnenland\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlo"
+"ckadbinadroprnaam IS 'KAD Woonlocatie openbareruimtenaam';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlocka"
+"dbinadrhuisnum IS 'KAD Woonlocatie huisnummer';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlockadbinadrhuis"
+"let IS 'KAD Woonlocatie huisletter';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlockadbinadrhuisnumtoevoeg "
+"IS 'KAD Woonlocatie huisnummertoevoeging';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlockadbinadrwplnaam I"
+"S 'KAD Woonlocatie postcode';\nCOMMENT ON COLUMN brk_nietingezetene.nietingezetenewoonlockadbinadrpostcode IS 'KAD Woonl"
+"ocatie woonplaats';";
whetherReject_tPostgresPlusRow_1 = false;
globalMap.put("tPostgresPlusRow_1_QUERY",query_tPostgresPlusRow_1);
try {
		stmt_tPostgresPlusRow_1.execute(query_tPostgresPlusRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresPlusRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tPostgresPlusRow_1++;

/**
 * [tPostgresPlusRow_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

 



/**
 * [tPostgresPlusRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

 



/**
 * [tPostgresPlusRow_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

	
        stmt_tPostgresPlusRow_1.close();
        resourceMap.remove("stmt_tPostgresPlusRow_1");
    resourceMap.put("statementClosed_tPostgresPlusRow_1", true);
    resourceMap.put("finish_tPostgresPlusRow_1", true);
 

ok_Hash.put("tPostgresPlusRow_1", true);
end_Hash.put("tPostgresPlusRow_1", System.currentTimeMillis());




/**
 * [tPostgresPlusRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresPlusRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

    if (resourceMap.get("statementClosed_tPostgresPlusRow_1") == null) {
            java.sql.Statement stmtToClose_tPostgresPlusRow_1 = null;
            if ((stmtToClose_tPostgresPlusRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresPlusRow_1")) != null) {
                stmtToClose_tPostgresPlusRow_1.close();
            }
    }
 



/**
 * [tPostgresPlusRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresPlusRow_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final brk_nietingezetene_init brk_nietingezetene_initClass = new brk_nietingezetene_init();

        int exitCode = brk_nietingezetene_initClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = brk_nietingezetene_init.class.getClassLoader().getResourceAsStream("brk/brk_nietingezetene_init_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = brk_nietingezetene_init.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("xmlLocation", "id_String");
                            context.xmlLocation=(String) context.getProperty("xmlLocation");
                        context.setContextType("xmlType", "id_String");
                            context.xmlType=(String) context.getProperty("xmlType");
                        context.setContextType("jobName", "id_String");
                            context.jobName=(String) context.getProperty("jobName");
                        context.setContextType("result", "id_Boolean");
                            try{
                                context.result=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("result"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "result", e.getMessage()));
                                context.result=null;
                            }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("xmlLocation")) {
                context.xmlLocation = (String) parentContextMap.get("xmlLocation");
            }if (parentContextMap.containsKey("xmlType")) {
                context.xmlType = (String) parentContextMap.get("xmlType");
            }if (parentContextMap.containsKey("jobName")) {
                context.jobName = (String) parentContextMap.get("jobName");
            }if (parentContextMap.containsKey("result")) {
                context.result = (Boolean) parentContextMap.get("result");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tWarn_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tWarn_1) {
globalMap.put("tWarn_1_SUBPROCESS_STATE", -1);

e_tWarn_1.printStackTrace();

}
try {
errorCode = null;tPostgresPlusConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresPlusConnection_1) {
globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", -1);

e_tPostgresPlusConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : brk_nietingezetene_init");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresPlusConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresPlusConnection_1", globalMap.get("conn_tPostgresPlusConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     191085 characters generated by Talend Open Studio for Data Integration 
 *     on the 10 mei 2020 14:29:42 CEST
 ************************************************************************************************/