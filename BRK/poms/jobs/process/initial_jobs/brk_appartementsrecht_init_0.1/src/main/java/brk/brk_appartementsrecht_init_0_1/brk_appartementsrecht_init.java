// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package brk.brk_appartementsrecht_init_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Settings;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_11
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: brk_appartementsrecht_init Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class brk_appartementsrecht_init implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(xmlLocation != null){
				
					this.setProperty("xmlLocation", xmlLocation.toString());
				
			}
			
			if(xmlType != null){
				
					this.setProperty("xmlType", xmlType.toString());
				
			}
			
			if(jobName != null){
				
					this.setProperty("jobName", jobName.toString());
				
			}
			
			if(result != null){
				
					this.setProperty("result", result.toString());
				
			}
			
		}

public String xmlLocation;
public String getXmlLocation(){
	return this.xmlLocation;
}
public String xmlType;
public String getXmlType(){
	return this.xmlType;
}
public String jobName;
public String getJobName(){
	return this.jobName;
}
public Boolean result;
public Boolean getResult(){
	return this.result;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "brk_appartementsrecht_init";
	private final String projectName = "BRK";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				brk_appartementsrecht_init.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(brk_appartementsrecht_init.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresPlusConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresPlusRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresPlusRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_1_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_1_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_1_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresPlusConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresPlusRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Begonnen met appartementsrecht (3/23)","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Begonnen met appartementsrecht (3/23)", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Begonnen met appartementsrecht (3/23)"); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 42);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_appartementsrecht_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_appartementsrecht_init = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_appartementsrecht_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_appartementsrecht_init.length == 0) {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_appartementsrecht_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_appartementsrecht_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_appartementsrecht_init) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_appartementsrecht_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_appartementsrecht_init = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_appartementsrecht_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_appartementsrecht_init.length == 0) {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_appartementsrecht_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_appartementsrecht_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_appartementsrecht_init) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row3"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = " - ";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row2"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
row3Struct row3_tmp = new row3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row2.type = lcm.getType();
		row2.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row2.priority = lcm.getPriority();
		row2.message = lcm.getMessage();
		row2.code = lcm.getCode();
		
		row2.moment = java.util.Calendar.getInstance().getTime();
	
    	row2.pid = pid;
		row2.root_pid = rootPid;
		row2.father_pid = fatherPid;
	
    	row2.project = projectName;
    	row2.job = jobName;
    	row2.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row2
			//row2


			
				
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

row3 = null;


// # Output table : 'row3'
row3_tmp.moment = row2.moment;
row3_tmp.message = row2.message;
row3 = row3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row3
			//row3


			
				
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row3.moment != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row3.moment, "HH:mm:ss dd-MM-yyyy")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append(" - ");
    			


   				
	    		if(row3.message != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row2"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row3"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresPlusConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresPlusConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusConnection_1", false);
		start_Hash.put("tPostgresPlusConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusConnection_1";

	
		int tos_count_tPostgresPlusConnection_1 = 0;
		


	
            String dbProperties_tPostgresPlusConnection_1 = "";
            String url_tPostgresPlusConnection_1 = "jdbc:postgresql://"+Settings.get("CONNECTION_DEFINITION", "host")+":"+Settings.get("CONNECTION_DEFINITION", "port")+"/"+Settings.get("CONNECTION_DEFINITION", "database");

            if(dbProperties_tPostgresPlusConnection_1 != null && !"".equals(dbProperties_tPostgresPlusConnection_1.trim())) {
                url_tPostgresPlusConnection_1 = url_tPostgresPlusConnection_1 + "?" + dbProperties_tPostgresPlusConnection_1;
            }
		String dbUser_tPostgresPlusConnection_1 = Settings.get("CONNECTION_DEFINITION", "user");
		
		
			
	final String decryptedPassword_tPostgresPlusConnection_1 = Settings.get("CONNECTION_DEFINITION", "password"); 
			String dbPwd_tPostgresPlusConnection_1 = decryptedPassword_tPostgresPlusConnection_1;
		
	java.sql.Connection conn_tPostgresPlusConnection_1 = null;
	
	
			String sharedConnectionName_tPostgresPlusConnection_1 = "postgres";
			conn_tPostgresPlusConnection_1 = SharedDBConnection.getDBConnection("org.postgresql.Driver",url_tPostgresPlusConnection_1,dbUser_tPostgresPlusConnection_1 , dbPwd_tPostgresPlusConnection_1 , sharedConnectionName_tPostgresPlusConnection_1);
	if (null != conn_tPostgresPlusConnection_1) {
		
			conn_tPostgresPlusConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresPlusConnection_1",Settings.get("SCHEMA_NAME_LOOKUP", "ldf"));

	globalMap.put("conn_" + "tPostgresPlusConnection_1",conn_tPostgresPlusConnection_1);

 



/**
 * [tPostgresPlusConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 


	tos_count_tPostgresPlusConnection_1++;

/**
 * [tPostgresPlusConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresPlusConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 

ok_Hash.put("tPostgresPlusConnection_1", true);
end_Hash.put("tPostgresPlusConnection_1", System.currentTimeMillis());




/**
 * [tPostgresPlusConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresPlusConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputXML_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresPlusConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusConnection_1";

	

 



/**
 * [tPostgresPlusConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_appartementsrecht_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_appartementsrecht_init = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String kdotoestandsdatum;

				public String getKdotoestandsdatum () {
					return this.kdotoestandsdatum;
				}
				
			    public String appartementsrechtid;

				public String getAppartementsrechtid () {
					return this.appartementsrechtid;
				}
				
			    public String appartementsrechtnamespace;

				public String getAppartementsrechtnamespace () {
					return this.appartementsrechtnamespace;
				}
				
			    public String appartementsrechtlokaalid;

				public String getAppartementsrechtlokaalid () {
					return this.appartementsrechtlokaalid;
				}
				
			    public String appartementsrechtversie;

				public String getAppartementsrechtversie () {
					return this.appartementsrechtversie;
				}
				
			    public String appartementsrechtkoopsom;

				public String getAppartementsrechtkoopsom () {
					return this.appartementsrechtkoopsom;
				}
				
			    public String appartementsrechtkoopsomvalutacode;

				public String getAppartementsrechtkoopsomvalutacode () {
					return this.appartementsrechtkoopsomvalutacode;
				}
				
			    public String appartementsrechtkoopsomvalutawaarde;

				public String getAppartementsrechtkoopsomvalutawaarde () {
					return this.appartementsrechtkoopsomvalutawaarde;
				}
				
			    public String appartementsrechtkoopjaar;

				public String getAppartementsrechtkoopjaar () {
					return this.appartementsrechtkoopjaar;
				}
				
			    public String appartementsrechtindicatiemeerobjecten;

				public String getAppartementsrechtindicatiemeerobjecten () {
					return this.appartementsrechtindicatiemeerobjecten;
				}
				
			    public String appartementsrechtkadaanduidingakrkadgemcodcode;

				public String getAppartementsrechtkadaanduidingakrkadgemcodcode () {
					return this.appartementsrechtkadaanduidingakrkadgemcodcode;
				}
				
			    public String appartementsrechtkadaanduidingakrkadgemcodwaarde;

				public String getAppartementsrechtkadaanduidingakrkadgemcodwaarde () {
					return this.appartementsrechtkadaanduidingakrkadgemcodwaarde;
				}
				
			    public String appartementsrechtkadaanduidingnaamkadgemcode;

				public String getAppartementsrechtkadaanduidingnaamkadgemcode () {
					return this.appartementsrechtkadaanduidingnaamkadgemcode;
				}
				
			    public String appartementsrechtkadaanduidingnaamkadgemwaarde;

				public String getAppartementsrechtkadaanduidingnaamkadgemwaarde () {
					return this.appartementsrechtkadaanduidingnaamkadgemwaarde;
				}
				
			    public String appartementsrechtkadaanduidingsectie;

				public String getAppartementsrechtkadaanduidingsectie () {
					return this.appartementsrechtkadaanduidingsectie;
				}
				
			    public String appartementsrechtkadaanduidingperceelnummer;

				public String getAppartementsrechtkadaanduidingperceelnummer () {
					return this.appartementsrechtkadaanduidingperceelnummer;
				}
				
			    public String appartementsrechtkadaanduidingappartsrechtvolgnum;

				public String getAppartementsrechtkadaanduidingappartsrechtvolgnum () {
					return this.appartementsrechtkadaanduidingappartsrechtvolgnum;
				}
				
			    public String appartementsrechtaardcultbebouwdcode;

				public String getAppartementsrechtaardcultbebouwdcode () {
					return this.appartementsrechtaardcultbebouwdcode;
				}
				
			    public String appartementsrechtaardcultbebouwdwaarde;

				public String getAppartementsrechtaardcultbebouwdwaarde () {
					return this.appartementsrechtaardcultbebouwdwaarde;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.appartementsrechtid == null) ? 0 : this.appartementsrechtid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.appartementsrechtid == null) {
							if (other.appartementsrechtid != null)
								return false;
						
						} else if (!this.appartementsrechtid.equals(other.appartementsrechtid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.kdoreferentie = this.kdoreferentie;
	            other.kdotoestandsdatum = this.kdotoestandsdatum;
	            other.appartementsrechtid = this.appartementsrechtid;
	            other.appartementsrechtnamespace = this.appartementsrechtnamespace;
	            other.appartementsrechtlokaalid = this.appartementsrechtlokaalid;
	            other.appartementsrechtversie = this.appartementsrechtversie;
	            other.appartementsrechtkoopsom = this.appartementsrechtkoopsom;
	            other.appartementsrechtkoopsomvalutacode = this.appartementsrechtkoopsomvalutacode;
	            other.appartementsrechtkoopsomvalutawaarde = this.appartementsrechtkoopsomvalutawaarde;
	            other.appartementsrechtkoopjaar = this.appartementsrechtkoopjaar;
	            other.appartementsrechtindicatiemeerobjecten = this.appartementsrechtindicatiemeerobjecten;
	            other.appartementsrechtkadaanduidingakrkadgemcodcode = this.appartementsrechtkadaanduidingakrkadgemcodcode;
	            other.appartementsrechtkadaanduidingakrkadgemcodwaarde = this.appartementsrechtkadaanduidingakrkadgemcodwaarde;
	            other.appartementsrechtkadaanduidingnaamkadgemcode = this.appartementsrechtkadaanduidingnaamkadgemcode;
	            other.appartementsrechtkadaanduidingnaamkadgemwaarde = this.appartementsrechtkadaanduidingnaamkadgemwaarde;
	            other.appartementsrechtkadaanduidingsectie = this.appartementsrechtkadaanduidingsectie;
	            other.appartementsrechtkadaanduidingperceelnummer = this.appartementsrechtkadaanduidingperceelnummer;
	            other.appartementsrechtkadaanduidingappartsrechtvolgnum = this.appartementsrechtkadaanduidingappartsrechtvolgnum;
	            other.appartementsrechtaardcultbebouwdcode = this.appartementsrechtaardcultbebouwdcode;
	            other.appartementsrechtaardcultbebouwdwaarde = this.appartementsrechtaardcultbebouwdwaarde;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.appartementsrechtid = this.appartementsrechtid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_appartementsrecht_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_appartementsrecht_init.length == 0) {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_appartementsrecht_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_appartementsrecht_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_appartementsrecht_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.kdotoestandsdatum = readString(dis);
					
					this.appartementsrechtid = readString(dis);
					
					this.appartementsrechtnamespace = readString(dis);
					
					this.appartementsrechtlokaalid = readString(dis);
					
					this.appartementsrechtversie = readString(dis);
					
					this.appartementsrechtkoopsom = readString(dis);
					
					this.appartementsrechtkoopsomvalutacode = readString(dis);
					
					this.appartementsrechtkoopsomvalutawaarde = readString(dis);
					
					this.appartementsrechtkoopjaar = readString(dis);
					
					this.appartementsrechtindicatiemeerobjecten = readString(dis);
					
					this.appartementsrechtkadaanduidingakrkadgemcodcode = readString(dis);
					
					this.appartementsrechtkadaanduidingakrkadgemcodwaarde = readString(dis);
					
					this.appartementsrechtkadaanduidingnaamkadgemcode = readString(dis);
					
					this.appartementsrechtkadaanduidingnaamkadgemwaarde = readString(dis);
					
					this.appartementsrechtkadaanduidingsectie = readString(dis);
					
					this.appartementsrechtkadaanduidingperceelnummer = readString(dis);
					
					this.appartementsrechtkadaanduidingappartsrechtvolgnum = readString(dis);
					
					this.appartementsrechtaardcultbebouwdcode = readString(dis);
					
					this.appartementsrechtaardcultbebouwdwaarde = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.kdotoestandsdatum,dos);
					
					// String
				
						writeString(this.appartementsrechtid,dos);
					
					// String
				
						writeString(this.appartementsrechtnamespace,dos);
					
					// String
				
						writeString(this.appartementsrechtlokaalid,dos);
					
					// String
				
						writeString(this.appartementsrechtversie,dos);
					
					// String
				
						writeString(this.appartementsrechtkoopsom,dos);
					
					// String
				
						writeString(this.appartementsrechtkoopsomvalutacode,dos);
					
					// String
				
						writeString(this.appartementsrechtkoopsomvalutawaarde,dos);
					
					// String
				
						writeString(this.appartementsrechtkoopjaar,dos);
					
					// String
				
						writeString(this.appartementsrechtindicatiemeerobjecten,dos);
					
					// String
				
						writeString(this.appartementsrechtkadaanduidingakrkadgemcodcode,dos);
					
					// String
				
						writeString(this.appartementsrechtkadaanduidingakrkadgemcodwaarde,dos);
					
					// String
				
						writeString(this.appartementsrechtkadaanduidingnaamkadgemcode,dos);
					
					// String
				
						writeString(this.appartementsrechtkadaanduidingnaamkadgemwaarde,dos);
					
					// String
				
						writeString(this.appartementsrechtkadaanduidingsectie,dos);
					
					// String
				
						writeString(this.appartementsrechtkadaanduidingperceelnummer,dos);
					
					// String
				
						writeString(this.appartementsrechtkadaanduidingappartsrechtvolgnum,dos);
					
					// String
				
						writeString(this.appartementsrechtaardcultbebouwdcode,dos);
					
					// String
				
						writeString(this.appartementsrechtaardcultbebouwdwaarde,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",kdotoestandsdatum="+kdotoestandsdatum);
		sb.append(",appartementsrechtid="+appartementsrechtid);
		sb.append(",appartementsrechtnamespace="+appartementsrechtnamespace);
		sb.append(",appartementsrechtlokaalid="+appartementsrechtlokaalid);
		sb.append(",appartementsrechtversie="+appartementsrechtversie);
		sb.append(",appartementsrechtkoopsom="+appartementsrechtkoopsom);
		sb.append(",appartementsrechtkoopsomvalutacode="+appartementsrechtkoopsomvalutacode);
		sb.append(",appartementsrechtkoopsomvalutawaarde="+appartementsrechtkoopsomvalutawaarde);
		sb.append(",appartementsrechtkoopjaar="+appartementsrechtkoopjaar);
		sb.append(",appartementsrechtindicatiemeerobjecten="+appartementsrechtindicatiemeerobjecten);
		sb.append(",appartementsrechtkadaanduidingakrkadgemcodcode="+appartementsrechtkadaanduidingakrkadgemcodcode);
		sb.append(",appartementsrechtkadaanduidingakrkadgemcodwaarde="+appartementsrechtkadaanduidingakrkadgemcodwaarde);
		sb.append(",appartementsrechtkadaanduidingnaamkadgemcode="+appartementsrechtkadaanduidingnaamkadgemcode);
		sb.append(",appartementsrechtkadaanduidingnaamkadgemwaarde="+appartementsrechtkadaanduidingnaamkadgemwaarde);
		sb.append(",appartementsrechtkadaanduidingsectie="+appartementsrechtkadaanduidingsectie);
		sb.append(",appartementsrechtkadaanduidingperceelnummer="+appartementsrechtkadaanduidingperceelnummer);
		sb.append(",appartementsrechtkadaanduidingappartsrechtvolgnum="+appartementsrechtkadaanduidingappartsrechtvolgnum);
		sb.append(",appartementsrechtaardcultbebouwdcode="+appartementsrechtaardcultbebouwdcode);
		sb.append(",appartementsrechtaardcultbebouwdwaarde="+appartementsrechtaardcultbebouwdwaarde);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.appartementsrechtid, other.appartementsrechtid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class locatieStruct implements routines.system.IPersistableRow<locatieStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_appartementsrecht_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_appartementsrecht_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String appartementsrechtid;

				public String getAppartementsrechtid () {
					return this.appartementsrechtid;
				}
				
			    public String cultuurbebouwdcode;

				public String getCultuurbebouwdcode () {
					return this.cultuurbebouwdcode;
				}
				
			    public String cultuurbebouwd;

				public String getCultuurbebouwd () {
					return this.cultuurbebouwd;
				}
				
			    public String kadbinobrnaam;

				public String getKadbinobrnaam () {
					return this.kadbinobrnaam;
				}
				
			    public String kadbinhuilet;

				public String getKadbinhuilet () {
					return this.kadbinhuilet;
				}
				
			    public String kadbinhuinum;

				public String getKadbinhuinum () {
					return this.kadbinhuinum;
				}
				
			    public String kadbinhuinumtoev;

				public String getKadbinhuinumtoev () {
					return this.kadbinhuinumtoev;
				}
				
			    public String kadbinpostcode;

				public String getKadbinpostcode () {
					return this.kadbinpostcode;
				}
				
			    public String kadbinwoonplaats;

				public String getKadbinwoonplaats () {
					return this.kadbinwoonplaats;
				}
				
			    public String vbobagidentificatie;

				public String getVbobagidentificatie () {
					return this.vbobagidentificatie;
				}
				
			    public String vbohuinum;

				public String getVbohuinum () {
					return this.vbohuinum;
				}
				
			    public String vbohuilet;

				public String getVbohuilet () {
					return this.vbohuilet;
				}
				
			    public String vbohuinumtoev;

				public String getVbohuinumtoev () {
					return this.vbohuinumtoev;
				}
				
			    public String vbopostcode;

				public String getVbopostcode () {
					return this.vbopostcode;
				}
				
			    public String vbowoonplaats;

				public String getVbowoonplaats () {
					return this.vbowoonplaats;
				}
				
			    public String gerelateerdeobr;

				public String getGerelateerdeobr () {
					return this.gerelateerdeobr;
				}
				
			    public String gerelateerdewoonplaats;

				public String getGerelateerdewoonplaats () {
					return this.gerelateerdewoonplaats;
				}
				
			    public String vbonevenhuinum;

				public String getVbonevenhuinum () {
					return this.vbonevenhuinum;
				}
				
			    public String vbonevenhuilet;

				public String getVbonevenhuilet () {
					return this.vbonevenhuilet;
				}
				
			    public String vbonevenhuinumtoev;

				public String getVbonevenhuinumtoev () {
					return this.vbonevenhuinumtoev;
				}
				
			    public String vbonevenpostcode;

				public String getVbonevenpostcode () {
					return this.vbonevenpostcode;
				}
				
			    public String vbonevenwoonplaats;

				public String getVbonevenwoonplaats () {
					return this.vbonevenwoonplaats;
				}
				
			    public String vbonevengerelateerdeobr;

				public String getVbonevengerelateerdeobr () {
					return this.vbonevengerelateerdeobr;
				}
				
			    public String vbonevengerelateerdewoonplaats;

				public String getVbonevengerelateerdewoonplaats () {
					return this.vbonevengerelateerdewoonplaats;
				}
				
			    public String standplaatsbagidentificatie;

				public String getStandplaatsbagidentificatie () {
					return this.standplaatsbagidentificatie;
				}
				
			    public String standplaatshuinum;

				public String getStandplaatshuinum () {
					return this.standplaatshuinum;
				}
				
			    public String standplaatshuilet;

				public String getStandplaatshuilet () {
					return this.standplaatshuilet;
				}
				
			    public String standplaatshuinumtoev;

				public String getStandplaatshuinumtoev () {
					return this.standplaatshuinumtoev;
				}
				
			    public String standplaatspostcode;

				public String getStandplaatspostcode () {
					return this.standplaatspostcode;
				}
				
			    public String standplaatswoonplaats;

				public String getStandplaatswoonplaats () {
					return this.standplaatswoonplaats;
				}
				
			    public String standplaatsgerelateerdeobr;

				public String getStandplaatsgerelateerdeobr () {
					return this.standplaatsgerelateerdeobr;
				}
				
			    public String standplaatsgerelateerdewoonplaats;

				public String getStandplaatsgerelateerdewoonplaats () {
					return this.standplaatsgerelateerdewoonplaats;
				}
				
			    public String standplaatsnevenhuinum;

				public String getStandplaatsnevenhuinum () {
					return this.standplaatsnevenhuinum;
				}
				
			    public String standplaatsnevenhuilet;

				public String getStandplaatsnevenhuilet () {
					return this.standplaatsnevenhuilet;
				}
				
			    public String standplaatsnevenhuinumtoev;

				public String getStandplaatsnevenhuinumtoev () {
					return this.standplaatsnevenhuinumtoev;
				}
				
			    public String standplaatsnevenpostcode;

				public String getStandplaatsnevenpostcode () {
					return this.standplaatsnevenpostcode;
				}
				
			    public String standplaatsnevenwoonplaats;

				public String getStandplaatsnevenwoonplaats () {
					return this.standplaatsnevenwoonplaats;
				}
				
			    public String standplaatsnevengerelateerdeobr;

				public String getStandplaatsnevengerelateerdeobr () {
					return this.standplaatsnevengerelateerdeobr;
				}
				
			    public String standplaatsnevengerelateerdewoonplaats;

				public String getStandplaatsnevengerelateerdewoonplaats () {
					return this.standplaatsnevengerelateerdewoonplaats;
				}
				
			    public String ligplaatsbagidentificatie;

				public String getLigplaatsbagidentificatie () {
					return this.ligplaatsbagidentificatie;
				}
				
			    public String ligplaatshuinum;

				public String getLigplaatshuinum () {
					return this.ligplaatshuinum;
				}
				
			    public String ligplaatshuilet;

				public String getLigplaatshuilet () {
					return this.ligplaatshuilet;
				}
				
			    public String ligplaatshuinumtoev;

				public String getLigplaatshuinumtoev () {
					return this.ligplaatshuinumtoev;
				}
				
			    public String ligplaatspostcode;

				public String getLigplaatspostcode () {
					return this.ligplaatspostcode;
				}
				
			    public String ligplaatswoonplaats;

				public String getLigplaatswoonplaats () {
					return this.ligplaatswoonplaats;
				}
				
			    public String ligplaatsgerelateerdeobr;

				public String getLigplaatsgerelateerdeobr () {
					return this.ligplaatsgerelateerdeobr;
				}
				
			    public String ligplaatsgerelateerdewoonplaats;

				public String getLigplaatsgerelateerdewoonplaats () {
					return this.ligplaatsgerelateerdewoonplaats;
				}
				
			    public String ligplaatsnevenhuinum;

				public String getLigplaatsnevenhuinum () {
					return this.ligplaatsnevenhuinum;
				}
				
			    public String ligplaatsnevenhuislet;

				public String getLigplaatsnevenhuislet () {
					return this.ligplaatsnevenhuislet;
				}
				
			    public String ligplaatsnevenhuinumtoev;

				public String getLigplaatsnevenhuinumtoev () {
					return this.ligplaatsnevenhuinumtoev;
				}
				
			    public String ligplaatsnevenpostcode;

				public String getLigplaatsnevenpostcode () {
					return this.ligplaatsnevenpostcode;
				}
				
			    public String ligplaatsnevenwoonplaats;

				public String getLigplaatsnevenwoonplaats () {
					return this.ligplaatsnevenwoonplaats;
				}
				
			    public String ligplaatsnevengerelateerdeobr;

				public String getLigplaatsnevengerelateerdeobr () {
					return this.ligplaatsnevengerelateerdeobr;
				}
				
			    public String ligplaatsnevengerelateerdewoonplaats;

				public String getLigplaatsnevengerelateerdewoonplaats () {
					return this.ligplaatsnevengerelateerdewoonplaats;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_appartementsrecht_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_appartementsrecht_init.length == 0) {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_appartementsrecht_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_appartementsrecht_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_appartementsrecht_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.appartementsrechtid = readString(dis);
					
					this.cultuurbebouwdcode = readString(dis);
					
					this.cultuurbebouwd = readString(dis);
					
					this.kadbinobrnaam = readString(dis);
					
					this.kadbinhuilet = readString(dis);
					
					this.kadbinhuinum = readString(dis);
					
					this.kadbinhuinumtoev = readString(dis);
					
					this.kadbinpostcode = readString(dis);
					
					this.kadbinwoonplaats = readString(dis);
					
					this.vbobagidentificatie = readString(dis);
					
					this.vbohuinum = readString(dis);
					
					this.vbohuilet = readString(dis);
					
					this.vbohuinumtoev = readString(dis);
					
					this.vbopostcode = readString(dis);
					
					this.vbowoonplaats = readString(dis);
					
					this.gerelateerdeobr = readString(dis);
					
					this.gerelateerdewoonplaats = readString(dis);
					
					this.vbonevenhuinum = readString(dis);
					
					this.vbonevenhuilet = readString(dis);
					
					this.vbonevenhuinumtoev = readString(dis);
					
					this.vbonevenpostcode = readString(dis);
					
					this.vbonevenwoonplaats = readString(dis);
					
					this.vbonevengerelateerdeobr = readString(dis);
					
					this.vbonevengerelateerdewoonplaats = readString(dis);
					
					this.standplaatsbagidentificatie = readString(dis);
					
					this.standplaatshuinum = readString(dis);
					
					this.standplaatshuilet = readString(dis);
					
					this.standplaatshuinumtoev = readString(dis);
					
					this.standplaatspostcode = readString(dis);
					
					this.standplaatswoonplaats = readString(dis);
					
					this.standplaatsgerelateerdeobr = readString(dis);
					
					this.standplaatsgerelateerdewoonplaats = readString(dis);
					
					this.standplaatsnevenhuinum = readString(dis);
					
					this.standplaatsnevenhuilet = readString(dis);
					
					this.standplaatsnevenhuinumtoev = readString(dis);
					
					this.standplaatsnevenpostcode = readString(dis);
					
					this.standplaatsnevenwoonplaats = readString(dis);
					
					this.standplaatsnevengerelateerdeobr = readString(dis);
					
					this.standplaatsnevengerelateerdewoonplaats = readString(dis);
					
					this.ligplaatsbagidentificatie = readString(dis);
					
					this.ligplaatshuinum = readString(dis);
					
					this.ligplaatshuilet = readString(dis);
					
					this.ligplaatshuinumtoev = readString(dis);
					
					this.ligplaatspostcode = readString(dis);
					
					this.ligplaatswoonplaats = readString(dis);
					
					this.ligplaatsgerelateerdeobr = readString(dis);
					
					this.ligplaatsgerelateerdewoonplaats = readString(dis);
					
					this.ligplaatsnevenhuinum = readString(dis);
					
					this.ligplaatsnevenhuislet = readString(dis);
					
					this.ligplaatsnevenhuinumtoev = readString(dis);
					
					this.ligplaatsnevenpostcode = readString(dis);
					
					this.ligplaatsnevenwoonplaats = readString(dis);
					
					this.ligplaatsnevengerelateerdeobr = readString(dis);
					
					this.ligplaatsnevengerelateerdewoonplaats = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.appartementsrechtid,dos);
					
					// String
				
						writeString(this.cultuurbebouwdcode,dos);
					
					// String
				
						writeString(this.cultuurbebouwd,dos);
					
					// String
				
						writeString(this.kadbinobrnaam,dos);
					
					// String
				
						writeString(this.kadbinhuilet,dos);
					
					// String
				
						writeString(this.kadbinhuinum,dos);
					
					// String
				
						writeString(this.kadbinhuinumtoev,dos);
					
					// String
				
						writeString(this.kadbinpostcode,dos);
					
					// String
				
						writeString(this.kadbinwoonplaats,dos);
					
					// String
				
						writeString(this.vbobagidentificatie,dos);
					
					// String
				
						writeString(this.vbohuinum,dos);
					
					// String
				
						writeString(this.vbohuilet,dos);
					
					// String
				
						writeString(this.vbohuinumtoev,dos);
					
					// String
				
						writeString(this.vbopostcode,dos);
					
					// String
				
						writeString(this.vbowoonplaats,dos);
					
					// String
				
						writeString(this.gerelateerdeobr,dos);
					
					// String
				
						writeString(this.gerelateerdewoonplaats,dos);
					
					// String
				
						writeString(this.vbonevenhuinum,dos);
					
					// String
				
						writeString(this.vbonevenhuilet,dos);
					
					// String
				
						writeString(this.vbonevenhuinumtoev,dos);
					
					// String
				
						writeString(this.vbonevenpostcode,dos);
					
					// String
				
						writeString(this.vbonevenwoonplaats,dos);
					
					// String
				
						writeString(this.vbonevengerelateerdeobr,dos);
					
					// String
				
						writeString(this.vbonevengerelateerdewoonplaats,dos);
					
					// String
				
						writeString(this.standplaatsbagidentificatie,dos);
					
					// String
				
						writeString(this.standplaatshuinum,dos);
					
					// String
				
						writeString(this.standplaatshuilet,dos);
					
					// String
				
						writeString(this.standplaatshuinumtoev,dos);
					
					// String
				
						writeString(this.standplaatspostcode,dos);
					
					// String
				
						writeString(this.standplaatswoonplaats,dos);
					
					// String
				
						writeString(this.standplaatsgerelateerdeobr,dos);
					
					// String
				
						writeString(this.standplaatsgerelateerdewoonplaats,dos);
					
					// String
				
						writeString(this.standplaatsnevenhuinum,dos);
					
					// String
				
						writeString(this.standplaatsnevenhuilet,dos);
					
					// String
				
						writeString(this.standplaatsnevenhuinumtoev,dos);
					
					// String
				
						writeString(this.standplaatsnevenpostcode,dos);
					
					// String
				
						writeString(this.standplaatsnevenwoonplaats,dos);
					
					// String
				
						writeString(this.standplaatsnevengerelateerdeobr,dos);
					
					// String
				
						writeString(this.standplaatsnevengerelateerdewoonplaats,dos);
					
					// String
				
						writeString(this.ligplaatsbagidentificatie,dos);
					
					// String
				
						writeString(this.ligplaatshuinum,dos);
					
					// String
				
						writeString(this.ligplaatshuilet,dos);
					
					// String
				
						writeString(this.ligplaatshuinumtoev,dos);
					
					// String
				
						writeString(this.ligplaatspostcode,dos);
					
					// String
				
						writeString(this.ligplaatswoonplaats,dos);
					
					// String
				
						writeString(this.ligplaatsgerelateerdeobr,dos);
					
					// String
				
						writeString(this.ligplaatsgerelateerdewoonplaats,dos);
					
					// String
				
						writeString(this.ligplaatsnevenhuinum,dos);
					
					// String
				
						writeString(this.ligplaatsnevenhuislet,dos);
					
					// String
				
						writeString(this.ligplaatsnevenhuinumtoev,dos);
					
					// String
				
						writeString(this.ligplaatsnevenpostcode,dos);
					
					// String
				
						writeString(this.ligplaatsnevenwoonplaats,dos);
					
					// String
				
						writeString(this.ligplaatsnevengerelateerdeobr,dos);
					
					// String
				
						writeString(this.ligplaatsnevengerelateerdewoonplaats,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",appartementsrechtid="+appartementsrechtid);
		sb.append(",cultuurbebouwdcode="+cultuurbebouwdcode);
		sb.append(",cultuurbebouwd="+cultuurbebouwd);
		sb.append(",kadbinobrnaam="+kadbinobrnaam);
		sb.append(",kadbinhuilet="+kadbinhuilet);
		sb.append(",kadbinhuinum="+kadbinhuinum);
		sb.append(",kadbinhuinumtoev="+kadbinhuinumtoev);
		sb.append(",kadbinpostcode="+kadbinpostcode);
		sb.append(",kadbinwoonplaats="+kadbinwoonplaats);
		sb.append(",vbobagidentificatie="+vbobagidentificatie);
		sb.append(",vbohuinum="+vbohuinum);
		sb.append(",vbohuilet="+vbohuilet);
		sb.append(",vbohuinumtoev="+vbohuinumtoev);
		sb.append(",vbopostcode="+vbopostcode);
		sb.append(",vbowoonplaats="+vbowoonplaats);
		sb.append(",gerelateerdeobr="+gerelateerdeobr);
		sb.append(",gerelateerdewoonplaats="+gerelateerdewoonplaats);
		sb.append(",vbonevenhuinum="+vbonevenhuinum);
		sb.append(",vbonevenhuilet="+vbonevenhuilet);
		sb.append(",vbonevenhuinumtoev="+vbonevenhuinumtoev);
		sb.append(",vbonevenpostcode="+vbonevenpostcode);
		sb.append(",vbonevenwoonplaats="+vbonevenwoonplaats);
		sb.append(",vbonevengerelateerdeobr="+vbonevengerelateerdeobr);
		sb.append(",vbonevengerelateerdewoonplaats="+vbonevengerelateerdewoonplaats);
		sb.append(",standplaatsbagidentificatie="+standplaatsbagidentificatie);
		sb.append(",standplaatshuinum="+standplaatshuinum);
		sb.append(",standplaatshuilet="+standplaatshuilet);
		sb.append(",standplaatshuinumtoev="+standplaatshuinumtoev);
		sb.append(",standplaatspostcode="+standplaatspostcode);
		sb.append(",standplaatswoonplaats="+standplaatswoonplaats);
		sb.append(",standplaatsgerelateerdeobr="+standplaatsgerelateerdeobr);
		sb.append(",standplaatsgerelateerdewoonplaats="+standplaatsgerelateerdewoonplaats);
		sb.append(",standplaatsnevenhuinum="+standplaatsnevenhuinum);
		sb.append(",standplaatsnevenhuilet="+standplaatsnevenhuilet);
		sb.append(",standplaatsnevenhuinumtoev="+standplaatsnevenhuinumtoev);
		sb.append(",standplaatsnevenpostcode="+standplaatsnevenpostcode);
		sb.append(",standplaatsnevenwoonplaats="+standplaatsnevenwoonplaats);
		sb.append(",standplaatsnevengerelateerdeobr="+standplaatsnevengerelateerdeobr);
		sb.append(",standplaatsnevengerelateerdewoonplaats="+standplaatsnevengerelateerdewoonplaats);
		sb.append(",ligplaatsbagidentificatie="+ligplaatsbagidentificatie);
		sb.append(",ligplaatshuinum="+ligplaatshuinum);
		sb.append(",ligplaatshuilet="+ligplaatshuilet);
		sb.append(",ligplaatshuinumtoev="+ligplaatshuinumtoev);
		sb.append(",ligplaatspostcode="+ligplaatspostcode);
		sb.append(",ligplaatswoonplaats="+ligplaatswoonplaats);
		sb.append(",ligplaatsgerelateerdeobr="+ligplaatsgerelateerdeobr);
		sb.append(",ligplaatsgerelateerdewoonplaats="+ligplaatsgerelateerdewoonplaats);
		sb.append(",ligplaatsnevenhuinum="+ligplaatsnevenhuinum);
		sb.append(",ligplaatsnevenhuislet="+ligplaatsnevenhuislet);
		sb.append(",ligplaatsnevenhuinumtoev="+ligplaatsnevenhuinumtoev);
		sb.append(",ligplaatsnevenpostcode="+ligplaatsnevenpostcode);
		sb.append(",ligplaatsnevenwoonplaats="+ligplaatsnevenwoonplaats);
		sb.append(",ligplaatsnevengerelateerdeobr="+ligplaatsnevengerelateerdeobr);
		sb.append(",ligplaatsnevengerelateerdewoonplaats="+ligplaatsnevengerelateerdewoonplaats);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(locatieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class belastmetStruct implements routines.system.IPersistableRow<belastmetStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_appartementsrecht_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_appartementsrecht_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String appartementsrechtid;

				public String getAppartementsrechtid () {
					return this.appartementsrechtid;
				}
				
			    public String som;

				public String getSom () {
					return this.som;
				}
				
			    public String valutacode;

				public String getValutacode () {
					return this.valutacode;
				}
				
			    public String valutawaarde;

				public String getValutawaarde () {
					return this.valutawaarde;
				}
				
			    public String eindjaar;

				public String getEindjaar () {
					return this.eindjaar;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_appartementsrecht_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_appartementsrecht_init.length == 0) {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_appartementsrecht_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_appartementsrecht_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_appartementsrecht_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.appartementsrechtid = readString(dis);
					
					this.som = readString(dis);
					
					this.valutacode = readString(dis);
					
					this.valutawaarde = readString(dis);
					
					this.eindjaar = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.appartementsrechtid,dos);
					
					// String
				
						writeString(this.som,dos);
					
					// String
				
						writeString(this.valutacode,dos);
					
					// String
				
						writeString(this.valutawaarde,dos);
					
					// String
				
						writeString(this.eindjaar,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",appartementsrechtid="+appartementsrechtid);
		sb.append(",som="+som);
		sb.append(",valutacode="+valutacode);
		sb.append(",valutawaarde="+valutawaarde);
		sb.append(",eindjaar="+eindjaar);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(belastmetStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class inonderzoekStruct implements routines.system.IPersistableRow<inonderzoekStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_appartementsrecht_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_appartementsrecht_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String appartementsrechtid;

				public String getAppartementsrechtid () {
					return this.appartementsrechtid;
				}
				
			    public String omschrijving;

				public String getOmschrijving () {
					return this.omschrijving;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_appartementsrecht_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_appartementsrecht_init.length == 0) {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_appartementsrecht_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_appartementsrecht_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_appartementsrecht_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.appartementsrechtid = readString(dis);
					
					this.omschrijving = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.appartementsrechtid,dos);
					
					// String
				
						writeString(this.omschrijving,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",appartementsrechtid="+appartementsrechtid);
		sb.append(",omschrijving="+omschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(inonderzoekStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ontstaanuitStruct implements routines.system.IPersistableRow<ontstaanuitStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_appartementsrecht_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_appartementsrecht_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String appartementsrechtid;

				public String getAppartementsrechtid () {
					return this.appartementsrechtid;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String aardcode;

				public String getAardcode () {
					return this.aardcode;
				}
				
			    public String aardwaarde;

				public String getAardwaarde () {
					return this.aardwaarde;
				}
				
			    public String overgangsgrootte;

				public String getOvergangsgrootte () {
					return this.overgangsgrootte;
				}
				
			    public String appartementsrechtstype;

				public String getAppartementsrechtstype () {
					return this.appartementsrechtstype;
				}
				
			    public String appartementsrechtshref;

				public String getAppartementsrechtshref () {
					return this.appartementsrechtshref;
				}
				
			    public String perceeltype;

				public String getPerceeltype () {
					return this.perceeltype;
				}
				
			    public String perceelhref;

				public String getPerceelhref () {
					return this.perceelhref;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_appartementsrecht_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_appartementsrecht_init.length == 0) {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_appartementsrecht_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_appartementsrecht_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_appartementsrecht_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.appartementsrechtid = readString(dis);
					
					this.status = readString(dis);
					
					this.aardcode = readString(dis);
					
					this.aardwaarde = readString(dis);
					
					this.overgangsgrootte = readString(dis);
					
					this.appartementsrechtstype = readString(dis);
					
					this.appartementsrechtshref = readString(dis);
					
					this.perceeltype = readString(dis);
					
					this.perceelhref = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.appartementsrechtid,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.aardcode,dos);
					
					// String
				
						writeString(this.aardwaarde,dos);
					
					// String
				
						writeString(this.overgangsgrootte,dos);
					
					// String
				
						writeString(this.appartementsrechtstype,dos);
					
					// String
				
						writeString(this.appartementsrechtshref,dos);
					
					// String
				
						writeString(this.perceeltype,dos);
					
					// String
				
						writeString(this.perceelhref,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",appartementsrechtid="+appartementsrechtid);
		sb.append(",status="+status);
		sb.append(",aardcode="+aardcode);
		sb.append(",aardwaarde="+aardwaarde);
		sb.append(",overgangsgrootte="+overgangsgrootte);
		sb.append(",appartementsrechtstype="+appartementsrechtstype);
		sb.append(",appartementsrechtshref="+appartementsrechtshref);
		sb.append(",perceeltype="+perceeltype);
		sb.append(",perceelhref="+perceelhref);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ontstaanuitStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class overgegaaninStruct implements routines.system.IPersistableRow<overgegaaninStruct> {
    final static byte[] commonByteArrayLock_BRK_brk_appartementsrecht_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_appartementsrecht_init = new byte[0];

	
			    public String kdoreferentie;

				public String getKdoreferentie () {
					return this.kdoreferentie;
				}
				
			    public String appartementsrechtid;

				public String getAppartementsrechtid () {
					return this.appartementsrechtid;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String aardcode;

				public String getAardcode () {
					return this.aardcode;
				}
				
			    public String aardwaarde;

				public String getAardwaarde () {
					return this.aardwaarde;
				}
				
			    public String overgangsgrootte;

				public String getOvergangsgrootte () {
					return this.overgangsgrootte;
				}
				
			    public String appartementsrechtstype;

				public String getAppartementsrechtstype () {
					return this.appartementsrechtstype;
				}
				
			    public String appartementsrechtshref;

				public String getAppartementsrechtshref () {
					return this.appartementsrechtshref;
				}
				
			    public String perceeltype;

				public String getPerceeltype () {
					return this.perceeltype;
				}
				
			    public String perceelhref;

				public String getPerceelhref () {
					return this.perceelhref;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BRK_brk_appartementsrecht_init.length) {
				if(length < 1024 && commonByteArray_BRK_brk_appartementsrecht_init.length == 0) {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[1024];
				} else {
   					commonByteArray_BRK_brk_appartementsrecht_init = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BRK_brk_appartementsrecht_init, 0, length);
			strReturn = new String(commonByteArray_BRK_brk_appartementsrecht_init, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_appartementsrecht_init) {

        	try {

        		int length = 0;
		
					this.kdoreferentie = readString(dis);
					
					this.appartementsrechtid = readString(dis);
					
					this.status = readString(dis);
					
					this.aardcode = readString(dis);
					
					this.aardwaarde = readString(dis);
					
					this.overgangsgrootte = readString(dis);
					
					this.appartementsrechtstype = readString(dis);
					
					this.appartementsrechtshref = readString(dis);
					
					this.perceeltype = readString(dis);
					
					this.perceelhref = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.kdoreferentie,dos);
					
					// String
				
						writeString(this.appartementsrechtid,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.aardcode,dos);
					
					// String
				
						writeString(this.aardwaarde,dos);
					
					// String
				
						writeString(this.overgangsgrootte,dos);
					
					// String
				
						writeString(this.appartementsrechtstype,dos);
					
					// String
				
						writeString(this.appartementsrechtshref,dos);
					
					// String
				
						writeString(this.perceeltype,dos);
					
					// String
				
						writeString(this.perceelhref,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("kdoreferentie="+kdoreferentie);
		sb.append(",appartementsrechtid="+appartementsrechtid);
		sb.append(",status="+status);
		sb.append(",aardcode="+aardcode);
		sb.append(",aardwaarde="+aardwaarde);
		sb.append(",overgangsgrootte="+overgangsgrootte);
		sb.append(",appartementsrechtstype="+appartementsrechtstype);
		sb.append(",appartementsrechtshref="+appartementsrechtshref);
		sb.append(",perceeltype="+perceeltype);
		sb.append(",perceelhref="+perceelhref);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(overgegaaninStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BRK_brk_appartementsrecht_init = new byte[0];
    static byte[] commonByteArray_BRK_brk_appartementsrecht_init = new byte[0];

	
			    public routines.system.Document content;

				public routines.system.Document getContent () {
					return this.content;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BRK_brk_appartementsrecht_init) {

        	try {

        		int length = 0;
		
						this.content = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("content="+String.valueOf(content));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
locatieStruct locatie = new locatieStruct();
belastmetStruct belastmet = new belastmetStruct();
inonderzoekStruct inonderzoek = new inonderzoekStruct();
ontstaanuitStruct ontstaanuit = new ontstaanuitStruct();
overgegaaninStruct overgegaanin = new overgegaaninStruct();




	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tXMLMap_1_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_1_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_1_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_1_TXMLMAP_OUT__Struct Var__tXMLMap_1_TXMLMAP_OUT = new Var__tXMLMap_1_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out1Struct out1_save = null;
//the aggregate variable
out1Struct out1_aggregate = null;
locatieStruct locatie_tmp = new locatieStruct();
locatieStruct locatie_save = null;
//the aggregate variable
locatieStruct locatie_aggregate = null;
belastmetStruct belastmet_tmp = new belastmetStruct();
belastmetStruct belastmet_save = null;
//the aggregate variable
belastmetStruct belastmet_aggregate = null;
inonderzoekStruct inonderzoek_tmp = new inonderzoekStruct();
inonderzoekStruct inonderzoek_save = null;
//the aggregate variable
inonderzoekStruct inonderzoek_aggregate = null;
ontstaanuitStruct ontstaanuit_tmp = new ontstaanuitStruct();
ontstaanuitStruct ontstaanuit_save = null;
//the aggregate variable
ontstaanuitStruct ontstaanuit_aggregate = null;
overgegaaninStruct overgegaanin_tmp = new overgegaaninStruct();
overgegaaninStruct overgegaanin_save = null;
//the aggregate variable
overgegaaninStruct overgegaanin_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_1 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_1",allOutsForAggregate_tXMLMap_1);
// ###############################
class TreeNode_API_tXMLMap_1_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_1_TXMLMAP_OUT treeNodeAPI_tXMLMap_1_TXMLMAP_OUT = new TreeNode_API_tXMLMap_1_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_1_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_1_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_1_TXMLMAP_OUT xml_api_tXMLMap_1_TXMLMAP_OUT = new XML_API_tXMLMap_1_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_1_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_1_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";

	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"."		
	,"."+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	true		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper(context.xmlType,queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.xmlLocation;
} catch(java.lang.Exception e) {
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get(".");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("."+"/@xsi:nil")};	
										if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.content =null;
										}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1) || xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)){
											row1.content=null;
										}else{
		row1.content = ParserUtils.parseTo_Document(str_tFileInputXML_1);
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

			//row1
			//row1


			
				
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				}
				
				
				
			

		

	boolean rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setOriginalLoop("/KadastraalObjectSnapshot/Appartementsrecht/identificatie");
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT_0 = row1.content.getDocument();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_1_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setDefineNS(false);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT_0.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_0 = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("lokaalId");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../koopsom/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../kadastraleAanduiding/naamKadastraleGemeente/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/indicatieMeerObjecten");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../koopsom/indicatieMeerObjecten");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../aardCultuurOnbebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../kadastraleAanduiding/perceelnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../belastMet/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("namespace");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../kadastraleAanduiding/naamKadastraleGemeente/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/koopjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../koopsom/koopjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../belastMet/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../belastMet/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../../referentie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/inOnderzoek/InOnderzoek/omschrijving");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../inOnderzoek/InOnderzoek/omschrijving");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../koopsom/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../kadastraleAanduiding/appartementsrechtVolgnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/versie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("versie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../koopsom/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../@id");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/eindjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../belastMet/eindjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../aardCultuurOnbebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../kadastraleAanduiding/sectie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					
					String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT_0 = docToFlat_tXMLMap_1_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT_0: resultSet_tXMLMap_1_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_1_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT_0 : oneRow_tXMLMap_1_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_1_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output table

out1 = null;


// # Output table : 'out1'

out1_tmp = new out1Struct();
out1_tmp.kdoreferentie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
out1_tmp.kdotoestandsdatum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
out1_tmp.appartementsrechtid = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
out1_tmp.appartementsrechtnamespace = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace");
out1_tmp.appartementsrechtlokaalid = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId");
out1_tmp.appartementsrechtversie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/versie");
out1_tmp.appartementsrechtkoopsom = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/som");
out1_tmp.appartementsrechtkoopsomvalutacode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/code");
out1_tmp.appartementsrechtkoopsomvalutawaarde = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/waarde");
out1_tmp.appartementsrechtkoopjaar = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/koopjaar");
out1_tmp.appartementsrechtindicatiemeerobjecten = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/indicatieMeerObjecten");
out1_tmp.appartementsrechtkadaanduidingakrkadgemcodcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
out1_tmp.appartementsrechtkadaanduidingakrkadgemcodwaarde = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
out1_tmp.appartementsrechtkadaanduidingnaamkadgemcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code");
out1_tmp.appartementsrechtkadaanduidingnaamkadgemwaarde = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde");
out1_tmp.appartementsrechtkadaanduidingsectie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie");
out1_tmp.appartementsrechtkadaanduidingperceelnummer = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer");
out1_tmp.appartementsrechtkadaanduidingappartsrechtvolgnum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer");
out1_tmp.appartementsrechtaardcultbebouwdcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/code");
out1_tmp.appartementsrechtaardcultbebouwdwaarde = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/waarde");allOutsForAggregate_tXMLMap_1.add(out1_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT_1 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_1.setOriginalLoop("/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject");
					docToFlat_tXMLMap_1_TXMLMAP_OUT_1.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT_1 = row1.content.getDocument();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_1.setDoc(doc_tXMLMap_1_TXMLMAP_OUT_1);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_1.setDefineNS(false);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_1.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT_1.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_1 = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_1.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_1);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("cultuurBebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../koopsom/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../kadastraleAanduiding/naamKadastraleGemeente/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/indicatieMeerObjecten");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../koopsom/indicatieMeerObjecten");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/KADBinnelandsAdres/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../aardCultuurOnbebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../kadastraleAanduiding/perceelnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../belastMet/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../kadastraleAanduiding/naamKadastraleGemeente/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/koopjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../koopsom/koopjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/KADBinnelandsAdres/huisLetter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../belastMet/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/KADBinnelandsAdres/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../belastMet/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../../referentie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/inOnderzoek/InOnderzoek/omschrijving");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../inOnderzoek/InOnderzoek/omschrijving");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../koopsom/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../kadastraleAanduiding/appartementsrechtVolgnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/versie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../koopsom/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/KADBinnelandsAdres/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/eindjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../belastMet/eindjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../aardCultuurOnbebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("cultuurBebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../kadastraleAanduiding/sectie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/KADBinnelandsAdres/huisNummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/KADBinnelandsAdres/huisNummerToevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.add("adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					
					String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_1 = absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT_1 = relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_1.toArray(new String[0]);
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_1.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_1);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_1.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT_1);
					//generate document to flat data
					docToFlat_tXMLMap_1_TXMLMAP_OUT_1.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT_1 = docToFlat_tXMLMap_1_TXMLMAP_OUT_1.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT_1: resultSet_tXMLMap_1_TXMLMAP_OUT_1) { // G_TXM_M_001
						nb_line_tXMLMap_1_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT_1 : oneRow_tXMLMap_1_TXMLMAP_OUT_1.entrySet()) {
							treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT_1.getKey(),entry_tXMLMap_1_TXMLMAP_OUT_1.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output table

locatie = null;


// # Output table : 'out1'

// # Output table : 'locatie'

locatie_tmp = new locatieStruct();
locatie_tmp.kdoreferentie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
locatie_tmp.appartementsrechtid =  treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
locatie_tmp.cultuurbebouwdcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
locatie_tmp.cultuurbebouwd = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
locatie_tmp.kadbinobrnaam = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
locatie_tmp.kadbinhuilet = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
locatie_tmp.kadbinhuinum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
locatie_tmp.kadbinhuinumtoev = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
locatie_tmp.kadbinpostcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
locatie_tmp.kadbinwoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
locatie_tmp.vbobagidentificatie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
locatie_tmp.vbohuinum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
locatie_tmp.vbohuilet = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
locatie_tmp.vbohuinumtoev = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
locatie_tmp.vbopostcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
locatie_tmp.vbowoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.gerelateerdeobr = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
locatie_tmp.gerelateerdewoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.vbonevenhuinum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
locatie_tmp.vbonevenhuilet = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
locatie_tmp.vbonevenhuinumtoev = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
locatie_tmp.vbonevenpostcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
locatie_tmp.vbonevenwoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.vbonevengerelateerdeobr = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
locatie_tmp.vbonevengerelateerdewoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.standplaatsbagidentificatie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
locatie_tmp.standplaatshuinum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
locatie_tmp.standplaatshuilet = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
locatie_tmp.standplaatshuinumtoev = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
locatie_tmp.standplaatspostcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
locatie_tmp.standplaatswoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.standplaatsgerelateerdeobr = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
locatie_tmp.standplaatsgerelateerdewoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.standplaatsnevenhuinum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
locatie_tmp.standplaatsnevenhuilet = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
locatie_tmp.standplaatsnevenhuinumtoev = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
locatie_tmp.standplaatsnevenpostcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
locatie_tmp.standplaatsnevenwoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.standplaatsnevengerelateerdeobr = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
locatie_tmp.standplaatsnevengerelateerdewoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.ligplaatsbagidentificatie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
locatie_tmp.ligplaatshuinum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
locatie_tmp.ligplaatshuilet = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
locatie_tmp.ligplaatshuinumtoev = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
locatie_tmp.ligplaatspostcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
locatie_tmp.ligplaatswoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.ligplaatsgerelateerdeobr = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
locatie_tmp.ligplaatsgerelateerdewoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.ligplaatsnevenhuinum = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
locatie_tmp.ligplaatsnevenhuislet = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
locatie_tmp.ligplaatsnevenhuinumtoev = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
locatie_tmp.ligplaatsnevenpostcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
locatie_tmp.ligplaatsnevenwoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
locatie_tmp.ligplaatsnevengerelateerdeobr = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
locatie_tmp.ligplaatsnevengerelateerdewoonplaats = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");allOutsForAggregate_tXMLMap_1.add(locatie_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT_2 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_2.setOriginalLoop("/KadastraalObjectSnapshot/Appartementsrecht/belastMet");
					docToFlat_tXMLMap_1_TXMLMAP_OUT_2.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT_2 = row1.content.getDocument();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_2.setDoc(doc_tXMLMap_1_TXMLMAP_OUT_2);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_2.setDefineNS(false);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_2.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT_2.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_2 = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_2.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_2);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../koopsom/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../kadastraleAanduiding/naamKadastraleGemeente/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/indicatieMeerObjecten");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../koopsom/indicatieMeerObjecten");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../aardCultuurOnbebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../kadastraleAanduiding/perceelnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../kadastraleAanduiding/naamKadastraleGemeente/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/koopjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../koopsom/koopjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../../referentie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/inOnderzoek/InOnderzoek/omschrijving");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../inOnderzoek/InOnderzoek/omschrijving");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../koopsom/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../kadastraleAanduiding/appartementsrechtVolgnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/versie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../koopsom/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../@id");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/eindjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("eindjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../aardCultuurOnbebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../kadastraleAanduiding/sectie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.add("../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					
					String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_2 = absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT_2 = relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_2.toArray(new String[0]);
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_2.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_2);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_2.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT_2);
					//generate document to flat data
					docToFlat_tXMLMap_1_TXMLMAP_OUT_2.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT_2 = docToFlat_tXMLMap_1_TXMLMAP_OUT_2.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT_2: resultSet_tXMLMap_1_TXMLMAP_OUT_2) { // G_TXM_M_001
						nb_line_tXMLMap_1_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT_2 : oneRow_tXMLMap_1_TXMLMAP_OUT_2.entrySet()) {
							treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT_2.getKey(),entry_tXMLMap_1_TXMLMAP_OUT_2.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output table

belastmet = null;


// # Output table : 'out1'

// # Output table : 'locatie'

// # Output table : 'belastmet'

belastmet_tmp = new belastmetStruct();
belastmet_tmp.kdoreferentie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
belastmet_tmp.appartementsrechtid = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
belastmet_tmp.som = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/som");
belastmet_tmp.valutacode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/code");
belastmet_tmp.valutawaarde = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/waarde");
belastmet_tmp.eindjaar = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/eindjaar");allOutsForAggregate_tXMLMap_1.add(belastmet_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT_3 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_3.setOriginalLoop("/KadastraalObjectSnapshot/Appartementsrecht/inOnderzoek/InOnderzoek");
					docToFlat_tXMLMap_1_TXMLMAP_OUT_3.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT_3 = row1.content.getDocument();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_3.setDoc(doc_tXMLMap_1_TXMLMAP_OUT_3);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_3.setDefineNS(false);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_3.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT_3.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_3 = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_3.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_3);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../koopsom/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../kadastraleAanduiding/naamKadastraleGemeente/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/indicatieMeerObjecten");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../koopsom/indicatieMeerObjecten");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../aardCultuurOnbebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../kadastraleAanduiding/perceelnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../belastMet/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../kadastraleAanduiding/naamKadastraleGemeente/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/koopjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../koopsom/koopjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../belastMet/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../belastMet/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../../referentie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/inOnderzoek/InOnderzoek/omschrijving");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("omschrijving");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../koopsom/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../kadastraleAanduiding/appartementsrechtVolgnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/versie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../koopsom/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/eindjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../belastMet/eindjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../aardCultuurOnbebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../kadastraleAanduiding/sectie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					
					String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_3 = absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT_3 = relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_3.toArray(new String[0]);
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_3.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_3);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_3.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT_3);
					//generate document to flat data
					docToFlat_tXMLMap_1_TXMLMAP_OUT_3.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT_3 = docToFlat_tXMLMap_1_TXMLMAP_OUT_3.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT_3: resultSet_tXMLMap_1_TXMLMAP_OUT_3) { // G_TXM_M_001
						nb_line_tXMLMap_1_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT_3 : oneRow_tXMLMap_1_TXMLMAP_OUT_3.entrySet()) {
							treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT_3.getKey(),entry_tXMLMap_1_TXMLMAP_OUT_3.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output table

inonderzoek = null;


// # Output table : 'out1'

// # Output table : 'locatie'

// # Output table : 'belastmet'

// # Output table : 'inonderzoek'

inonderzoek_tmp = new inonderzoekStruct();
inonderzoek_tmp.kdoreferentie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
inonderzoek_tmp.appartementsrechtid = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
inonderzoek_tmp.omschrijving = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/inOnderzoek/InOnderzoek/omschrijving");allOutsForAggregate_tXMLMap_1.add(inonderzoek_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT_4 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_4.setOriginalLoop("/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie");
					docToFlat_tXMLMap_1_TXMLMAP_OUT_4.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT_4 = row1.content.getDocument();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_4.setDoc(doc_tXMLMap_1_TXMLMAP_OUT_4);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_4.setDefineNS(false);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_4.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT_4.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_4 = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_4.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_4);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../koopsom/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../kadastraleAanduiding/naamKadastraleGemeente/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/indicatieMeerObjecten");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../koopsom/indicatieMeerObjecten");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../aardCultuurOnbebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../kadastraleAanduiding/perceelnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../belastMet/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../kadastraleAanduiding/naamKadastraleGemeente/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/koopjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../koopsom/koopjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../belastMet/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../belastMet/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../../referentie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/inOnderzoek/InOnderzoek/omschrijving");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../inOnderzoek/InOnderzoek/omschrijving");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../koopsom/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../kadastraleAanduiding/appartementsrechtVolgnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/versie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../koopsom/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/eindjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../belastMet/eindjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../aardCultuurOnbebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../kadastraleAanduiding/sectie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					
					String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_4 = absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT_4 = relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_4.toArray(new String[0]);
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_4.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_4);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_4.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT_4);
					//generate document to flat data
					docToFlat_tXMLMap_1_TXMLMAP_OUT_4.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT_4 = docToFlat_tXMLMap_1_TXMLMAP_OUT_4.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT_4: resultSet_tXMLMap_1_TXMLMAP_OUT_4) { // G_TXM_M_001
						nb_line_tXMLMap_1_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT_4 : oneRow_tXMLMap_1_TXMLMAP_OUT_4.entrySet()) {
							treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT_4.getKey(),entry_tXMLMap_1_TXMLMAP_OUT_4.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output table

ontstaanuit = null;


// # Output table : 'out1'

// # Output table : 'locatie'

// # Output table : 'belastmet'

// # Output table : 'inonderzoek'

// # Output table : 'ontstaanuit'

ontstaanuit_tmp = new ontstaanuitStruct();
ontstaanuit_tmp.kdoreferentie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
ontstaanuit_tmp.appartementsrechtid = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
ontstaanuit_tmp.status = "Ontstaan uit";
ontstaanuit_tmp.aardcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
ontstaanuit_tmp.aardwaarde = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
ontstaanuit_tmp.overgangsgrootte = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
ontstaanuit_tmp.appartementsrechtstype = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
ontstaanuit_tmp.appartementsrechtshref = TalendString.talendTrim(treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href"),'#',0) ;
ontstaanuit_tmp.perceeltype = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
ontstaanuit_tmp.perceelhref = TalendString.talendTrim(treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href"),'#',0) ;allOutsForAggregate_tXMLMap_1.add(ontstaanuit_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT_5 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_5.setOriginalLoop("/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie");
					docToFlat_tXMLMap_1_TXMLMAP_OUT_5.setIsOptional(false);
					if(row1.content == null 
						|| row1.content.getDocument() == null) {
						throw new RuntimeException("row1.content can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT_5 = row1.content.getDocument();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_5.setDoc(doc_tXMLMap_1_TXMLMAP_OUT_5);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_5.setDefineNS(false);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_5.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT_5.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_5 = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_5.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_5);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/lokaalId");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../identificatie/lokaalId");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../kadastraleAanduiding/AKRKadastraleGemeenteCode/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../koopsom/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../kadastraleAanduiding/naamKadastraleGemeente/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/indicatieMeerObjecten");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../koopsom/indicatieMeerObjecten");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../aardCultuurOnbebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/perceelnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../kadastraleAanduiding/perceelnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../belastMet/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/namespace");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../identificatie/namespace");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/naamKadastraleGemeente/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../kadastraleAanduiding/naamKadastraleGemeente/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/koopjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../koopsom/koopjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisLetter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../belastMet/bedrag/valuta/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../kadastraleAanduiding/AKRKadastraleGemeenteCode/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../belastMet/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/referentie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../../referentie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/inOnderzoek/InOnderzoek/omschrijving");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../inOnderzoek/InOnderzoek/omschrijving");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/valuta/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../koopsom/bedrag/valuta/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/appartementsrechtVolgnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../kadastraleAanduiding/appartementsrechtVolgnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("onroerendeZaak/AppartementsrechtRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("onroerendeZaak/AppartementsrechtRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/identificatie/versie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../identificatie/versie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/BAGIdentificatie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/aard/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/koopsom/bedrag/som");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../koopsom/bedrag/som");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/aard/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisnummertoevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("overgangsgrootte");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../@id");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/belastMet/eindjaar");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../belastMet/eindjaar");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/openbareRuimteNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../ontstaanUitOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/postcode");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/aardCultuurOnbebouwd/code");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../aardCultuurOnbebouwd/code");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/cultuurBebouwd/waarde");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/kadastraleAanduiding/sectie");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../kadastraleAanduiding/sectie");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeOpenbareRuimte/OpenbareRuimte/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/hoofdadres/NummerAanduiding/huisletter");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/hoofdadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Ligplaats/nevenadres/NummerAanduiding/gerelateerdeWoonplaats/Woonplaats/woonplaatsNaam");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/toestandsdatum");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../../toestandsdatum");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/KADBinnelandsAdres/huisNummerToevoeging");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Standplaats/hoofdadres/NummerAanduiding/huisnummer");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.add("../../heeftLocatie/LocatieKadastraalObject/adres/Verblijfsobject/nevenadres/NummerAanduiding/huisnummer");
					
					String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_5 = absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT_5 = relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_5.toArray(new String[0]);
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_5.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_5);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_5.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT_5);
					//generate document to flat data
					docToFlat_tXMLMap_1_TXMLMAP_OUT_5.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT_5 = docToFlat_tXMLMap_1_TXMLMAP_OUT_5.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT_5: resultSet_tXMLMap_1_TXMLMAP_OUT_5) { // G_TXM_M_001
						nb_line_tXMLMap_1_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT_5 : oneRow_tXMLMap_1_TXMLMAP_OUT_5.entrySet()) {
							treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT_5.getKey(),entry_tXMLMap_1_TXMLMAP_OUT_5.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output table

overgegaanin = null;


// # Output table : 'out1'

// # Output table : 'locatie'

// # Output table : 'belastmet'

// # Output table : 'inonderzoek'

// # Output table : 'ontstaanuit'

// # Output table : 'overgegaanin'

overgegaanin_tmp = new overgegaaninStruct();
overgegaanin_tmp.kdoreferentie = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/referentie");
overgegaanin_tmp.appartementsrechtid = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/@id");
overgegaanin_tmp.status = "Overgegaan in";
overgegaanin_tmp.aardcode = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/code");
overgegaanin_tmp.aardwaarde = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/aard/waarde");
overgegaanin_tmp.overgangsgrootte = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/overgangsgrootte");
overgegaanin_tmp.appartementsrechtstype = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@type");
overgegaanin_tmp.appartementsrechtshref = TalendString.talendTrim(treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/AppartementsrechtRef/@href"),'#',0) ;
overgegaanin_tmp.perceeltype = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@type");
overgegaanin_tmp.perceelhref = TalendString.talendTrim(treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.content:/KadastraalObjectSnapshot/Appartementsrecht/overgegaanInOZ/OnroerendeZaakFiliatie/onroerendeZaak/PerceelRef/@href"),'#',0) ;allOutsForAggregate_tXMLMap_1.add(overgegaanin_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_1_TXMLMAP_OUT++;

/**
 * [tXMLMap_1_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	
 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	




			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tPostgresPlusOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_1", false);
		start_Hash.put("tPostgresPlusOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("out1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_1 = 0;
		
	





String dbschema_tPostgresPlusOutput_1 = null;
	dbschema_tPostgresPlusOutput_1 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_1 = null;
if(dbschema_tPostgresPlusOutput_1 == null || dbschema_tPostgresPlusOutput_1.trim().length() == 0) {
	tableName_tPostgresPlusOutput_1 = "brk_appartementsrecht";
} else {
	tableName_tPostgresPlusOutput_1 = dbschema_tPostgresPlusOutput_1 + "\".\"" + "brk_appartementsrecht";
}

int nb_line_tPostgresPlusOutput_1 = 0;
int nb_line_update_tPostgresPlusOutput_1 = 0;
int nb_line_inserted_tPostgresPlusOutput_1 = 0;
int nb_line_deleted_tPostgresPlusOutput_1 = 0;
int nb_line_rejected_tPostgresPlusOutput_1 = 0;

int deletedCount_tPostgresPlusOutput_1=0;
int updatedCount_tPostgresPlusOutput_1=0;
int insertedCount_tPostgresPlusOutput_1=0;
int rejectedCount_tPostgresPlusOutput_1=0;

boolean whetherReject_tPostgresPlusOutput_1 = false;


java.sql.Connection conn_tPostgresPlusOutput_1 = null;
	conn_tPostgresPlusOutput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_1 = false;
            String defaultSchema_tPostgresPlusOutput_1 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_1 = dbMetaData_tPostgresPlusOutput_1.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_1 == null || dbschema_tPostgresPlusOutput_1.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_1 = stmtSchema_tPostgresPlusOutput_1.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_1.next()){
                            defaultSchema_tPostgresPlusOutput_1 = rsSchema_tPostgresPlusOutput_1.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_1.next()) {
                    String table_tPostgresPlusOutput_1 = rsTable_tPostgresPlusOutput_1.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_1 = rsTable_tPostgresPlusOutput_1.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_1.equals("brk_appartementsrecht")
                        && (schema_tPostgresPlusOutput_1.equals(dbschema_tPostgresPlusOutput_1) || ((dbschema_tPostgresPlusOutput_1 == null || dbschema_tPostgresPlusOutput_1.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_1.equals(schema_tPostgresPlusOutput_1)))) {
                        whetherExist_tPostgresPlusOutput_1 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_1) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_1.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_1 + "\"(\"kdoreferentie\" VARCHAR(999)  ,\"kdotoestandsdatum\" VARCHAR(999)  ,\"appartementsrechtid\" VARCHAR(999)  ,\"appartementsrechtnamespace\" VARCHAR(999)  ,\"appartementsrechtlokaalid\" VARCHAR(999)  ,\"appartementsrechtversie\" VARCHAR(999)  ,\"appartementsrechtkoopsom\" VARCHAR(999)  ,\"appartementsrechtkoopsomvalutacode\" VARCHAR(999)  ,\"appartementsrechtkoopsomvalutawaarde\" VARCHAR(999)  ,\"appartementsrechtkoopjaar\" VARCHAR(999)  ,\"appartementsrechtindicatiemeerobjecten\" VARCHAR(999)  ,\"appartementsrechtkadaanduidingakrkadgemcodcode\" VARCHAR(999)  ,\"appartementsrechtkadaanduidingakrkadgemcodwaarde\" VARCHAR(999)  ,\"appartementsrechtkadaanduidingnaamkadgemcode\" VARCHAR(999)  ,\"appartementsrechtkadaanduidingnaamkadgemwaarde\" VARCHAR(999)  ,\"appartementsrechtkadaanduidingsectie\" VARCHAR(999)  ,\"appartementsrechtkadaanduidingperceelnummer\" VARCHAR(999)  ,\"appartementsrechtkadaanduidingappartsrechtvolgnum\" VARCHAR(999)  ,\"appartementsrechtaardcultbebouwdcode\" VARCHAR(999)  ,\"appartementsrechtaardcultbebouwdwaarde\" VARCHAR(999)  ,primary key(\"appartementsrechtid\"))");
                    }
                }
	    String insert_tPostgresPlusOutput_1 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_1 + "\" (\"kdoreferentie\",\"kdotoestandsdatum\",\"appartementsrechtid\",\"appartementsrechtnamespace\",\"appartementsrechtlokaalid\",\"appartementsrechtversie\",\"appartementsrechtkoopsom\",\"appartementsrechtkoopsomvalutacode\",\"appartementsrechtkoopsomvalutawaarde\",\"appartementsrechtkoopjaar\",\"appartementsrechtindicatiemeerobjecten\",\"appartementsrechtkadaanduidingakrkadgemcodcode\",\"appartementsrechtkadaanduidingakrkadgemcodwaarde\",\"appartementsrechtkadaanduidingnaamkadgemcode\",\"appartementsrechtkadaanduidingnaamkadgemwaarde\",\"appartementsrechtkadaanduidingsectie\",\"appartementsrechtkadaanduidingperceelnummer\",\"appartementsrechtkadaanduidingappartsrechtvolgnum\",\"appartementsrechtaardcultbebouwdcode\",\"appartementsrechtaardcultbebouwdwaarde\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_1 = conn_tPostgresPlusOutput_1.prepareStatement(insert_tPostgresPlusOutput_1);
	    resourceMap.put("pstmt_tPostgresPlusOutput_1", pstmt_tPostgresPlusOutput_1);
	    

 



/**
 * [tPostgresPlusOutput_1 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_2", false);
		start_Hash.put("tPostgresPlusOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("locatie"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_2 = 0;
		
	





String dbschema_tPostgresPlusOutput_2 = null;
	dbschema_tPostgresPlusOutput_2 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_2 = null;
if(dbschema_tPostgresPlusOutput_2 == null || dbschema_tPostgresPlusOutput_2.trim().length() == 0) {
	tableName_tPostgresPlusOutput_2 = "brk_appartementsrecht_locatiekadobj";
} else {
	tableName_tPostgresPlusOutput_2 = dbschema_tPostgresPlusOutput_2 + "\".\"" + "brk_appartementsrecht_locatiekadobj";
}

int nb_line_tPostgresPlusOutput_2 = 0;
int nb_line_update_tPostgresPlusOutput_2 = 0;
int nb_line_inserted_tPostgresPlusOutput_2 = 0;
int nb_line_deleted_tPostgresPlusOutput_2 = 0;
int nb_line_rejected_tPostgresPlusOutput_2 = 0;

int deletedCount_tPostgresPlusOutput_2=0;
int updatedCount_tPostgresPlusOutput_2=0;
int insertedCount_tPostgresPlusOutput_2=0;
int rejectedCount_tPostgresPlusOutput_2=0;

boolean whetherReject_tPostgresPlusOutput_2 = false;


java.sql.Connection conn_tPostgresPlusOutput_2 = null;
	conn_tPostgresPlusOutput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_2 = conn_tPostgresPlusOutput_2.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_2 = false;
            String defaultSchema_tPostgresPlusOutput_2 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_2 = dbMetaData_tPostgresPlusOutput_2.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_2 == null || dbschema_tPostgresPlusOutput_2.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_2 = conn_tPostgresPlusOutput_2.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_2 = stmtSchema_tPostgresPlusOutput_2.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_2.next()){
                            defaultSchema_tPostgresPlusOutput_2 = rsSchema_tPostgresPlusOutput_2.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_2.next()) {
                    String table_tPostgresPlusOutput_2 = rsTable_tPostgresPlusOutput_2.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_2 = rsTable_tPostgresPlusOutput_2.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_2.equals("brk_appartementsrecht_locatiekadobj")
                        && (schema_tPostgresPlusOutput_2.equals(dbschema_tPostgresPlusOutput_2) || ((dbschema_tPostgresPlusOutput_2 == null || dbschema_tPostgresPlusOutput_2.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_2.equals(schema_tPostgresPlusOutput_2)))) {
                        whetherExist_tPostgresPlusOutput_2 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_2) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_2 = conn_tPostgresPlusOutput_2.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_2.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_2 + "\"(\"kdoreferentie\" VARCHAR ,\"appartementsrechtid\" VARCHAR ,\"cultuurbebouwdcode\" VARCHAR ,\"cultuurbebouwd\" VARCHAR ,\"kadbinobrnaam\" VARCHAR ,\"kadbinhuilet\" VARCHAR ,\"kadbinhuinum\" VARCHAR ,\"kadbinhuinumtoev\" VARCHAR ,\"kadbinpostcode\" VARCHAR ,\"kadbinwoonplaats\" VARCHAR ,\"vbobagidentificatie\" VARCHAR ,\"vbohuinum\" VARCHAR ,\"vbohuilet\" VARCHAR ,\"vbohuinumtoev\" VARCHAR ,\"vbopostcode\" VARCHAR ,\"vbowoonplaats\" VARCHAR ,\"gerelateerdeobr\" VARCHAR ,\"gerelateerdewoonplaats\" VARCHAR ,\"vbonevenhuinum\" VARCHAR ,\"vbonevenhuilet\" VARCHAR ,\"vbonevenhuinumtoev\" VARCHAR ,\"vbonevenpostcode\" VARCHAR ,\"vbonevenwoonplaats\" VARCHAR ,\"vbonevengerelateerdeobr\" VARCHAR ,\"vbonevengerelateerdewoonplaats\" VARCHAR ,\"standplaatsbagidentificatie\" VARCHAR ,\"standplaatshuinum\" VARCHAR ,\"standplaatshuilet\" VARCHAR ,\"standplaatshuinumtoev\" VARCHAR ,\"standplaatspostcode\" VARCHAR ,\"standplaatswoonplaats\" VARCHAR ,\"standplaatsgerelateerdeobr\" VARCHAR ,\"standplaatsgerelateerdewoonplaats\" VARCHAR ,\"standplaatsnevenhuinum\" VARCHAR ,\"standplaatsnevenhuilet\" VARCHAR ,\"standplaatsnevenhuinumtoev\" VARCHAR ,\"standplaatsnevenpostcode\" VARCHAR ,\"standplaatsnevenwoonplaats\" VARCHAR ,\"standplaatsnevengerelateerdeobr\" VARCHAR ,\"standplaatsnevengerelateerdewoonplaats\" VARCHAR ,\"ligplaatsbagidentificatie\" VARCHAR ,\"ligplaatshuinum\" VARCHAR ,\"ligplaatshuilet\" VARCHAR ,\"ligplaatshuinumtoev\" VARCHAR ,\"ligplaatspostcode\" VARCHAR ,\"ligplaatswoonplaats\" VARCHAR ,\"ligplaatsgerelateerdeobr\" VARCHAR ,\"ligplaatsgerelateerdewoonplaats\" VARCHAR ,\"ligplaatsnevenhuinum\" VARCHAR ,\"ligplaatsnevenhuislet\" VARCHAR ,\"ligplaatsnevenhuinumtoev\" VARCHAR ,\"ligplaatsnevenpostcode\" VARCHAR ,\"ligplaatsnevenwoonplaats\" VARCHAR ,\"ligplaatsnevengerelateerdeobr\" VARCHAR ,\"ligplaatsnevengerelateerdewoonplaats\" VARCHAR )");
                    }
                }
	    String insert_tPostgresPlusOutput_2 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_2 + "\" (\"kdoreferentie\",\"appartementsrechtid\",\"cultuurbebouwdcode\",\"cultuurbebouwd\",\"kadbinobrnaam\",\"kadbinhuilet\",\"kadbinhuinum\",\"kadbinhuinumtoev\",\"kadbinpostcode\",\"kadbinwoonplaats\",\"vbobagidentificatie\",\"vbohuinum\",\"vbohuilet\",\"vbohuinumtoev\",\"vbopostcode\",\"vbowoonplaats\",\"gerelateerdeobr\",\"gerelateerdewoonplaats\",\"vbonevenhuinum\",\"vbonevenhuilet\",\"vbonevenhuinumtoev\",\"vbonevenpostcode\",\"vbonevenwoonplaats\",\"vbonevengerelateerdeobr\",\"vbonevengerelateerdewoonplaats\",\"standplaatsbagidentificatie\",\"standplaatshuinum\",\"standplaatshuilet\",\"standplaatshuinumtoev\",\"standplaatspostcode\",\"standplaatswoonplaats\",\"standplaatsgerelateerdeobr\",\"standplaatsgerelateerdewoonplaats\",\"standplaatsnevenhuinum\",\"standplaatsnevenhuilet\",\"standplaatsnevenhuinumtoev\",\"standplaatsnevenpostcode\",\"standplaatsnevenwoonplaats\",\"standplaatsnevengerelateerdeobr\",\"standplaatsnevengerelateerdewoonplaats\",\"ligplaatsbagidentificatie\",\"ligplaatshuinum\",\"ligplaatshuilet\",\"ligplaatshuinumtoev\",\"ligplaatspostcode\",\"ligplaatswoonplaats\",\"ligplaatsgerelateerdeobr\",\"ligplaatsgerelateerdewoonplaats\",\"ligplaatsnevenhuinum\",\"ligplaatsnevenhuislet\",\"ligplaatsnevenhuinumtoev\",\"ligplaatsnevenpostcode\",\"ligplaatsnevenwoonplaats\",\"ligplaatsnevengerelateerdeobr\",\"ligplaatsnevengerelateerdewoonplaats\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_2 = conn_tPostgresPlusOutput_2.prepareStatement(insert_tPostgresPlusOutput_2);
	    resourceMap.put("pstmt_tPostgresPlusOutput_2", pstmt_tPostgresPlusOutput_2);
	    

 



/**
 * [tPostgresPlusOutput_2 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_3", false);
		start_Hash.put("tPostgresPlusOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("belastmet"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_3 = 0;
		
	





String dbschema_tPostgresPlusOutput_3 = null;
	dbschema_tPostgresPlusOutput_3 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_3 = null;
if(dbschema_tPostgresPlusOutput_3 == null || dbschema_tPostgresPlusOutput_3.trim().length() == 0) {
	tableName_tPostgresPlusOutput_3 = "brk_appartementsrecht_belastmet";
} else {
	tableName_tPostgresPlusOutput_3 = dbschema_tPostgresPlusOutput_3 + "\".\"" + "brk_appartementsrecht_belastmet";
}

int nb_line_tPostgresPlusOutput_3 = 0;
int nb_line_update_tPostgresPlusOutput_3 = 0;
int nb_line_inserted_tPostgresPlusOutput_3 = 0;
int nb_line_deleted_tPostgresPlusOutput_3 = 0;
int nb_line_rejected_tPostgresPlusOutput_3 = 0;

int deletedCount_tPostgresPlusOutput_3=0;
int updatedCount_tPostgresPlusOutput_3=0;
int insertedCount_tPostgresPlusOutput_3=0;
int rejectedCount_tPostgresPlusOutput_3=0;

boolean whetherReject_tPostgresPlusOutput_3 = false;


java.sql.Connection conn_tPostgresPlusOutput_3 = null;
	conn_tPostgresPlusOutput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_3 = conn_tPostgresPlusOutput_3.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_3 = false;
            String defaultSchema_tPostgresPlusOutput_3 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_3 = dbMetaData_tPostgresPlusOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_3 == null || dbschema_tPostgresPlusOutput_3.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_3 = conn_tPostgresPlusOutput_3.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_3 = stmtSchema_tPostgresPlusOutput_3.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_3.next()){
                            defaultSchema_tPostgresPlusOutput_3 = rsSchema_tPostgresPlusOutput_3.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_3.next()) {
                    String table_tPostgresPlusOutput_3 = rsTable_tPostgresPlusOutput_3.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_3 = rsTable_tPostgresPlusOutput_3.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_3.equals("brk_appartementsrecht_belastmet")
                        && (schema_tPostgresPlusOutput_3.equals(dbschema_tPostgresPlusOutput_3) || ((dbschema_tPostgresPlusOutput_3 == null || dbschema_tPostgresPlusOutput_3.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_3.equals(schema_tPostgresPlusOutput_3)))) {
                        whetherExist_tPostgresPlusOutput_3 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_3) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_3 = conn_tPostgresPlusOutput_3.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_3.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_3 + "\"(\"kdoreferentie\" VARCHAR ,\"appartementsrechtid\" VARCHAR ,\"som\" VARCHAR ,\"valutacode\" VARCHAR ,\"valutawaarde\" VARCHAR ,\"eindjaar\" VARCHAR )");
                    }
                }
	    String insert_tPostgresPlusOutput_3 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_3 + "\" (\"kdoreferentie\",\"appartementsrechtid\",\"som\",\"valutacode\",\"valutawaarde\",\"eindjaar\") VALUES (?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_3 = conn_tPostgresPlusOutput_3.prepareStatement(insert_tPostgresPlusOutput_3);
	    resourceMap.put("pstmt_tPostgresPlusOutput_3", pstmt_tPostgresPlusOutput_3);
	    

 



/**
 * [tPostgresPlusOutput_3 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_4", false);
		start_Hash.put("tPostgresPlusOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("inonderzoek"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_4 = 0;
		
	





String dbschema_tPostgresPlusOutput_4 = null;
	dbschema_tPostgresPlusOutput_4 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_4 = null;
if(dbschema_tPostgresPlusOutput_4 == null || dbschema_tPostgresPlusOutput_4.trim().length() == 0) {
	tableName_tPostgresPlusOutput_4 = "brk_appartementsrecht_inonderzoek";
} else {
	tableName_tPostgresPlusOutput_4 = dbschema_tPostgresPlusOutput_4 + "\".\"" + "brk_appartementsrecht_inonderzoek";
}

int nb_line_tPostgresPlusOutput_4 = 0;
int nb_line_update_tPostgresPlusOutput_4 = 0;
int nb_line_inserted_tPostgresPlusOutput_4 = 0;
int nb_line_deleted_tPostgresPlusOutput_4 = 0;
int nb_line_rejected_tPostgresPlusOutput_4 = 0;

int deletedCount_tPostgresPlusOutput_4=0;
int updatedCount_tPostgresPlusOutput_4=0;
int insertedCount_tPostgresPlusOutput_4=0;
int rejectedCount_tPostgresPlusOutput_4=0;

boolean whetherReject_tPostgresPlusOutput_4 = false;


java.sql.Connection conn_tPostgresPlusOutput_4 = null;
	conn_tPostgresPlusOutput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_4 = conn_tPostgresPlusOutput_4.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_4 = false;
            String defaultSchema_tPostgresPlusOutput_4 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_4 = dbMetaData_tPostgresPlusOutput_4.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_4 == null || dbschema_tPostgresPlusOutput_4.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_4 = conn_tPostgresPlusOutput_4.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_4 = stmtSchema_tPostgresPlusOutput_4.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_4.next()){
                            defaultSchema_tPostgresPlusOutput_4 = rsSchema_tPostgresPlusOutput_4.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_4.next()) {
                    String table_tPostgresPlusOutput_4 = rsTable_tPostgresPlusOutput_4.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_4 = rsTable_tPostgresPlusOutput_4.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_4.equals("brk_appartementsrecht_inonderzoek")
                        && (schema_tPostgresPlusOutput_4.equals(dbschema_tPostgresPlusOutput_4) || ((dbschema_tPostgresPlusOutput_4 == null || dbschema_tPostgresPlusOutput_4.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_4.equals(schema_tPostgresPlusOutput_4)))) {
                        whetherExist_tPostgresPlusOutput_4 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_4) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_4 = conn_tPostgresPlusOutput_4.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_4.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_4 + "\"(\"kdoreferentie\" VARCHAR ,\"appartementsrechtid\" VARCHAR(999)  ,\"omschrijving\" VARCHAR(999)  )");
                    }
                }
	    String insert_tPostgresPlusOutput_4 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_4 + "\" (\"kdoreferentie\",\"appartementsrechtid\",\"omschrijving\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_4 = conn_tPostgresPlusOutput_4.prepareStatement(insert_tPostgresPlusOutput_4);
	    resourceMap.put("pstmt_tPostgresPlusOutput_4", pstmt_tPostgresPlusOutput_4);
	    

 



/**
 * [tPostgresPlusOutput_4 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_5", false);
		start_Hash.put("tPostgresPlusOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("ontstaanuit"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_5 = 0;
		
	





String dbschema_tPostgresPlusOutput_5 = null;
	dbschema_tPostgresPlusOutput_5 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_5 = null;
if(dbschema_tPostgresPlusOutput_5 == null || dbschema_tPostgresPlusOutput_5.trim().length() == 0) {
	tableName_tPostgresPlusOutput_5 = "brk_appartementsrecht_onroerendezaakfiliatie";
} else {
	tableName_tPostgresPlusOutput_5 = dbschema_tPostgresPlusOutput_5 + "\".\"" + "brk_appartementsrecht_onroerendezaakfiliatie";
}

int nb_line_tPostgresPlusOutput_5 = 0;
int nb_line_update_tPostgresPlusOutput_5 = 0;
int nb_line_inserted_tPostgresPlusOutput_5 = 0;
int nb_line_deleted_tPostgresPlusOutput_5 = 0;
int nb_line_rejected_tPostgresPlusOutput_5 = 0;

int deletedCount_tPostgresPlusOutput_5=0;
int updatedCount_tPostgresPlusOutput_5=0;
int insertedCount_tPostgresPlusOutput_5=0;
int rejectedCount_tPostgresPlusOutput_5=0;

boolean whetherReject_tPostgresPlusOutput_5 = false;


java.sql.Connection conn_tPostgresPlusOutput_5 = null;
	conn_tPostgresPlusOutput_5 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

            java.sql.DatabaseMetaData dbMetaData_tPostgresPlusOutput_5 = conn_tPostgresPlusOutput_5.getMetaData();
            boolean whetherExist_tPostgresPlusOutput_5 = false;
            String defaultSchema_tPostgresPlusOutput_5 = "public";
            try (java.sql.ResultSet rsTable_tPostgresPlusOutput_5 = dbMetaData_tPostgresPlusOutput_5.getTables(null, null, null, new String[]{"TABLE"})) {
                if(dbschema_tPostgresPlusOutput_5 == null || dbschema_tPostgresPlusOutput_5.trim().length() == 0) {
                    try (java.sql.Statement stmtSchema_tPostgresPlusOutput_5 = conn_tPostgresPlusOutput_5.createStatement();
                            java.sql.ResultSet rsSchema_tPostgresPlusOutput_5 = stmtSchema_tPostgresPlusOutput_5.executeQuery("select current_schema() ")) {
                        while(rsSchema_tPostgresPlusOutput_5.next()){
                            defaultSchema_tPostgresPlusOutput_5 = rsSchema_tPostgresPlusOutput_5.getString("current_schema");
                        }
                    }
                }
                while(rsTable_tPostgresPlusOutput_5.next()) {
                    String table_tPostgresPlusOutput_5 = rsTable_tPostgresPlusOutput_5.getString("TABLE_NAME");
                    String schema_tPostgresPlusOutput_5 = rsTable_tPostgresPlusOutput_5.getString("TABLE_SCHEM");
                    if(table_tPostgresPlusOutput_5.equals("brk_appartementsrecht_onroerendezaakfiliatie")
                        && (schema_tPostgresPlusOutput_5.equals(dbschema_tPostgresPlusOutput_5) || ((dbschema_tPostgresPlusOutput_5 == null || dbschema_tPostgresPlusOutput_5.trim().length() ==0) && defaultSchema_tPostgresPlusOutput_5.equals(schema_tPostgresPlusOutput_5)))) {
                        whetherExist_tPostgresPlusOutput_5 = true;
                        break;
                    }
                }
            }
                if(!whetherExist_tPostgresPlusOutput_5) {
                    try (java.sql.Statement stmtCreate_tPostgresPlusOutput_5 = conn_tPostgresPlusOutput_5.createStatement()) {
                        stmtCreate_tPostgresPlusOutput_5.execute("CREATE TABLE \"" + tableName_tPostgresPlusOutput_5 + "\"(\"kdoreferentie\" VARCHAR ,\"appartementsrechtid\" VARCHAR(999)  ,\"status\" VARCHAR(999)  ,\"aardcode\" VARCHAR(999)  ,\"aardwaarde\" VARCHAR(999)  ,\"overgangsgrootte\" VARCHAR(999)  ,\"appartementsrechtstype\" VARCHAR(999)  ,\"appartementsrechtshref\" VARCHAR(999)  ,\"perceeltype\" VARCHAR(999)  ,\"perceelhref\" VARCHAR(999)  )");
                    }
                }
	    String insert_tPostgresPlusOutput_5 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_5 + "\" (\"kdoreferentie\",\"appartementsrechtid\",\"status\",\"aardcode\",\"aardwaarde\",\"overgangsgrootte\",\"appartementsrechtstype\",\"appartementsrechtshref\",\"perceeltype\",\"perceelhref\") VALUES (?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_5 = conn_tPostgresPlusOutput_5.prepareStatement(insert_tPostgresPlusOutput_5);
	    resourceMap.put("pstmt_tPostgresPlusOutput_5", pstmt_tPostgresPlusOutput_5);
	    

 



/**
 * [tPostgresPlusOutput_5 begin ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusOutput_6", false);
		start_Hash.put("tPostgresPlusOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusOutput_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("overgegaanin"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tPostgresPlusOutput_6 = 0;
		
	





String dbschema_tPostgresPlusOutput_6 = null;
	dbschema_tPostgresPlusOutput_6 = (String)globalMap.get("schema_" + "tPostgresPlusConnection_1");
	

String tableName_tPostgresPlusOutput_6 = null;
if(dbschema_tPostgresPlusOutput_6 == null || dbschema_tPostgresPlusOutput_6.trim().length() == 0) {
	tableName_tPostgresPlusOutput_6 = "brk_appartementsrecht_onroerendezaakfiliatie";
} else {
	tableName_tPostgresPlusOutput_6 = dbschema_tPostgresPlusOutput_6 + "\".\"" + "brk_appartementsrecht_onroerendezaakfiliatie";
}

int nb_line_tPostgresPlusOutput_6 = 0;
int nb_line_update_tPostgresPlusOutput_6 = 0;
int nb_line_inserted_tPostgresPlusOutput_6 = 0;
int nb_line_deleted_tPostgresPlusOutput_6 = 0;
int nb_line_rejected_tPostgresPlusOutput_6 = 0;

int deletedCount_tPostgresPlusOutput_6=0;
int updatedCount_tPostgresPlusOutput_6=0;
int insertedCount_tPostgresPlusOutput_6=0;
int rejectedCount_tPostgresPlusOutput_6=0;

boolean whetherReject_tPostgresPlusOutput_6 = false;


java.sql.Connection conn_tPostgresPlusOutput_6 = null;
	conn_tPostgresPlusOutput_6 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
	
	

	    String insert_tPostgresPlusOutput_6 = "INSERT INTO \"" + tableName_tPostgresPlusOutput_6 + "\" (\"kdoreferentie\",\"appartementsrechtid\",\"status\",\"aardcode\",\"aardwaarde\",\"overgangsgrootte\",\"appartementsrechtstype\",\"appartementsrechtshref\",\"perceeltype\",\"perceelhref\") VALUES (?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresPlusOutput_6 = conn_tPostgresPlusOutput_6.prepareStatement(insert_tPostgresPlusOutput_6);
	    resourceMap.put("pstmt_tPostgresPlusOutput_6", pstmt_tPostgresPlusOutput_6);
	    

 



/**
 * [tPostgresPlusOutput_6 begin ] stop
 */



	
	/**
	 * [tXMLMap_1_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	
		int tos_count_tXMLMap_1_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_1 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_1");
for(Object  row_out_tXMLMap_1_TXMLMAP_IN : outs_tXMLMap_1) {//TD512
 



/**
 * [tXMLMap_1_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

	out1 = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof out1Struct) {
		out1 = (out1Struct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
	locatie = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof locatieStruct) {
		locatie = (locatieStruct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
	belastmet = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof belastmetStruct) {
		belastmet = (belastmetStruct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
	inonderzoek = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof inonderzoekStruct) {
		inonderzoek = (inonderzoekStruct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
	ontstaanuit = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof ontstaanuitStruct) {
		ontstaanuit = (ontstaanuitStruct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
	overgegaanin = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof overgegaaninStruct) {
		overgegaanin = (overgegaaninStruct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_1_TXMLMAP_IN++;

/**
 * [tXMLMap_1_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tPostgresPlusOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	

			//out1
			//out1


			
				
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_1 = false;
                    if(out1.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(1, out1.kdoreferentie);
}

                    if(out1.kdotoestandsdatum == null) {
pstmt_tPostgresPlusOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(2, out1.kdotoestandsdatum);
}

                    if(out1.appartementsrechtid == null) {
pstmt_tPostgresPlusOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(3, out1.appartementsrechtid);
}

                    if(out1.appartementsrechtnamespace == null) {
pstmt_tPostgresPlusOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(4, out1.appartementsrechtnamespace);
}

                    if(out1.appartementsrechtlokaalid == null) {
pstmt_tPostgresPlusOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(5, out1.appartementsrechtlokaalid);
}

                    if(out1.appartementsrechtversie == null) {
pstmt_tPostgresPlusOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(6, out1.appartementsrechtversie);
}

                    if(out1.appartementsrechtkoopsom == null) {
pstmt_tPostgresPlusOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(7, out1.appartementsrechtkoopsom);
}

                    if(out1.appartementsrechtkoopsomvalutacode == null) {
pstmt_tPostgresPlusOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(8, out1.appartementsrechtkoopsomvalutacode);
}

                    if(out1.appartementsrechtkoopsomvalutawaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(9, out1.appartementsrechtkoopsomvalutawaarde);
}

                    if(out1.appartementsrechtkoopjaar == null) {
pstmt_tPostgresPlusOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(10, out1.appartementsrechtkoopjaar);
}

                    if(out1.appartementsrechtindicatiemeerobjecten == null) {
pstmt_tPostgresPlusOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(11, out1.appartementsrechtindicatiemeerobjecten);
}

                    if(out1.appartementsrechtkadaanduidingakrkadgemcodcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(12, out1.appartementsrechtkadaanduidingakrkadgemcodcode);
}

                    if(out1.appartementsrechtkadaanduidingakrkadgemcodwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(13, out1.appartementsrechtkadaanduidingakrkadgemcodwaarde);
}

                    if(out1.appartementsrechtkadaanduidingnaamkadgemcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(14, out1.appartementsrechtkadaanduidingnaamkadgemcode);
}

                    if(out1.appartementsrechtkadaanduidingnaamkadgemwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(15, out1.appartementsrechtkadaanduidingnaamkadgemwaarde);
}

                    if(out1.appartementsrechtkadaanduidingsectie == null) {
pstmt_tPostgresPlusOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(16, out1.appartementsrechtkadaanduidingsectie);
}

                    if(out1.appartementsrechtkadaanduidingperceelnummer == null) {
pstmt_tPostgresPlusOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(17, out1.appartementsrechtkadaanduidingperceelnummer);
}

                    if(out1.appartementsrechtkadaanduidingappartsrechtvolgnum == null) {
pstmt_tPostgresPlusOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(18, out1.appartementsrechtkadaanduidingappartsrechtvolgnum);
}

                    if(out1.appartementsrechtaardcultbebouwdcode == null) {
pstmt_tPostgresPlusOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(19, out1.appartementsrechtaardcultbebouwdcode);
}

                    if(out1.appartementsrechtaardcultbebouwdwaarde == null) {
pstmt_tPostgresPlusOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_1.setString(20, out1.appartementsrechtaardcultbebouwdwaarde);
}


                       try {
                           insertedCount_tPostgresPlusOutput_1 = insertedCount_tPostgresPlusOutput_1 + pstmt_tPostgresPlusOutput_1.executeUpdate();
                           nb_line_tPostgresPlusOutput_1++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_1 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_1) {
            }

 


	tos_count_tPostgresPlusOutput_1++;

/**
 * [tPostgresPlusOutput_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	

 



/**
 * [tPostgresPlusOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	

 



/**
 * [tPostgresPlusOutput_1 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "locatie"
if(locatie != null) { 



	
	/**
	 * [tPostgresPlusOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_2";

	

			//locatie
			//locatie


			
				
				if(execStat){
					runStat.updateStatOnConnection("locatie"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_2 = false;
                    if(locatie.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(1, locatie.kdoreferentie);
}

                    if(locatie.appartementsrechtid == null) {
pstmt_tPostgresPlusOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(2, locatie.appartementsrechtid);
}

                    if(locatie.cultuurbebouwdcode == null) {
pstmt_tPostgresPlusOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(3, locatie.cultuurbebouwdcode);
}

                    if(locatie.cultuurbebouwd == null) {
pstmt_tPostgresPlusOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(4, locatie.cultuurbebouwd);
}

                    if(locatie.kadbinobrnaam == null) {
pstmt_tPostgresPlusOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(5, locatie.kadbinobrnaam);
}

                    if(locatie.kadbinhuilet == null) {
pstmt_tPostgresPlusOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(6, locatie.kadbinhuilet);
}

                    if(locatie.kadbinhuinum == null) {
pstmt_tPostgresPlusOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(7, locatie.kadbinhuinum);
}

                    if(locatie.kadbinhuinumtoev == null) {
pstmt_tPostgresPlusOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(8, locatie.kadbinhuinumtoev);
}

                    if(locatie.kadbinpostcode == null) {
pstmt_tPostgresPlusOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(9, locatie.kadbinpostcode);
}

                    if(locatie.kadbinwoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(10, locatie.kadbinwoonplaats);
}

                    if(locatie.vbobagidentificatie == null) {
pstmt_tPostgresPlusOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(11, locatie.vbobagidentificatie);
}

                    if(locatie.vbohuinum == null) {
pstmt_tPostgresPlusOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(12, locatie.vbohuinum);
}

                    if(locatie.vbohuilet == null) {
pstmt_tPostgresPlusOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(13, locatie.vbohuilet);
}

                    if(locatie.vbohuinumtoev == null) {
pstmt_tPostgresPlusOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(14, locatie.vbohuinumtoev);
}

                    if(locatie.vbopostcode == null) {
pstmt_tPostgresPlusOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(15, locatie.vbopostcode);
}

                    if(locatie.vbowoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(16, locatie.vbowoonplaats);
}

                    if(locatie.gerelateerdeobr == null) {
pstmt_tPostgresPlusOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(17, locatie.gerelateerdeobr);
}

                    if(locatie.gerelateerdewoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(18, locatie.gerelateerdewoonplaats);
}

                    if(locatie.vbonevenhuinum == null) {
pstmt_tPostgresPlusOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(19, locatie.vbonevenhuinum);
}

                    if(locatie.vbonevenhuilet == null) {
pstmt_tPostgresPlusOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(20, locatie.vbonevenhuilet);
}

                    if(locatie.vbonevenhuinumtoev == null) {
pstmt_tPostgresPlusOutput_2.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(21, locatie.vbonevenhuinumtoev);
}

                    if(locatie.vbonevenpostcode == null) {
pstmt_tPostgresPlusOutput_2.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(22, locatie.vbonevenpostcode);
}

                    if(locatie.vbonevenwoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(23, locatie.vbonevenwoonplaats);
}

                    if(locatie.vbonevengerelateerdeobr == null) {
pstmt_tPostgresPlusOutput_2.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(24, locatie.vbonevengerelateerdeobr);
}

                    if(locatie.vbonevengerelateerdewoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(25, locatie.vbonevengerelateerdewoonplaats);
}

                    if(locatie.standplaatsbagidentificatie == null) {
pstmt_tPostgresPlusOutput_2.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(26, locatie.standplaatsbagidentificatie);
}

                    if(locatie.standplaatshuinum == null) {
pstmt_tPostgresPlusOutput_2.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(27, locatie.standplaatshuinum);
}

                    if(locatie.standplaatshuilet == null) {
pstmt_tPostgresPlusOutput_2.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(28, locatie.standplaatshuilet);
}

                    if(locatie.standplaatshuinumtoev == null) {
pstmt_tPostgresPlusOutput_2.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(29, locatie.standplaatshuinumtoev);
}

                    if(locatie.standplaatspostcode == null) {
pstmt_tPostgresPlusOutput_2.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(30, locatie.standplaatspostcode);
}

                    if(locatie.standplaatswoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(31, locatie.standplaatswoonplaats);
}

                    if(locatie.standplaatsgerelateerdeobr == null) {
pstmt_tPostgresPlusOutput_2.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(32, locatie.standplaatsgerelateerdeobr);
}

                    if(locatie.standplaatsgerelateerdewoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(33, locatie.standplaatsgerelateerdewoonplaats);
}

                    if(locatie.standplaatsnevenhuinum == null) {
pstmt_tPostgresPlusOutput_2.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(34, locatie.standplaatsnevenhuinum);
}

                    if(locatie.standplaatsnevenhuilet == null) {
pstmt_tPostgresPlusOutput_2.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(35, locatie.standplaatsnevenhuilet);
}

                    if(locatie.standplaatsnevenhuinumtoev == null) {
pstmt_tPostgresPlusOutput_2.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(36, locatie.standplaatsnevenhuinumtoev);
}

                    if(locatie.standplaatsnevenpostcode == null) {
pstmt_tPostgresPlusOutput_2.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(37, locatie.standplaatsnevenpostcode);
}

                    if(locatie.standplaatsnevenwoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(38, locatie.standplaatsnevenwoonplaats);
}

                    if(locatie.standplaatsnevengerelateerdeobr == null) {
pstmt_tPostgresPlusOutput_2.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(39, locatie.standplaatsnevengerelateerdeobr);
}

                    if(locatie.standplaatsnevengerelateerdewoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(40, locatie.standplaatsnevengerelateerdewoonplaats);
}

                    if(locatie.ligplaatsbagidentificatie == null) {
pstmt_tPostgresPlusOutput_2.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(41, locatie.ligplaatsbagidentificatie);
}

                    if(locatie.ligplaatshuinum == null) {
pstmt_tPostgresPlusOutput_2.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(42, locatie.ligplaatshuinum);
}

                    if(locatie.ligplaatshuilet == null) {
pstmt_tPostgresPlusOutput_2.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(43, locatie.ligplaatshuilet);
}

                    if(locatie.ligplaatshuinumtoev == null) {
pstmt_tPostgresPlusOutput_2.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(44, locatie.ligplaatshuinumtoev);
}

                    if(locatie.ligplaatspostcode == null) {
pstmt_tPostgresPlusOutput_2.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(45, locatie.ligplaatspostcode);
}

                    if(locatie.ligplaatswoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(46, locatie.ligplaatswoonplaats);
}

                    if(locatie.ligplaatsgerelateerdeobr == null) {
pstmt_tPostgresPlusOutput_2.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(47, locatie.ligplaatsgerelateerdeobr);
}

                    if(locatie.ligplaatsgerelateerdewoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(48, locatie.ligplaatsgerelateerdewoonplaats);
}

                    if(locatie.ligplaatsnevenhuinum == null) {
pstmt_tPostgresPlusOutput_2.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(49, locatie.ligplaatsnevenhuinum);
}

                    if(locatie.ligplaatsnevenhuislet == null) {
pstmt_tPostgresPlusOutput_2.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(50, locatie.ligplaatsnevenhuislet);
}

                    if(locatie.ligplaatsnevenhuinumtoev == null) {
pstmt_tPostgresPlusOutput_2.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(51, locatie.ligplaatsnevenhuinumtoev);
}

                    if(locatie.ligplaatsnevenpostcode == null) {
pstmt_tPostgresPlusOutput_2.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(52, locatie.ligplaatsnevenpostcode);
}

                    if(locatie.ligplaatsnevenwoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(53, locatie.ligplaatsnevenwoonplaats);
}

                    if(locatie.ligplaatsnevengerelateerdeobr == null) {
pstmt_tPostgresPlusOutput_2.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(54, locatie.ligplaatsnevengerelateerdeobr);
}

                    if(locatie.ligplaatsnevengerelateerdewoonplaats == null) {
pstmt_tPostgresPlusOutput_2.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_2.setString(55, locatie.ligplaatsnevengerelateerdewoonplaats);
}


                       try {
                           insertedCount_tPostgresPlusOutput_2 = insertedCount_tPostgresPlusOutput_2 + pstmt_tPostgresPlusOutput_2.executeUpdate();
                           nb_line_tPostgresPlusOutput_2++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_2 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_2) {
            }

 


	tos_count_tPostgresPlusOutput_2++;

/**
 * [tPostgresPlusOutput_2 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_2";

	

 



/**
 * [tPostgresPlusOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_2";

	

 



/**
 * [tPostgresPlusOutput_2 process_data_end ] stop
 */

} // End of branch "locatie"




// Start of branch "belastmet"
if(belastmet != null) { 



	
	/**
	 * [tPostgresPlusOutput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_3";

	

			//belastmet
			//belastmet


			
				
				if(execStat){
					runStat.updateStatOnConnection("belastmet"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_3 = false;
                    if(belastmet.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(1, belastmet.kdoreferentie);
}

                    if(belastmet.appartementsrechtid == null) {
pstmt_tPostgresPlusOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(2, belastmet.appartementsrechtid);
}

                    if(belastmet.som == null) {
pstmt_tPostgresPlusOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(3, belastmet.som);
}

                    if(belastmet.valutacode == null) {
pstmt_tPostgresPlusOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(4, belastmet.valutacode);
}

                    if(belastmet.valutawaarde == null) {
pstmt_tPostgresPlusOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(5, belastmet.valutawaarde);
}

                    if(belastmet.eindjaar == null) {
pstmt_tPostgresPlusOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_3.setString(6, belastmet.eindjaar);
}


                       try {
                           insertedCount_tPostgresPlusOutput_3 = insertedCount_tPostgresPlusOutput_3 + pstmt_tPostgresPlusOutput_3.executeUpdate();
                           nb_line_tPostgresPlusOutput_3++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_3 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_3) {
            }

 


	tos_count_tPostgresPlusOutput_3++;

/**
 * [tPostgresPlusOutput_3 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_3";

	

 



/**
 * [tPostgresPlusOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_3";

	

 



/**
 * [tPostgresPlusOutput_3 process_data_end ] stop
 */

} // End of branch "belastmet"




// Start of branch "inonderzoek"
if(inonderzoek != null) { 



	
	/**
	 * [tPostgresPlusOutput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_4";

	

			//inonderzoek
			//inonderzoek


			
				
				if(execStat){
					runStat.updateStatOnConnection("inonderzoek"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_4 = false;
                    if(inonderzoek.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_4.setString(1, inonderzoek.kdoreferentie);
}

                    if(inonderzoek.appartementsrechtid == null) {
pstmt_tPostgresPlusOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_4.setString(2, inonderzoek.appartementsrechtid);
}

                    if(inonderzoek.omschrijving == null) {
pstmt_tPostgresPlusOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_4.setString(3, inonderzoek.omschrijving);
}


                       try {
                           insertedCount_tPostgresPlusOutput_4 = insertedCount_tPostgresPlusOutput_4 + pstmt_tPostgresPlusOutput_4.executeUpdate();
                           nb_line_tPostgresPlusOutput_4++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_4 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_4) {
            }

 


	tos_count_tPostgresPlusOutput_4++;

/**
 * [tPostgresPlusOutput_4 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_4";

	

 



/**
 * [tPostgresPlusOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_4";

	

 



/**
 * [tPostgresPlusOutput_4 process_data_end ] stop
 */

} // End of branch "inonderzoek"




// Start of branch "ontstaanuit"
if(ontstaanuit != null) { 



	
	/**
	 * [tPostgresPlusOutput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_5";

	

			//ontstaanuit
			//ontstaanuit


			
				
				if(execStat){
					runStat.updateStatOnConnection("ontstaanuit"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_5 = false;
                    if(ontstaanuit.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_5.setString(1, ontstaanuit.kdoreferentie);
}

                    if(ontstaanuit.appartementsrechtid == null) {
pstmt_tPostgresPlusOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_5.setString(2, ontstaanuit.appartementsrechtid);
}

                    if(ontstaanuit.status == null) {
pstmt_tPostgresPlusOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_5.setString(3, ontstaanuit.status);
}

                    if(ontstaanuit.aardcode == null) {
pstmt_tPostgresPlusOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_5.setString(4, ontstaanuit.aardcode);
}

                    if(ontstaanuit.aardwaarde == null) {
pstmt_tPostgresPlusOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_5.setString(5, ontstaanuit.aardwaarde);
}

                    if(ontstaanuit.overgangsgrootte == null) {
pstmt_tPostgresPlusOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_5.setString(6, ontstaanuit.overgangsgrootte);
}

                    if(ontstaanuit.appartementsrechtstype == null) {
pstmt_tPostgresPlusOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_5.setString(7, ontstaanuit.appartementsrechtstype);
}

                    if(ontstaanuit.appartementsrechtshref == null) {
pstmt_tPostgresPlusOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_5.setString(8, ontstaanuit.appartementsrechtshref);
}

                    if(ontstaanuit.perceeltype == null) {
pstmt_tPostgresPlusOutput_5.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_5.setString(9, ontstaanuit.perceeltype);
}

                    if(ontstaanuit.perceelhref == null) {
pstmt_tPostgresPlusOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_5.setString(10, ontstaanuit.perceelhref);
}


                       try {
                           insertedCount_tPostgresPlusOutput_5 = insertedCount_tPostgresPlusOutput_5 + pstmt_tPostgresPlusOutput_5.executeUpdate();
                           nb_line_tPostgresPlusOutput_5++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_5 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_5) {
            }

 


	tos_count_tPostgresPlusOutput_5++;

/**
 * [tPostgresPlusOutput_5 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_5";

	

 



/**
 * [tPostgresPlusOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_5";

	

 



/**
 * [tPostgresPlusOutput_5 process_data_end ] stop
 */

} // End of branch "ontstaanuit"




// Start of branch "overgegaanin"
if(overgegaanin != null) { 



	
	/**
	 * [tPostgresPlusOutput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_6";

	

			//overgegaanin
			//overgegaanin


			
				
				if(execStat){
					runStat.updateStatOnConnection("overgegaanin"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tPostgresPlusOutput_6 = false;
                    if(overgegaanin.kdoreferentie == null) {
pstmt_tPostgresPlusOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(1, overgegaanin.kdoreferentie);
}

                    if(overgegaanin.appartementsrechtid == null) {
pstmt_tPostgresPlusOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(2, overgegaanin.appartementsrechtid);
}

                    if(overgegaanin.status == null) {
pstmt_tPostgresPlusOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(3, overgegaanin.status);
}

                    if(overgegaanin.aardcode == null) {
pstmt_tPostgresPlusOutput_6.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(4, overgegaanin.aardcode);
}

                    if(overgegaanin.aardwaarde == null) {
pstmt_tPostgresPlusOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(5, overgegaanin.aardwaarde);
}

                    if(overgegaanin.overgangsgrootte == null) {
pstmt_tPostgresPlusOutput_6.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(6, overgegaanin.overgangsgrootte);
}

                    if(overgegaanin.appartementsrechtstype == null) {
pstmt_tPostgresPlusOutput_6.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(7, overgegaanin.appartementsrechtstype);
}

                    if(overgegaanin.appartementsrechtshref == null) {
pstmt_tPostgresPlusOutput_6.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(8, overgegaanin.appartementsrechtshref);
}

                    if(overgegaanin.perceeltype == null) {
pstmt_tPostgresPlusOutput_6.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(9, overgegaanin.perceeltype);
}

                    if(overgegaanin.perceelhref == null) {
pstmt_tPostgresPlusOutput_6.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresPlusOutput_6.setString(10, overgegaanin.perceelhref);
}


                       try {
                           insertedCount_tPostgresPlusOutput_6 = insertedCount_tPostgresPlusOutput_6 + pstmt_tPostgresPlusOutput_6.executeUpdate();
                           nb_line_tPostgresPlusOutput_6++;
                       } catch(java.lang.Exception e) {
                           whetherReject_tPostgresPlusOutput_6 = true;
                               throw(e);
                       }
            if(!whetherReject_tPostgresPlusOutput_6) {
            }

 


	tos_count_tPostgresPlusOutput_6++;

/**
 * [tPostgresPlusOutput_6 main ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_6";

	

 



/**
 * [tPostgresPlusOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_6";

	

 



/**
 * [tPostgresPlusOutput_6 process_data_end ] stop
 */

} // End of branch "overgegaanin"




	
	/**
	 * [tXMLMap_1_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_1_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tPostgresPlusOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	



        if(pstmt_tPostgresPlusOutput_1 != null) {
            pstmt_tPostgresPlusOutput_1.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_1");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_1", true);

	nb_line_deleted_tPostgresPlusOutput_1=nb_line_deleted_tPostgresPlusOutput_1+ deletedCount_tPostgresPlusOutput_1;
	nb_line_update_tPostgresPlusOutput_1=nb_line_update_tPostgresPlusOutput_1 + updatedCount_tPostgresPlusOutput_1;
	nb_line_inserted_tPostgresPlusOutput_1=nb_line_inserted_tPostgresPlusOutput_1 + insertedCount_tPostgresPlusOutput_1;
	nb_line_rejected_tPostgresPlusOutput_1=nb_line_rejected_tPostgresPlusOutput_1 + rejectedCount_tPostgresPlusOutput_1;
	
        globalMap.put("tPostgresPlusOutput_1_NB_LINE",nb_line_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_1);
        globalMap.put("tPostgresPlusOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_1);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("out1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_1", true);
end_Hash.put("tPostgresPlusOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostgresPlusOutput_1 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_2";

	



        if(pstmt_tPostgresPlusOutput_2 != null) {
            pstmt_tPostgresPlusOutput_2.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_2");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_2", true);

	nb_line_deleted_tPostgresPlusOutput_2=nb_line_deleted_tPostgresPlusOutput_2+ deletedCount_tPostgresPlusOutput_2;
	nb_line_update_tPostgresPlusOutput_2=nb_line_update_tPostgresPlusOutput_2 + updatedCount_tPostgresPlusOutput_2;
	nb_line_inserted_tPostgresPlusOutput_2=nb_line_inserted_tPostgresPlusOutput_2 + insertedCount_tPostgresPlusOutput_2;
	nb_line_rejected_tPostgresPlusOutput_2=nb_line_rejected_tPostgresPlusOutput_2 + rejectedCount_tPostgresPlusOutput_2;
	
        globalMap.put("tPostgresPlusOutput_2_NB_LINE",nb_line_tPostgresPlusOutput_2);
        globalMap.put("tPostgresPlusOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_2);
        globalMap.put("tPostgresPlusOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_2);
        globalMap.put("tPostgresPlusOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_2);
        globalMap.put("tPostgresPlusOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_2);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("locatie"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_2", true);
end_Hash.put("tPostgresPlusOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_9Process(globalMap);



/**
 * [tPostgresPlusOutput_2 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_3";

	



        if(pstmt_tPostgresPlusOutput_3 != null) {
            pstmt_tPostgresPlusOutput_3.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_3");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_3", true);

	nb_line_deleted_tPostgresPlusOutput_3=nb_line_deleted_tPostgresPlusOutput_3+ deletedCount_tPostgresPlusOutput_3;
	nb_line_update_tPostgresPlusOutput_3=nb_line_update_tPostgresPlusOutput_3 + updatedCount_tPostgresPlusOutput_3;
	nb_line_inserted_tPostgresPlusOutput_3=nb_line_inserted_tPostgresPlusOutput_3 + insertedCount_tPostgresPlusOutput_3;
	nb_line_rejected_tPostgresPlusOutput_3=nb_line_rejected_tPostgresPlusOutput_3 + rejectedCount_tPostgresPlusOutput_3;
	
        globalMap.put("tPostgresPlusOutput_3_NB_LINE",nb_line_tPostgresPlusOutput_3);
        globalMap.put("tPostgresPlusOutput_3_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_3);
        globalMap.put("tPostgresPlusOutput_3_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_3);
        globalMap.put("tPostgresPlusOutput_3_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_3);
        globalMap.put("tPostgresPlusOutput_3_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_3);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("belastmet"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_3", true);
end_Hash.put("tPostgresPlusOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_7Process(globalMap);



/**
 * [tPostgresPlusOutput_3 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_4";

	



        if(pstmt_tPostgresPlusOutput_4 != null) {
            pstmt_tPostgresPlusOutput_4.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_4");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_4", true);

	nb_line_deleted_tPostgresPlusOutput_4=nb_line_deleted_tPostgresPlusOutput_4+ deletedCount_tPostgresPlusOutput_4;
	nb_line_update_tPostgresPlusOutput_4=nb_line_update_tPostgresPlusOutput_4 + updatedCount_tPostgresPlusOutput_4;
	nb_line_inserted_tPostgresPlusOutput_4=nb_line_inserted_tPostgresPlusOutput_4 + insertedCount_tPostgresPlusOutput_4;
	nb_line_rejected_tPostgresPlusOutput_4=nb_line_rejected_tPostgresPlusOutput_4 + rejectedCount_tPostgresPlusOutput_4;
	
        globalMap.put("tPostgresPlusOutput_4_NB_LINE",nb_line_tPostgresPlusOutput_4);
        globalMap.put("tPostgresPlusOutput_4_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_4);
        globalMap.put("tPostgresPlusOutput_4_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_4);
        globalMap.put("tPostgresPlusOutput_4_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_4);
        globalMap.put("tPostgresPlusOutput_4_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_4);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("inonderzoek"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_4", true);
end_Hash.put("tPostgresPlusOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_5Process(globalMap);



/**
 * [tPostgresPlusOutput_4 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_5";

	



        if(pstmt_tPostgresPlusOutput_5 != null) {
            pstmt_tPostgresPlusOutput_5.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_5");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_5", true);

	nb_line_deleted_tPostgresPlusOutput_5=nb_line_deleted_tPostgresPlusOutput_5+ deletedCount_tPostgresPlusOutput_5;
	nb_line_update_tPostgresPlusOutput_5=nb_line_update_tPostgresPlusOutput_5 + updatedCount_tPostgresPlusOutput_5;
	nb_line_inserted_tPostgresPlusOutput_5=nb_line_inserted_tPostgresPlusOutput_5 + insertedCount_tPostgresPlusOutput_5;
	nb_line_rejected_tPostgresPlusOutput_5=nb_line_rejected_tPostgresPlusOutput_5 + rejectedCount_tPostgresPlusOutput_5;
	
        globalMap.put("tPostgresPlusOutput_5_NB_LINE",nb_line_tPostgresPlusOutput_5);
        globalMap.put("tPostgresPlusOutput_5_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_5);
        globalMap.put("tPostgresPlusOutput_5_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_5);
        globalMap.put("tPostgresPlusOutput_5_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_5);
        globalMap.put("tPostgresPlusOutput_5_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_5);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("ontstaanuit"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_5", true);
end_Hash.put("tPostgresPlusOutput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tPostgresPlusOutput_5 end ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_6";

	



        if(pstmt_tPostgresPlusOutput_6 != null) {
            pstmt_tPostgresPlusOutput_6.close();
            resourceMap.remove("pstmt_tPostgresPlusOutput_6");
        }
    resourceMap.put("statementClosed_tPostgresPlusOutput_6", true);

	nb_line_deleted_tPostgresPlusOutput_6=nb_line_deleted_tPostgresPlusOutput_6+ deletedCount_tPostgresPlusOutput_6;
	nb_line_update_tPostgresPlusOutput_6=nb_line_update_tPostgresPlusOutput_6 + updatedCount_tPostgresPlusOutput_6;
	nb_line_inserted_tPostgresPlusOutput_6=nb_line_inserted_tPostgresPlusOutput_6 + insertedCount_tPostgresPlusOutput_6;
	nb_line_rejected_tPostgresPlusOutput_6=nb_line_rejected_tPostgresPlusOutput_6 + rejectedCount_tPostgresPlusOutput_6;
	
        globalMap.put("tPostgresPlusOutput_6_NB_LINE",nb_line_tPostgresPlusOutput_6);
        globalMap.put("tPostgresPlusOutput_6_NB_LINE_UPDATED",nb_line_update_tPostgresPlusOutput_6);
        globalMap.put("tPostgresPlusOutput_6_NB_LINE_INSERTED",nb_line_inserted_tPostgresPlusOutput_6);
        globalMap.put("tPostgresPlusOutput_6_NB_LINE_DELETED",nb_line_deleted_tPostgresPlusOutput_6);
        globalMap.put("tPostgresPlusOutput_6_NB_LINE_REJECTED", nb_line_rejected_tPostgresPlusOutput_6);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("overgegaanin"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tPostgresPlusOutput_6", true);
end_Hash.put("tPostgresPlusOutput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_11Process(globalMap);



/**
 * [tPostgresPlusOutput_6 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputXML_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tPostgresPlusRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tPostgresPlusOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_1";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_1 = null;
                if ((pstmtToClose_tPostgresPlusOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_1")) != null) {
                    pstmtToClose_tPostgresPlusOutput_1.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_1 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_2";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_2 = null;
                if ((pstmtToClose_tPostgresPlusOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_2")) != null) {
                    pstmtToClose_tPostgresPlusOutput_2.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_2 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_3";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_3 = null;
                if ((pstmtToClose_tPostgresPlusOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_3")) != null) {
                    pstmtToClose_tPostgresPlusOutput_3.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_3 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_4";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_4 = null;
                if ((pstmtToClose_tPostgresPlusOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_4")) != null) {
                    pstmtToClose_tPostgresPlusOutput_4.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_4 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_5";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_5 = null;
                if ((pstmtToClose_tPostgresPlusOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_5")) != null) {
                    pstmtToClose_tPostgresPlusOutput_5.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_5 finally ] stop
 */




	
	/**
	 * [tPostgresPlusOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusOutput_6";

	



    if (resourceMap.get("statementClosed_tPostgresPlusOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresPlusOutput_6 = null;
                if ((pstmtToClose_tPostgresPlusOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresPlusOutput_6")) != null) {
                    pstmtToClose_tPostgresPlusOutput_6.close();
                }
    }
 



/**
 * [tPostgresPlusOutput_6 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


context.result = true;
context.jobName = "brk_appartementsrecht_job";
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("xmlLocation", context.xmlLocation);
                    paraList_tRunJob_1.add("--context_type " + "xmlLocation" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("xmlType", context.xmlType);
                    paraList_tRunJob_1.add("--context_type " + "xmlType" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("jobName", context.jobName);
                    paraList_tRunJob_1.add("--context_type " + "jobName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("result", context.result);
                    paraList_tRunJob_1.add("--context_type " + "result" + "=" + "id_Boolean");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		brk.joblogger_0_1.JobLogger childJob_tRunJob_1 = new brk.joblogger_0_1.JobLogger();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
					java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";

	
		int tos_count_tJava_9 = 0;
		


context.result = true;
context.jobName = "brk_appartementsrecht_locatiekadobj_job";
 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 process_data_begin ] stop
 */
	
	/**
	 * [tJava_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 process_data_end ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}
	

public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";

	
		int tos_count_tJava_7 = 0;
		


context.result = true;
context.jobName = "brk_appartementsrecht_belastmet_job";
 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		


context.result = true;
context.jobName = "brk_appartementsrecht_inonderzoek_job";
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


context.result = true;
context.jobName = "brk_appartementsrecht_onroerendezaakfiliatie_job1";
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_11", false);
		start_Hash.put("tJava_11", System.currentTimeMillis());
		
	
	currentComponent="tJava_11";

	
		int tos_count_tJava_11 = 0;
		


context.result = true;
context.jobName = "brk_appartementsrecht_onroerendezaakfiliatie_job2";
 



/**
 * [tJava_11 begin ] stop
 */
	
	/**
	 * [tJava_11 main ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 


	tos_count_tJava_11++;

/**
 * [tJava_11 main ] stop
 */
	
	/**
	 * [tJava_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 process_data_begin ] stop
 */
	
	/**
	 * [tJava_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 process_data_end ] stop
 */
	
	/**
	 * [tJava_11 end ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 

ok_Hash.put("tJava_11", true);
end_Hash.put("tJava_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_11 finally ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresPlusRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresPlusRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresPlusRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresPlusRow_1", false);
		start_Hash.put("tPostgresPlusRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresPlusRow_1";

	
		int tos_count_tPostgresPlusRow_1 = 0;
		

	java.sql.Connection conn_tPostgresPlusRow_1 = null;
	String query_tPostgresPlusRow_1 = "";
	boolean whetherReject_tPostgresPlusRow_1 = false;
				conn_tPostgresPlusRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresPlusConnection_1");
			
    resourceMap.put("conn_tPostgresPlusRow_1", conn_tPostgresPlusRow_1);
        java.sql.Statement stmt_tPostgresPlusRow_1 = conn_tPostgresPlusRow_1.createStatement();
        resourceMap.put("stmt_tPostgresPlusRow_1", stmt_tPostgresPlusRow_1);

 



/**
 * [tPostgresPlusRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

query_tPostgresPlusRow_1 = "COMMENT ON TABLE brk_appartementsrecht IS 'Appartementsrecht';\nCOMMENT ON COLUMN brk_appartementsrecht.kdoreferentie I"
+"S 'kdo referentie';\nCOMMENT ON COLUMN brk_appartementsrecht.appartementsrechtid IS 'id';\nCOMMENT ON COLUMN brk_apparte"
+"mentsrecht.appartementsrechtnamespace IS 'namespace';\nCOMMENT ON COLUMN brk_appartementsrecht.appartementsrechtlokaalid"
+" IS 'lokaal id';\nCOMMENT ON COLUMN brk_appartementsrecht.appartementsrechtversie IS 'versie';\nCOMMENT ON COLUMN brk_ap"
+"partementsrecht.appartementsrechtkoopsom IS 'Koopsom';\nCOMMENT ON COLUMN brk_appartementsrecht.appartementsrechtkoopsom"
+"valutacode IS 'Koopsom valuta code';\nCOMMENT ON COLUMN brk_appartementsrecht.appartementsrechtkoopsomvalutawaarde IS 'K"
+"oopsom valuta';\nCOMMENT ON COLUMN brk_appartementsrecht.appartementsrechtkoopjaar IS 'Koopjaar';\nCOMMENT ON COLUMN brk"
+"_appartementsrecht.appartementsrechtindicatiemeerobjecten IS 'Indicatie meerobjecten';\nCOMMENT ON COLUMN brk_appartemen"
+"tsrecht.appartementsrechtindicatiemeerobjecten IS 'Indicatie meerobjecten';";
whetherReject_tPostgresPlusRow_1 = false;
globalMap.put("tPostgresPlusRow_1_QUERY",query_tPostgresPlusRow_1);
try {
		stmt_tPostgresPlusRow_1.execute(query_tPostgresPlusRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresPlusRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tPostgresPlusRow_1++;

/**
 * [tPostgresPlusRow_1 main ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

 



/**
 * [tPostgresPlusRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

 



/**
 * [tPostgresPlusRow_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresPlusRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

	
        stmt_tPostgresPlusRow_1.close();
        resourceMap.remove("stmt_tPostgresPlusRow_1");
    resourceMap.put("statementClosed_tPostgresPlusRow_1", true);
    resourceMap.put("finish_tPostgresPlusRow_1", true);
 

ok_Hash.put("tPostgresPlusRow_1", true);
end_Hash.put("tPostgresPlusRow_1", System.currentTimeMillis());




/**
 * [tPostgresPlusRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresPlusRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresPlusRow_1";

	

    if (resourceMap.get("statementClosed_tPostgresPlusRow_1") == null) {
            java.sql.Statement stmtToClose_tPostgresPlusRow_1 = null;
            if ((stmtToClose_tPostgresPlusRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresPlusRow_1")) != null) {
                stmtToClose_tPostgresPlusRow_1.close();
            }
    }
 



/**
 * [tPostgresPlusRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresPlusRow_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final brk_appartementsrecht_init brk_appartementsrecht_initClass = new brk_appartementsrecht_init();

        int exitCode = brk_appartementsrecht_initClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = brk_appartementsrecht_init.class.getClassLoader().getResourceAsStream("brk/brk_appartementsrecht_init_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = brk_appartementsrecht_init.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("xmlLocation", "id_String");
                            context.xmlLocation=(String) context.getProperty("xmlLocation");
                        context.setContextType("xmlType", "id_String");
                            context.xmlType=(String) context.getProperty("xmlType");
                        context.setContextType("jobName", "id_String");
                            context.jobName=(String) context.getProperty("jobName");
                        context.setContextType("result", "id_Boolean");
                            try{
                                context.result=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("result"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "result", e.getMessage()));
                                context.result=null;
                            }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("xmlLocation")) {
                context.xmlLocation = (String) parentContextMap.get("xmlLocation");
            }if (parentContextMap.containsKey("xmlType")) {
                context.xmlType = (String) parentContextMap.get("xmlType");
            }if (parentContextMap.containsKey("jobName")) {
                context.jobName = (String) parentContextMap.get("jobName");
            }if (parentContextMap.containsKey("result")) {
                context.result = (Boolean) parentContextMap.get("result");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tWarn_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tWarn_1) {
globalMap.put("tWarn_1_SUBPROCESS_STATE", -1);

e_tWarn_1.printStackTrace();

}
try {
errorCode = null;tPostgresPlusConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresPlusConnection_1) {
globalMap.put("tPostgresPlusConnection_1_SUBPROCESS_STATE", -1);

e_tPostgresPlusConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : brk_appartementsrecht_init");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresPlusConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresPlusConnection_1", globalMap.get("conn_tPostgresPlusConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     484443 characters generated by Talend Open Studio for Data Integration 
 *     on the 10 mei 2020 14:29:41 CEST
 ************************************************************************************************/