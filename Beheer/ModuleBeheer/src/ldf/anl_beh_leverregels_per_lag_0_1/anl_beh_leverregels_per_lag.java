// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ldf.anl_beh_leverregels_per_lag_0_1;

import routines.DataOperation;
import routines.Settings;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.Mathematical;
import routines.CustomSettings;
import routines.Relational;
import routines.TalendDate;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: anl_beh_leverregels_per_lag Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.2.20150508_1414
 * @status 
 */
public class anl_beh_leverregels_per_lag implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (CLASS != null) {

				this.setProperty("CLASS", CLASS.toString());

			}

			if (CONNECTIESTR != null) {

				this.setProperty("CONNECTIESTR", CONNECTIESTR.toString());

			}

			if (contextDir != null) {

				this.setProperty("contextDir", contextDir.toString());

			}

			if (contextName != null) {

				this.setProperty("contextName", contextName.toString());

			}

			if (contextStr != null) {

				this.setProperty("contextStr", contextStr.toString());

			}

			if (DAGEN180 != null) {

				this.setProperty("DAGEN180", DAGEN180.toString());

			}

			if (DAGEN182 != null) {

				this.setProperty("DAGEN182", DAGEN182.toString());

			}

			if (DAGEN30 != null) {

				this.setProperty("DAGEN30", DAGEN30.toString());

			}

			if (DAGEN93 != null) {

				this.setProperty("DAGEN93", DAGEN93.toString());

			}

			if (DATABASE != null) {

				this.setProperty("DATABASE", DATABASE.toString());

			}

			if (dataDir != null) {

				this.setProperty("dataDir", dataDir.toString());

			}

			if (dataFile != null) {

				this.setProperty("dataFile", dataFile.toString());

			}

			if (DRIVER_CLASS != null) {

				this.setProperty("DRIVER_CLASS", DRIVER_CLASS.toString());

			}

			if (DTB != null) {

				this.setProperty("DTB", DTB.toString());

			}

			if (gemeentecode != null) {

				this.setProperty("gemeentecode", gemeentecode.toString());

			}

			if (HOST != null) {

				this.setProperty("HOST", HOST.toString());

			}

			if (jobName != null) {

				this.setProperty("jobName", jobName.toString());

			}

			if (MAANDEN3 != null) {

				this.setProperty("MAANDEN3", MAANDEN3.toString());

			}

			if (metadataSql != null) {

				this.setProperty("metadataSql", metadataSql.toString());

			}

			if (PORT != null) {

				this.setProperty("PORT", PORT.toString());

			}

			if (PWD_DEC != null) {

				this.setProperty("PWD_DEC", PWD_DEC.toString());

			}

			if (PWD_ENC != null) {

				this.setProperty("PWD_ENC", PWD_ENC.toString());

			}

			if (result != null) {

				this.setProperty("result", result.toString());

			}

			if (SCHEMA != null) {

				this.setProperty("SCHEMA", SCHEMA.toString());

			}

			if (SCONNECTIESTR != null) {

				this.setProperty("SCONNECTIESTR", SCONNECTIESTR.toString());

			}

			if (SDATABASE != null) {

				this.setProperty("SDATABASE", SDATABASE.toString());

			}

			if (SDRIVER_CLASS != null) {

				this.setProperty("SDRIVER_CLASS", SDRIVER_CLASS.toString());

			}

			if (SDTB != null) {

				this.setProperty("SDTB", SDTB.toString());

			}

			if (SHOST != null) {

				this.setProperty("SHOST", SHOST.toString());

			}

			if (SPORT != null) {

				this.setProperty("SPORT", SPORT.toString());

			}

			if (SPWD_DEC != null) {

				this.setProperty("SPWD_DEC", SPWD_DEC.toString());

			}

			if (SPWD_ENC != null) {

				this.setProperty("SPWD_ENC", SPWD_ENC.toString());

			}

			if (sql_blok != null) {

				this.setProperty("sql_blok", sql_blok.toString());

			}

			if (sql_text != null) {

				this.setProperty("sql_text", sql_text.toString());

			}

			if (SSCHEMA != null) {

				this.setProperty("SSCHEMA", SSCHEMA.toString());

			}

			if (SUSER != null) {

				this.setProperty("SUSER", SUSER.toString());

			}

			if (TABLE != null) {

				this.setProperty("TABLE", TABLE.toString());

			}

			if (TCONNECTIESTR != null) {

				this.setProperty("TCONNECTIESTR", TCONNECTIESTR.toString());

			}

			if (TDATABASE != null) {

				this.setProperty("TDATABASE", TDATABASE.toString());

			}

			if (TDRIVER_CLASS != null) {

				this.setProperty("TDRIVER_CLASS", TDRIVER_CLASS.toString());

			}

			if (TDTB != null) {

				this.setProperty("TDTB", TDTB.toString());

			}

			if (THOST != null) {

				this.setProperty("THOST", THOST.toString());

			}

			if (TPORT != null) {

				this.setProperty("TPORT", TPORT.toString());

			}

			if (TPWD_DEC != null) {

				this.setProperty("TPWD_DEC", TPWD_DEC.toString());

			}

			if (TPWD_ENC != null) {

				this.setProperty("TPWD_ENC", TPWD_ENC.toString());

			}

			if (TSCHEMA != null) {

				this.setProperty("TSCHEMA", TSCHEMA.toString());

			}

			if (TUSER != null) {

				this.setProperty("TUSER", TUSER.toString());

			}

			if (TYPE != null) {

				this.setProperty("TYPE", TYPE.toString());

			}

			if (USER != null) {

				this.setProperty("USER", USER.toString());

			}

		}

		public String CLASS;

		public String getCLASS() {
			return this.CLASS;
		}

		public String CONNECTIESTR;

		public String getCONNECTIESTR() {
			return this.CONNECTIESTR;
		}

		public String contextDir;

		public String getContextDir() {
			return this.contextDir;
		}

		public String contextName;

		public String getContextName() {
			return this.contextName;
		}

		public String contextStr;

		public String getContextStr() {
			return this.contextStr;
		}

		public String DAGEN180;

		public String getDAGEN180() {
			return this.DAGEN180;
		}

		public String DAGEN182;

		public String getDAGEN182() {
			return this.DAGEN182;
		}

		public String DAGEN30;

		public String getDAGEN30() {
			return this.DAGEN30;
		}

		public String DAGEN93;

		public String getDAGEN93() {
			return this.DAGEN93;
		}

		public String DATABASE;

		public String getDATABASE() {
			return this.DATABASE;
		}

		public String dataDir;

		public String getDataDir() {
			return this.dataDir;
		}

		public String dataFile;

		public String getDataFile() {
			return this.dataFile;
		}

		public String DRIVER_CLASS;

		public String getDRIVER_CLASS() {
			return this.DRIVER_CLASS;
		}

		public String DTB;

		public String getDTB() {
			return this.DTB;
		}

		public String gemeentecode;

		public String getGemeentecode() {
			return this.gemeentecode;
		}

		public String HOST;

		public String getHOST() {
			return this.HOST;
		}

		public String jobName;

		public String getJobName() {
			return this.jobName;
		}

		public String MAANDEN3;

		public String getMAANDEN3() {
			return this.MAANDEN3;
		}

		public String metadataSql;

		public String getMetadataSql() {
			return this.metadataSql;
		}

		public String PORT;

		public String getPORT() {
			return this.PORT;
		}

		public String PWD_DEC;

		public String getPWD_DEC() {
			return this.PWD_DEC;
		}

		public String PWD_ENC;

		public String getPWD_ENC() {
			return this.PWD_ENC;
		}

		public Boolean result;

		public Boolean getResult() {
			return this.result;
		}

		public String SCHEMA;

		public String getSCHEMA() {
			return this.SCHEMA;
		}

		public String SCONNECTIESTR;

		public String getSCONNECTIESTR() {
			return this.SCONNECTIESTR;
		}

		public String SDATABASE;

		public String getSDATABASE() {
			return this.SDATABASE;
		}

		public String SDRIVER_CLASS;

		public String getSDRIVER_CLASS() {
			return this.SDRIVER_CLASS;
		}

		public String SDTB;

		public String getSDTB() {
			return this.SDTB;
		}

		public String SHOST;

		public String getSHOST() {
			return this.SHOST;
		}

		public String SPORT;

		public String getSPORT() {
			return this.SPORT;
		}

		public String SPWD_DEC;

		public String getSPWD_DEC() {
			return this.SPWD_DEC;
		}

		public String SPWD_ENC;

		public String getSPWD_ENC() {
			return this.SPWD_ENC;
		}

		public String sql_blok;

		public String getSql_blok() {
			return this.sql_blok;
		}

		public String sql_text;

		public String getSql_text() {
			return this.sql_text;
		}

		public String SSCHEMA;

		public String getSSCHEMA() {
			return this.SSCHEMA;
		}

		public String SUSER;

		public String getSUSER() {
			return this.SUSER;
		}

		public String TABLE;

		public String getTABLE() {
			return this.TABLE;
		}

		public String TCONNECTIESTR;

		public String getTCONNECTIESTR() {
			return this.TCONNECTIESTR;
		}

		public String TDATABASE;

		public String getTDATABASE() {
			return this.TDATABASE;
		}

		public String TDRIVER_CLASS;

		public String getTDRIVER_CLASS() {
			return this.TDRIVER_CLASS;
		}

		public String TDTB;

		public String getTDTB() {
			return this.TDTB;
		}

		public String THOST;

		public String getTHOST() {
			return this.THOST;
		}

		public String TPORT;

		public String getTPORT() {
			return this.TPORT;
		}

		public String TPWD_DEC;

		public String getTPWD_DEC() {
			return this.TPWD_DEC;
		}

		public String TPWD_ENC;

		public String getTPWD_ENC() {
			return this.TPWD_ENC;
		}

		public String TSCHEMA;

		public String getTSCHEMA() {
			return this.TSCHEMA;
		}

		public String TUSER;

		public String getTUSER() {
			return this.TUSER;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String USER;

		public String getUSER() {
			return this.USER;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "anl_beh_leverregels_per_lag";
	private final String projectName = "LDF";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					anl_beh_leverregels_per_lag.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(anl_beh_leverregels_per_lag.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCClose_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCClose_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tJava_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCClose_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ Settings.get("CONNECTION_DEFINITION", "host") + ":"
						+ Settings.get("CONNECTION_DEFINITION", "port") + "/"
						+ Settings.get("CONNECTION_DEFINITION", "database");

				String dbUser_tPostgresqlConnection_1 = Settings.get(
						"CONNECTION_DEFINITION", "user");

				final String decryptedPassword_tPostgresqlConnection_1 = Settings
						.get("CONNECTION_DEFINITION", "password");
				String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_1);

				conn_tPostgresqlConnection_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_1,
								dbUser_tPostgresqlConnection_1,
								dbPwd_tPostgresqlConnection_1);

				globalMap.put("conn_tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);
				if (null != conn_tPostgresqlConnection_1) {

					conn_tPostgresqlConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_1", "");

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_1 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				/**
				 * [tPostgresqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = CustomSettings
						.getConnectionstring();

				String dbUser_tJDBCConnection_1 = CustomSettings.getMKSUser();

				final String decryptedPassword_tJDBCConnection_1 = CustomSettings
						.getMKSPass();
				String dbPwd_tJDBCConnection_1 = decryptedPassword_tJDBCConnection_1;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				String driverClass_tJDBCConnection_1 = CustomSettings
						.getDriverClass();
				java.lang.Class.forName(driverClass_tJDBCConnection_1);

				conn_tJDBCConnection_1 = java.sql.DriverManager.getConnection(
						url_tJDBCConnection_1, dbUser_tJDBCConnection_1,
						dbPwd_tJDBCConnection_1);

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				if (null != conn_tJDBCConnection_1) {

					conn_tJDBCConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// dbUser_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// dbPwd_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */

				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */

				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCConnection_1 finally ] start
				 */

				currentComponent = "tJDBCConnection_1";

				/**
				 * [tJDBCConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class OutputStruct implements
			routines.system.IPersistableRow<OutputStruct> {
		final static byte[] commonByteArrayLock_LDF_anl_beh_leverregels_per_lag = new byte[0];
		static byte[] commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[0];

		public Double lag;

		public Double getLag() {
			return this.lag;
		}

		public String code_lag;

		public String getCode_lag() {
			return this.code_lag;
		}

		public String omschrijving_lag;

		public String getOmschrijving_lag() {
			return this.omschrijving_lag;
		}

		public String referentie_letter;

		public String getReferentie_letter() {
			return this.referentie_letter;
		}

		public Double applicatie;

		public Double getApplicatie() {
			return this.applicatie;
		}

		public String code_applicatie;

		public String getCode_applicatie() {
			return this.code_applicatie;
		}

		public String omschrijving_applicatie;

		public String getOmschrijving_applicatie() {
			return this.omschrijving_applicatie;
		}

		public String organisatie;

		public String getOrganisatie() {
			return this.organisatie;
		}

		public String administratie;

		public String getAdministratie() {
			return this.administratie;
		}

		public Double leverregelnummer;

		public Double getLeverregelnummer() {
			return this.leverregelnummer;
		}

		public Double entiteitnummer;

		public Double getEntiteitnummer() {
			return this.entiteitnummer;
		}

		public String elementnummer;

		public String getElementnummer() {
			return this.elementnummer;
		}

		public String indicatie_afwijkend;

		public String getIndicatie_afwijkend() {
			return this.indicatie_afwijkend;
		}

		public Double hierarchie;

		public Double getHierarchie() {
			return this.hierarchie;
		}

		public Double dagen_afwijkende_waarde;

		public Double getDagen_afwijkende_waarde() {
			return this.dagen_afwijkende_waarde;
		}

		public String indicatie_nieuwe_relatie;

		public String getIndicatie_nieuwe_relatie() {
			return this.indicatie_nieuwe_relatie;
		}

		public String indicatie_bijlezen_waarde;

		public String getIndicatie_bijlezen_waarde() {
			return this.indicatie_bijlezen_waarde;
		}

		public String indicatie_vlg_match;

		public String getIndicatie_vlg_match() {
			return this.indicatie_vlg_match;
		}

		public Double applicatie_gerelateerde;

		public Double getApplicatie_gerelateerde() {
			return this.applicatie_gerelateerde;
		}

		public String code_applicatie_gerelateerde;

		public String getCode_applicatie_gerelateerde() {
			return this.code_applicatie_gerelateerde;
		}

		public String omschrijving_applicatie_gerel;

		public String getOmschrijving_applicatie_gerel() {
			return this.omschrijving_applicatie_gerel;
		}

		public String entiteitnaam;

		public String getEntiteitnaam() {
			return this.entiteitnaam;
		}

		public String elementnaam;

		public String getElementnaam() {
			return this.elementnaam;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDF_anl_beh_leverregels_per_lag.length) {
					if (length < 1024
							&& commonByteArray_LDF_anl_beh_leverregels_per_lag.length == 0) {
						commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[1024];
					} else {
						commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDF_anl_beh_leverregels_per_lag,
						0, length);
				strReturn = new String(
						commonByteArray_LDF_anl_beh_leverregels_per_lag, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDF_anl_beh_leverregels_per_lag) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.lag = null;
					} else {
						this.lag = dis.readDouble();
					}

					this.code_lag = readString(dis);

					this.omschrijving_lag = readString(dis);

					this.referentie_letter = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.applicatie = null;
					} else {
						this.applicatie = dis.readDouble();
					}

					this.code_applicatie = readString(dis);

					this.omschrijving_applicatie = readString(dis);

					this.organisatie = readString(dis);

					this.administratie = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.leverregelnummer = null;
					} else {
						this.leverregelnummer = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.entiteitnummer = null;
					} else {
						this.entiteitnummer = dis.readDouble();
					}

					this.elementnummer = readString(dis);

					this.indicatie_afwijkend = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.hierarchie = null;
					} else {
						this.hierarchie = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.dagen_afwijkende_waarde = null;
					} else {
						this.dagen_afwijkende_waarde = dis.readDouble();
					}

					this.indicatie_nieuwe_relatie = readString(dis);

					this.indicatie_bijlezen_waarde = readString(dis);

					this.indicatie_vlg_match = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.applicatie_gerelateerde = null;
					} else {
						this.applicatie_gerelateerde = dis.readDouble();
					}

					this.code_applicatie_gerelateerde = readString(dis);

					this.omschrijving_applicatie_gerel = readString(dis);

					this.entiteitnaam = readString(dis);

					this.elementnaam = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.lag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.lag);
				}

				// String

				writeString(this.code_lag, dos);

				// String

				writeString(this.omschrijving_lag, dos);

				// String

				writeString(this.referentie_letter, dos);

				// Double

				if (this.applicatie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.applicatie);
				}

				// String

				writeString(this.code_applicatie, dos);

				// String

				writeString(this.omschrijving_applicatie, dos);

				// String

				writeString(this.organisatie, dos);

				// String

				writeString(this.administratie, dos);

				// Double

				if (this.leverregelnummer == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.leverregelnummer);
				}

				// Double

				if (this.entiteitnummer == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.entiteitnummer);
				}

				// String

				writeString(this.elementnummer, dos);

				// String

				writeString(this.indicatie_afwijkend, dos);

				// Double

				if (this.hierarchie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.hierarchie);
				}

				// Double

				if (this.dagen_afwijkende_waarde == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.dagen_afwijkende_waarde);
				}

				// String

				writeString(this.indicatie_nieuwe_relatie, dos);

				// String

				writeString(this.indicatie_bijlezen_waarde, dos);

				// String

				writeString(this.indicatie_vlg_match, dos);

				// Double

				if (this.applicatie_gerelateerde == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.applicatie_gerelateerde);
				}

				// String

				writeString(this.code_applicatie_gerelateerde, dos);

				// String

				writeString(this.omschrijving_applicatie_gerel, dos);

				// String

				writeString(this.entiteitnaam, dos);

				// String

				writeString(this.elementnaam, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("lag=" + String.valueOf(lag));
			sb.append(",code_lag=" + code_lag);
			sb.append(",omschrijving_lag=" + omschrijving_lag);
			sb.append(",referentie_letter=" + referentie_letter);
			sb.append(",applicatie=" + String.valueOf(applicatie));
			sb.append(",code_applicatie=" + code_applicatie);
			sb.append(",omschrijving_applicatie=" + omschrijving_applicatie);
			sb.append(",organisatie=" + organisatie);
			sb.append(",administratie=" + administratie);
			sb.append(",leverregelnummer=" + String.valueOf(leverregelnummer));
			sb.append(",entiteitnummer=" + String.valueOf(entiteitnummer));
			sb.append(",elementnummer=" + elementnummer);
			sb.append(",indicatie_afwijkend=" + indicatie_afwijkend);
			sb.append(",hierarchie=" + String.valueOf(hierarchie));
			sb.append(",dagen_afwijkende_waarde="
					+ String.valueOf(dagen_afwijkende_waarde));
			sb.append(",indicatie_nieuwe_relatie=" + indicatie_nieuwe_relatie);
			sb.append(",indicatie_bijlezen_waarde=" + indicatie_bijlezen_waarde);
			sb.append(",indicatie_vlg_match=" + indicatie_vlg_match);
			sb.append(",applicatie_gerelateerde="
					+ String.valueOf(applicatie_gerelateerde));
			sb.append(",code_applicatie_gerelateerde="
					+ code_applicatie_gerelateerde);
			sb.append(",omschrijving_applicatie_gerel="
					+ omschrijving_applicatie_gerel);
			sb.append(",entiteitnaam=" + entiteitnaam);
			sb.append(",elementnaam=" + elementnaam);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LDF_anl_beh_leverregels_per_lag = new byte[0];
		static byte[] commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[0];

		public Double lag;

		public Double getLag() {
			return this.lag;
		}

		public String code_lag;

		public String getCode_lag() {
			return this.code_lag;
		}

		public String omschrijving_lag;

		public String getOmschrijving_lag() {
			return this.omschrijving_lag;
		}

		public String referentie_letter;

		public String getReferentie_letter() {
			return this.referentie_letter;
		}

		public Double applicatie;

		public Double getApplicatie() {
			return this.applicatie;
		}

		public String code_applicatie;

		public String getCode_applicatie() {
			return this.code_applicatie;
		}

		public String omschrijving_applicatie;

		public String getOmschrijving_applicatie() {
			return this.omschrijving_applicatie;
		}

		public String organisatie;

		public String getOrganisatie() {
			return this.organisatie;
		}

		public String administratie;

		public String getAdministratie() {
			return this.administratie;
		}

		public Double leverregelnummer;

		public Double getLeverregelnummer() {
			return this.leverregelnummer;
		}

		public Double entiteitnummer;

		public Double getEntiteitnummer() {
			return this.entiteitnummer;
		}

		public String elementnummer;

		public String getElementnummer() {
			return this.elementnummer;
		}

		public String indicatie_afwijkend;

		public String getIndicatie_afwijkend() {
			return this.indicatie_afwijkend;
		}

		public Double hierarchie;

		public Double getHierarchie() {
			return this.hierarchie;
		}

		public Double dagen_afwijkende_waarde;

		public Double getDagen_afwijkende_waarde() {
			return this.dagen_afwijkende_waarde;
		}

		public String indicatie_nieuwe_relatie;

		public String getIndicatie_nieuwe_relatie() {
			return this.indicatie_nieuwe_relatie;
		}

		public String indicatie_bijlezen_waarde;

		public String getIndicatie_bijlezen_waarde() {
			return this.indicatie_bijlezen_waarde;
		}

		public String indicatie_vlg_match;

		public String getIndicatie_vlg_match() {
			return this.indicatie_vlg_match;
		}

		public Double applicatie_gerelateerde;

		public Double getApplicatie_gerelateerde() {
			return this.applicatie_gerelateerde;
		}

		public String code_applicatie_gerelateerde;

		public String getCode_applicatie_gerelateerde() {
			return this.code_applicatie_gerelateerde;
		}

		public String omschrijving_applicatie_gerel;

		public String getOmschrijving_applicatie_gerel() {
			return this.omschrijving_applicatie_gerel;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDF_anl_beh_leverregels_per_lag.length) {
					if (length < 1024
							&& commonByteArray_LDF_anl_beh_leverregels_per_lag.length == 0) {
						commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[1024];
					} else {
						commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDF_anl_beh_leverregels_per_lag,
						0, length);
				strReturn = new String(
						commonByteArray_LDF_anl_beh_leverregels_per_lag, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDF_anl_beh_leverregels_per_lag) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.lag = null;
					} else {
						this.lag = dis.readDouble();
					}

					this.code_lag = readString(dis);

					this.omschrijving_lag = readString(dis);

					this.referentie_letter = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.applicatie = null;
					} else {
						this.applicatie = dis.readDouble();
					}

					this.code_applicatie = readString(dis);

					this.omschrijving_applicatie = readString(dis);

					this.organisatie = readString(dis);

					this.administratie = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.leverregelnummer = null;
					} else {
						this.leverregelnummer = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.entiteitnummer = null;
					} else {
						this.entiteitnummer = dis.readDouble();
					}

					this.elementnummer = readString(dis);

					this.indicatie_afwijkend = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.hierarchie = null;
					} else {
						this.hierarchie = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.dagen_afwijkende_waarde = null;
					} else {
						this.dagen_afwijkende_waarde = dis.readDouble();
					}

					this.indicatie_nieuwe_relatie = readString(dis);

					this.indicatie_bijlezen_waarde = readString(dis);

					this.indicatie_vlg_match = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.applicatie_gerelateerde = null;
					} else {
						this.applicatie_gerelateerde = dis.readDouble();
					}

					this.code_applicatie_gerelateerde = readString(dis);

					this.omschrijving_applicatie_gerel = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.lag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.lag);
				}

				// String

				writeString(this.code_lag, dos);

				// String

				writeString(this.omschrijving_lag, dos);

				// String

				writeString(this.referentie_letter, dos);

				// Double

				if (this.applicatie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.applicatie);
				}

				// String

				writeString(this.code_applicatie, dos);

				// String

				writeString(this.omschrijving_applicatie, dos);

				// String

				writeString(this.organisatie, dos);

				// String

				writeString(this.administratie, dos);

				// Double

				if (this.leverregelnummer == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.leverregelnummer);
				}

				// Double

				if (this.entiteitnummer == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.entiteitnummer);
				}

				// String

				writeString(this.elementnummer, dos);

				// String

				writeString(this.indicatie_afwijkend, dos);

				// Double

				if (this.hierarchie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.hierarchie);
				}

				// Double

				if (this.dagen_afwijkende_waarde == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.dagen_afwijkende_waarde);
				}

				// String

				writeString(this.indicatie_nieuwe_relatie, dos);

				// String

				writeString(this.indicatie_bijlezen_waarde, dos);

				// String

				writeString(this.indicatie_vlg_match, dos);

				// Double

				if (this.applicatie_gerelateerde == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.applicatie_gerelateerde);
				}

				// String

				writeString(this.code_applicatie_gerelateerde, dos);

				// String

				writeString(this.omschrijving_applicatie_gerel, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("lag=" + String.valueOf(lag));
			sb.append(",code_lag=" + code_lag);
			sb.append(",omschrijving_lag=" + omschrijving_lag);
			sb.append(",referentie_letter=" + referentie_letter);
			sb.append(",applicatie=" + String.valueOf(applicatie));
			sb.append(",code_applicatie=" + code_applicatie);
			sb.append(",omschrijving_applicatie=" + omschrijving_applicatie);
			sb.append(",organisatie=" + organisatie);
			sb.append(",administratie=" + administratie);
			sb.append(",leverregelnummer=" + String.valueOf(leverregelnummer));
			sb.append(",entiteitnummer=" + String.valueOf(entiteitnummer));
			sb.append(",elementnummer=" + elementnummer);
			sb.append(",indicatie_afwijkend=" + indicatie_afwijkend);
			sb.append(",hierarchie=" + String.valueOf(hierarchie));
			sb.append(",dagen_afwijkende_waarde="
					+ String.valueOf(dagen_afwijkende_waarde));
			sb.append(",indicatie_nieuwe_relatie=" + indicatie_nieuwe_relatie);
			sb.append(",indicatie_bijlezen_waarde=" + indicatie_bijlezen_waarde);
			sb.append(",indicatie_vlg_match=" + indicatie_vlg_match);
			sb.append(",applicatie_gerelateerde="
					+ String.valueOf(applicatie_gerelateerde));
			sb.append(",code_applicatie_gerelateerde="
					+ code_applicatie_gerelateerde);
			sb.append(",omschrijving_applicatie_gerel="
					+ omschrijving_applicatie_gerel);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_1Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_1Struct> {
		final static byte[] commonByteArrayLock_LDF_anl_beh_leverregels_per_lag = new byte[0];
		static byte[] commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[0];

		public Double lag;

		public Double getLag() {
			return this.lag;
		}

		public String code_lag;

		public String getCode_lag() {
			return this.code_lag;
		}

		public String omschrijving_lag;

		public String getOmschrijving_lag() {
			return this.omschrijving_lag;
		}

		public String referentie_letter;

		public String getReferentie_letter() {
			return this.referentie_letter;
		}

		public Double applicatie;

		public Double getApplicatie() {
			return this.applicatie;
		}

		public String code_applicatie;

		public String getCode_applicatie() {
			return this.code_applicatie;
		}

		public String omschrijving_applicatie;

		public String getOmschrijving_applicatie() {
			return this.omschrijving_applicatie;
		}

		public String organisatie;

		public String getOrganisatie() {
			return this.organisatie;
		}

		public String administratie;

		public String getAdministratie() {
			return this.administratie;
		}

		public Double leverregelnummer;

		public Double getLeverregelnummer() {
			return this.leverregelnummer;
		}

		public Double entiteitnummer;

		public Double getEntiteitnummer() {
			return this.entiteitnummer;
		}

		public String elementnummer;

		public String getElementnummer() {
			return this.elementnummer;
		}

		public String indicatie_afwijkend;

		public String getIndicatie_afwijkend() {
			return this.indicatie_afwijkend;
		}

		public Double hierarchie;

		public Double getHierarchie() {
			return this.hierarchie;
		}

		public Double dagen_afwijkende_waarde;

		public Double getDagen_afwijkende_waarde() {
			return this.dagen_afwijkende_waarde;
		}

		public String indicatie_nieuwe_relatie;

		public String getIndicatie_nieuwe_relatie() {
			return this.indicatie_nieuwe_relatie;
		}

		public String indicatie_bijlezen_waarde;

		public String getIndicatie_bijlezen_waarde() {
			return this.indicatie_bijlezen_waarde;
		}

		public String indicatie_vlg_match;

		public String getIndicatie_vlg_match() {
			return this.indicatie_vlg_match;
		}

		public Double applicatie_gerelateerde;

		public Double getApplicatie_gerelateerde() {
			return this.applicatie_gerelateerde;
		}

		public String code_applicatie_gerelateerde;

		public String getCode_applicatie_gerelateerde() {
			return this.code_applicatie_gerelateerde;
		}

		public String omschrijving_applicatie_gerel;

		public String getOmschrijving_applicatie_gerel() {
			return this.omschrijving_applicatie_gerel;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDF_anl_beh_leverregels_per_lag.length) {
					if (length < 1024
							&& commonByteArray_LDF_anl_beh_leverregels_per_lag.length == 0) {
						commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[1024];
					} else {
						commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDF_anl_beh_leverregels_per_lag,
						0, length);
				strReturn = new String(
						commonByteArray_LDF_anl_beh_leverregels_per_lag, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDF_anl_beh_leverregels_per_lag) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.lag = null;
					} else {
						this.lag = dis.readDouble();
					}

					this.code_lag = readString(dis);

					this.omschrijving_lag = readString(dis);

					this.referentie_letter = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.applicatie = null;
					} else {
						this.applicatie = dis.readDouble();
					}

					this.code_applicatie = readString(dis);

					this.omschrijving_applicatie = readString(dis);

					this.organisatie = readString(dis);

					this.administratie = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.leverregelnummer = null;
					} else {
						this.leverregelnummer = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.entiteitnummer = null;
					} else {
						this.entiteitnummer = dis.readDouble();
					}

					this.elementnummer = readString(dis);

					this.indicatie_afwijkend = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.hierarchie = null;
					} else {
						this.hierarchie = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.dagen_afwijkende_waarde = null;
					} else {
						this.dagen_afwijkende_waarde = dis.readDouble();
					}

					this.indicatie_nieuwe_relatie = readString(dis);

					this.indicatie_bijlezen_waarde = readString(dis);

					this.indicatie_vlg_match = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.applicatie_gerelateerde = null;
					} else {
						this.applicatie_gerelateerde = dis.readDouble();
					}

					this.code_applicatie_gerelateerde = readString(dis);

					this.omschrijving_applicatie_gerel = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.lag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.lag);
				}

				// String

				writeString(this.code_lag, dos);

				// String

				writeString(this.omschrijving_lag, dos);

				// String

				writeString(this.referentie_letter, dos);

				// Double

				if (this.applicatie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.applicatie);
				}

				// String

				writeString(this.code_applicatie, dos);

				// String

				writeString(this.omschrijving_applicatie, dos);

				// String

				writeString(this.organisatie, dos);

				// String

				writeString(this.administratie, dos);

				// Double

				if (this.leverregelnummer == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.leverregelnummer);
				}

				// Double

				if (this.entiteitnummer == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.entiteitnummer);
				}

				// String

				writeString(this.elementnummer, dos);

				// String

				writeString(this.indicatie_afwijkend, dos);

				// Double

				if (this.hierarchie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.hierarchie);
				}

				// Double

				if (this.dagen_afwijkende_waarde == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.dagen_afwijkende_waarde);
				}

				// String

				writeString(this.indicatie_nieuwe_relatie, dos);

				// String

				writeString(this.indicatie_bijlezen_waarde, dos);

				// String

				writeString(this.indicatie_vlg_match, dos);

				// Double

				if (this.applicatie_gerelateerde == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.applicatie_gerelateerde);
				}

				// String

				writeString(this.code_applicatie_gerelateerde, dos);

				// String

				writeString(this.omschrijving_applicatie_gerel, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("lag=" + String.valueOf(lag));
			sb.append(",code_lag=" + code_lag);
			sb.append(",omschrijving_lag=" + omschrijving_lag);
			sb.append(",referentie_letter=" + referentie_letter);
			sb.append(",applicatie=" + String.valueOf(applicatie));
			sb.append(",code_applicatie=" + code_applicatie);
			sb.append(",omschrijving_applicatie=" + omschrijving_applicatie);
			sb.append(",organisatie=" + organisatie);
			sb.append(",administratie=" + administratie);
			sb.append(",leverregelnummer=" + String.valueOf(leverregelnummer));
			sb.append(",entiteitnummer=" + String.valueOf(entiteitnummer));
			sb.append(",elementnummer=" + elementnummer);
			sb.append(",indicatie_afwijkend=" + indicatie_afwijkend);
			sb.append(",hierarchie=" + String.valueOf(hierarchie));
			sb.append(",dagen_afwijkende_waarde="
					+ String.valueOf(dagen_afwijkende_waarde));
			sb.append(",indicatie_nieuwe_relatie=" + indicatie_nieuwe_relatie);
			sb.append(",indicatie_bijlezen_waarde=" + indicatie_bijlezen_waarde);
			sb.append(",indicatie_vlg_match=" + indicatie_vlg_match);
			sb.append(",applicatie_gerelateerde="
					+ String.valueOf(applicatie_gerelateerde));
			sb.append(",code_applicatie_gerelateerde="
					+ code_applicatie_gerelateerde);
			sb.append(",omschrijving_applicatie_gerel="
					+ omschrijving_applicatie_gerel);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_1Process(globalMap);

				row1Struct row1 = new row1Struct();
				OutputStruct Output = new OutputStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "anl_beh_leverregels_per_lag";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "anl_beh_leverregels_per_lag";
				}

				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;

				conn_tPostgresqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_1 = 10000;
				int batchSizeCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				java.sql.Statement stmtTruncCount_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.createStatement();
				java.sql.ResultSet rsTruncCount_tPostgresqlOutput_1 = stmtTruncCount_tPostgresqlOutput_1
						.executeQuery("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_1 + "\"");
				int rsTruncCountNumber_tPostgresqlOutput_1 = 0;
				if (rsTruncCount_tPostgresqlOutput_1.next()) {
					rsTruncCountNumber_tPostgresqlOutput_1 = rsTruncCount_tPostgresqlOutput_1
							.getInt(1);
				}
				rsTruncCount_tPostgresqlOutput_1.close();
				stmtTruncCount_tPostgresqlOutput_1.close();
				java.sql.Statement stmtTrunc_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.createStatement();

				stmtTrunc_tPostgresqlOutput_1.executeUpdate("TRUNCATE TABLE \""
						+ tableName_tPostgresqlOutput_1 + "\"");

				deletedCount_tPostgresqlOutput_1 += rsTruncCountNumber_tPostgresqlOutput_1;
				stmtTrunc_tPostgresqlOutput_1.close();

				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"lag\",\"code_lag\",\"omschrijving_lag\",\"referentie_letter\",\"applicatie\",\"code_applicatie\",\"omschrijving_applicatie\",\"organisatie\",\"administratie\",\"leverregelnummer\",\"entiteitnummer\",\"elementnummer\",\"indicatie_afwijkend\",\"hierarchie\",\"dagen_afwijkende_waarde\",\"indicatie_nieuwe_relatie\",\"indicatie_bijlezen_waarde\",\"indicatie_vlg_match\",\"applicatie_gerelateerde\",\"code_applicatie_gerelateerde\",\"omschrijving_applicatie_gerel\",\"entiteitnaam\",\"elementnaam\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				OutputStruct Output_tmp = new OutputStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = "select\nlag.lagkey as LAG, \n lag.lagcde as Code_LAG,\nlag.lagoms as Omschrijving_LAG,\nlag.lagrefltr as Referentie_letter, \n apl.aplkey as Applicatie,\napl.aplcde as Code_applicatie, \n apl.aploms as Omschrijving_applicatie, \n apl.aplorg as Organisatie, \n apl.apladm as Administratie, \n lvr.lvrkey as Leverregelnummer,\nlvr.lvrent as Entiteitnummer,\n lvr.lvrelmnum as Elementnummer, \n lvr.lvrindafw as Indicatie_afwijkend, \n lvr.lvrhielvr as Hierarchie,\nlvr.lvrdgnafw as Dagen_afwijkende_waarde, \n lvr.lvrindnrl as Indicatie_nieuwe_relatie,\nlvr.lvrblzwrd as Indicatie_bijlezen_waarde, \n lvr.lvrmtcapl as Indicatie_vlg_match, \n apr.aplkey as Applicatie_gerelateerde, \n apr.aplcde as code_applicatie_gerelateerde,\napr.aploms as Omschrijving_applicatie_gerel\nfrom mbslagm00 lag\njoin mbsaplm00 apl on apl.lagkey = lag.lagkey\njoin bdslvrm00 lvr on lvr.aplkey = apl.aplkey\nleft join mbsaplm00 apr on apr.aplkey = lvr.aplkeyr \norder by lag.lagoms, apl.aplcde, lvr.lvrent, lvr.lvrelmnum";

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);

				java.sql.ResultSet rs_tJDBCInput_1 = null;
				try {
					rs_tJDBCInput_1 = stmt_tJDBCInput_1
							.executeQuery(dbquery_tJDBCInput_1);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
							.getMetaData();
					int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
							.getColumnCount();

					String tmpContent_tJDBCInput_1 = null;

					while (rs_tJDBCInput_1.next()) {
						nb_line_tJDBCInput_1++;

						if (colQtyInRs_tJDBCInput_1 < 1) {
							row1.lag = null;
						} else {

							if (rs_tJDBCInput_1.getObject(1) != null) {
								row1.lag = rs_tJDBCInput_1.getDouble(1);
							} else {
								row1.lag = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 2) {
							row1.code_lag = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(2);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.code_lag = tmpContent_tJDBCInput_1;
							} else {
								row1.code_lag = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 3) {
							row1.omschrijving_lag = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(3);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.omschrijving_lag = tmpContent_tJDBCInput_1;
							} else {
								row1.omschrijving_lag = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 4) {
							row1.referentie_letter = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(4);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.referentie_letter = tmpContent_tJDBCInput_1;
							} else {
								row1.referentie_letter = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 5) {
							row1.applicatie = null;
						} else {

							if (rs_tJDBCInput_1.getObject(5) != null) {
								row1.applicatie = rs_tJDBCInput_1.getDouble(5);
							} else {
								row1.applicatie = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 6) {
							row1.code_applicatie = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(6);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.code_applicatie = tmpContent_tJDBCInput_1;
							} else {
								row1.code_applicatie = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 7) {
							row1.omschrijving_applicatie = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(7);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.omschrijving_applicatie = tmpContent_tJDBCInput_1;
							} else {
								row1.omschrijving_applicatie = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 8) {
							row1.organisatie = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(8);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.organisatie = tmpContent_tJDBCInput_1;
							} else {
								row1.organisatie = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 9) {
							row1.administratie = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(9);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.administratie = tmpContent_tJDBCInput_1;
							} else {
								row1.administratie = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 10) {
							row1.leverregelnummer = null;
						} else {

							if (rs_tJDBCInput_1.getObject(10) != null) {
								row1.leverregelnummer = rs_tJDBCInput_1
										.getDouble(10);
							} else {
								row1.leverregelnummer = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 11) {
							row1.entiteitnummer = null;
						} else {

							if (rs_tJDBCInput_1.getObject(11) != null) {
								row1.entiteitnummer = rs_tJDBCInput_1
										.getDouble(11);
							} else {
								row1.entiteitnummer = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 12) {
							row1.elementnummer = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(12);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.elementnummer = tmpContent_tJDBCInput_1;
							} else {
								row1.elementnummer = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 13) {
							row1.indicatie_afwijkend = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(13);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.indicatie_afwijkend = tmpContent_tJDBCInput_1;
							} else {
								row1.indicatie_afwijkend = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 14) {
							row1.hierarchie = null;
						} else {

							if (rs_tJDBCInput_1.getObject(14) != null) {
								row1.hierarchie = rs_tJDBCInput_1.getDouble(14);
							} else {
								row1.hierarchie = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 15) {
							row1.dagen_afwijkende_waarde = null;
						} else {

							if (rs_tJDBCInput_1.getObject(15) != null) {
								row1.dagen_afwijkende_waarde = rs_tJDBCInput_1
										.getDouble(15);
							} else {
								row1.dagen_afwijkende_waarde = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 16) {
							row1.indicatie_nieuwe_relatie = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(16);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.indicatie_nieuwe_relatie = tmpContent_tJDBCInput_1;
							} else {
								row1.indicatie_nieuwe_relatie = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 17) {
							row1.indicatie_bijlezen_waarde = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(17);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.indicatie_bijlezen_waarde = tmpContent_tJDBCInput_1;
							} else {
								row1.indicatie_bijlezen_waarde = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 18) {
							row1.indicatie_vlg_match = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(18);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.indicatie_vlg_match = tmpContent_tJDBCInput_1;
							} else {
								row1.indicatie_vlg_match = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 19) {
							row1.applicatie_gerelateerde = null;
						} else {

							if (rs_tJDBCInput_1.getObject(19) != null) {
								row1.applicatie_gerelateerde = rs_tJDBCInput_1
										.getDouble(19);
							} else {
								row1.applicatie_gerelateerde = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 20) {
							row1.code_applicatie_gerelateerde = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(20);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.code_applicatie_gerelateerde = tmpContent_tJDBCInput_1;
							} else {
								row1.code_applicatie_gerelateerde = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 21) {
							row1.omschrijving_applicatie_gerel = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(21);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.omschrijving_applicatie_gerel = tmpContent_tJDBCInput_1;
							} else {
								row1.omschrijving_applicatie_gerel = null;
							}
						}

						/**
						 * [tJDBCInput_1 begin ] stop
						 */

						/**
						 * [tJDBCInput_1 main ] start
						 */

						currentComponent = "tJDBCInput_1";

						tos_count_tJDBCInput_1++;

						/**
						 * [tJDBCInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.elementid = row1.elementnummer;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.elementid = '"
							// + row2HashKey.elementid + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							Output = null;

							// # Output table : 'Output'
							Output_tmp.lag = row1.lag;
							Output_tmp.code_lag = row1.code_lag;
							Output_tmp.omschrijving_lag = row1.omschrijving_lag;
							Output_tmp.referentie_letter = row1.referentie_letter;
							Output_tmp.applicatie = row1.applicatie;
							Output_tmp.code_applicatie = row1.code_applicatie;
							Output_tmp.omschrijving_applicatie = row1.omschrijving_applicatie;
							Output_tmp.organisatie = row1.organisatie;
							Output_tmp.administratie = row1.administratie;
							Output_tmp.leverregelnummer = row1.leverregelnummer;
							Output_tmp.entiteitnummer = row1.entiteitnummer;
							Output_tmp.elementnummer = row1.elementnummer;
							Output_tmp.indicatie_afwijkend = row1.indicatie_afwijkend;
							Output_tmp.hierarchie = row1.hierarchie;
							Output_tmp.dagen_afwijkende_waarde = row1.dagen_afwijkende_waarde;
							Output_tmp.indicatie_nieuwe_relatie = row1.indicatie_nieuwe_relatie;
							Output_tmp.indicatie_bijlezen_waarde = row1.indicatie_bijlezen_waarde;
							Output_tmp.indicatie_vlg_match = row1.indicatie_vlg_match;
							Output_tmp.applicatie_gerelateerde = row1.applicatie_gerelateerde;
							Output_tmp.code_applicatie_gerelateerde = row1.code_applicatie_gerelateerde;
							Output_tmp.omschrijving_applicatie_gerel = row1.omschrijving_applicatie_gerel;
							Output_tmp.entiteitnaam = row2.entiteitnaam == null ? "Onbekend"
									: row2.entiteitnaam;
							Output_tmp.elementnaam = row2.elementnaam == null ? "Onbekend"
									: row2.elementnaam;
							Output = Output_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "Output"
						if (Output != null) {

							/**
							 * [tPostgresqlOutput_1 main ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							whetherReject_tPostgresqlOutput_1 = false;
							if (Output.lag == null) {
								pstmt_tPostgresqlOutput_1.setNull(1,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tPostgresqlOutput_1.setDouble(1,
										Output.lag);
							}

							if (Output.code_lag == null) {
								pstmt_tPostgresqlOutput_1.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(2,
										Output.code_lag);
							}

							if (Output.omschrijving_lag == null) {
								pstmt_tPostgresqlOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(3,
										Output.omschrijving_lag);
							}

							if (Output.referentie_letter == null) {
								pstmt_tPostgresqlOutput_1.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(4,
										Output.referentie_letter);
							}

							if (Output.applicatie == null) {
								pstmt_tPostgresqlOutput_1.setNull(5,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tPostgresqlOutput_1.setDouble(5,
										Output.applicatie);
							}

							if (Output.code_applicatie == null) {
								pstmt_tPostgresqlOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(6,
										Output.code_applicatie);
							}

							if (Output.omschrijving_applicatie == null) {
								pstmt_tPostgresqlOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(7,
										Output.omschrijving_applicatie);
							}

							if (Output.organisatie == null) {
								pstmt_tPostgresqlOutput_1.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(8,
										Output.organisatie);
							}

							if (Output.administratie == null) {
								pstmt_tPostgresqlOutput_1.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(9,
										Output.administratie);
							}

							if (Output.leverregelnummer == null) {
								pstmt_tPostgresqlOutput_1.setNull(10,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tPostgresqlOutput_1.setDouble(10,
										Output.leverregelnummer);
							}

							if (Output.entiteitnummer == null) {
								pstmt_tPostgresqlOutput_1.setNull(11,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tPostgresqlOutput_1.setDouble(11,
										Output.entiteitnummer);
							}

							if (Output.elementnummer == null) {
								pstmt_tPostgresqlOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(12,
										Output.elementnummer);
							}

							if (Output.indicatie_afwijkend == null) {
								pstmt_tPostgresqlOutput_1.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(13,
										Output.indicatie_afwijkend);
							}

							if (Output.hierarchie == null) {
								pstmt_tPostgresqlOutput_1.setNull(14,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tPostgresqlOutput_1.setDouble(14,
										Output.hierarchie);
							}

							if (Output.dagen_afwijkende_waarde == null) {
								pstmt_tPostgresqlOutput_1.setNull(15,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tPostgresqlOutput_1.setDouble(15,
										Output.dagen_afwijkende_waarde);
							}

							if (Output.indicatie_nieuwe_relatie == null) {
								pstmt_tPostgresqlOutput_1.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(16,
										Output.indicatie_nieuwe_relatie);
							}

							if (Output.indicatie_bijlezen_waarde == null) {
								pstmt_tPostgresqlOutput_1.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(17,
										Output.indicatie_bijlezen_waarde);
							}

							if (Output.indicatie_vlg_match == null) {
								pstmt_tPostgresqlOutput_1.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(18,
										Output.indicatie_vlg_match);
							}

							if (Output.applicatie_gerelateerde == null) {
								pstmt_tPostgresqlOutput_1.setNull(19,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tPostgresqlOutput_1.setDouble(19,
										Output.applicatie_gerelateerde);
							}

							if (Output.code_applicatie_gerelateerde == null) {
								pstmt_tPostgresqlOutput_1.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(20,
										Output.code_applicatie_gerelateerde);
							}

							if (Output.omschrijving_applicatie_gerel == null) {
								pstmt_tPostgresqlOutput_1.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(21,
										Output.omschrijving_applicatie_gerel);
							}

							if (Output.entiteitnaam == null) {
								pstmt_tPostgresqlOutput_1.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(22,
										Output.entiteitnaam);
							}

							if (Output.elementnaam == null) {
								pstmt_tPostgresqlOutput_1.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(23,
										Output.elementnaam);
							}

							pstmt_tPostgresqlOutput_1.addBatch();
							nb_line_tPostgresqlOutput_1++;

							batchSizeCounter_tPostgresqlOutput_1++;

							if (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1) {
								try {
									int countSum_tPostgresqlOutput_1 = 0;

									for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
											.executeBatch()) {
										countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
												: countEach_tPostgresqlOutput_1);
									}

									insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

									batchSizeCounter_tPostgresqlOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e) {

									throw (e);

								}

							}

							tos_count_tPostgresqlOutput_1++;

							/**
							 * [tPostgresqlOutput_1 main ] stop
							 */

						} // End of branch "Output"

						/**
						 * [tJDBCInput_1 end ] start
						 */

						currentComponent = "tJDBCInput_1";

					}
				} finally {
					if (rs_tJDBCInput_1 != null) {
						rs_tJDBCInput_1.close();
					}
					stmt_tJDBCInput_1.close();

				}
				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				try {
					int countSum_tPostgresqlOutput_1 = 0;
					if (pstmt_tPostgresqlOutput_1 != null) {

						for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
								.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
									: countEach_tPostgresqlOutput_1);
						}

					}

					insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}

				if (pstmt_tPostgresqlOutput_1 != null) {

					pstmt_tPostgresqlOutput_1.close();

				}

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tJDBCInput_1 finally ] start
				 */

				currentComponent = "tJDBCInput_1";

				/**
				 * [tJDBCInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				context.jobName = "anl_beh_leverregels_per_lag_job";
				context.result = true;

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("CLASS", context.CLASS);

				parentContextMap_tRunJob_1.put("CONNECTIESTR",
						context.CONNECTIESTR);

				parentContextMap_tRunJob_1
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_1.put("contextName",
						context.contextName);

				parentContextMap_tRunJob_1
						.put("contextStr", context.contextStr);

				parentContextMap_tRunJob_1.put("DAGEN180", context.DAGEN180);

				parentContextMap_tRunJob_1.put("DAGEN182", context.DAGEN182);

				parentContextMap_tRunJob_1.put("DAGEN30", context.DAGEN30);

				parentContextMap_tRunJob_1.put("DAGEN93", context.DAGEN93);

				parentContextMap_tRunJob_1.put("DATABASE", context.DATABASE);

				parentContextMap_tRunJob_1.put("dataDir", context.dataDir);

				parentContextMap_tRunJob_1.put("dataFile", context.dataFile);

				parentContextMap_tRunJob_1.put("DRIVER_CLASS",
						context.DRIVER_CLASS);

				parentContextMap_tRunJob_1.put("DTB", context.DTB);

				parentContextMap_tRunJob_1.put("gemeentecode",
						context.gemeentecode);

				parentContextMap_tRunJob_1.put("HOST", context.HOST);

				parentContextMap_tRunJob_1.put("jobName", context.jobName);

				parentContextMap_tRunJob_1.put("MAANDEN3", context.MAANDEN3);

				parentContextMap_tRunJob_1.put("metadataSql",
						context.metadataSql);

				parentContextMap_tRunJob_1.put("PORT", context.PORT);

				parentContextMap_tRunJob_1.put("PWD_DEC", context.PWD_DEC);

				parentContextMap_tRunJob_1.put("PWD_ENC", context.PWD_ENC);

				parentContextMap_tRunJob_1.put("result", context.result);

				parentContextMap_tRunJob_1.put("SCHEMA", context.SCHEMA);

				parentContextMap_tRunJob_1.put("SCONNECTIESTR",
						context.SCONNECTIESTR);

				parentContextMap_tRunJob_1.put("SDATABASE", context.SDATABASE);

				parentContextMap_tRunJob_1.put("SDRIVER_CLASS",
						context.SDRIVER_CLASS);

				parentContextMap_tRunJob_1.put("SDTB", context.SDTB);

				parentContextMap_tRunJob_1.put("SHOST", context.SHOST);

				parentContextMap_tRunJob_1.put("SPORT", context.SPORT);

				parentContextMap_tRunJob_1.put("SPWD_DEC", context.SPWD_DEC);

				parentContextMap_tRunJob_1.put("SPWD_ENC", context.SPWD_ENC);

				parentContextMap_tRunJob_1.put("sql_blok", context.sql_blok);

				parentContextMap_tRunJob_1.put("sql_text", context.sql_text);

				parentContextMap_tRunJob_1.put("SSCHEMA", context.SSCHEMA);

				parentContextMap_tRunJob_1.put("SUSER", context.SUSER);

				parentContextMap_tRunJob_1.put("TABLE", context.TABLE);

				parentContextMap_tRunJob_1.put("TCONNECTIESTR",
						context.TCONNECTIESTR);

				parentContextMap_tRunJob_1.put("TDATABASE", context.TDATABASE);

				parentContextMap_tRunJob_1.put("TDRIVER_CLASS",
						context.TDRIVER_CLASS);

				parentContextMap_tRunJob_1.put("TDTB", context.TDTB);

				parentContextMap_tRunJob_1.put("THOST", context.THOST);

				parentContextMap_tRunJob_1.put("TPORT", context.TPORT);

				parentContextMap_tRunJob_1.put("TPWD_DEC", context.TPWD_DEC);

				parentContextMap_tRunJob_1.put("TPWD_ENC", context.TPWD_ENC);

				parentContextMap_tRunJob_1.put("TSCHEMA", context.TSCHEMA);

				parentContextMap_tRunJob_1.put("TUSER", context.TUSER);

				parentContextMap_tRunJob_1.put("TYPE", context.TYPE);

				parentContextMap_tRunJob_1.put("USER", context.USER);

				Object obj_tRunJob_1 = null;

				ldf.logger_2_0.Logger childJob_tRunJob_1 = new ldf.logger_2_0.Logger();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tPostgresqlCommit_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_1", false);
				start_Hash.put("tPostgresqlCommit_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlCommit_1";

				int tos_count_tPostgresqlCommit_1 = 0;

				/**
				 * [tPostgresqlCommit_1 begin ] stop
				 */

				/**
				 * [tPostgresqlCommit_1 main ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlCommit_1 != null
						&& !conn_tPostgresqlCommit_1.isClosed()) {
					try {

						conn_tPostgresqlCommit_1.commit();

					} finally {

						conn_tPostgresqlCommit_1.close();

					}
				}

				tos_count_tPostgresqlCommit_1++;

				/**
				 * [tPostgresqlCommit_1 main ] stop
				 */

				/**
				 * [tPostgresqlCommit_1 end ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				ok_Hash.put("tPostgresqlCommit_1", true);
				end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlCommit_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlCommit_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlCommit_1 finally ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				/**
				 * [tPostgresqlCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCClose_1 begin ] start
				 */

				ok_Hash.put("tJDBCClose_1", false);
				start_Hash.put("tJDBCClose_1", System.currentTimeMillis());

				currentComponent = "tJDBCClose_1";

				int tos_count_tJDBCClose_1 = 0;

				/**
				 * [tJDBCClose_1 begin ] stop
				 */

				/**
				 * [tJDBCClose_1 main ] start
				 */

				currentComponent = "tJDBCClose_1";

				java.sql.Connection conn_tJDBCClose_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				if (conn_tJDBCClose_1 != null && !conn_tJDBCClose_1.isClosed()) {

					conn_tJDBCClose_1.close();

				}

				tos_count_tJDBCClose_1++;

				/**
				 * [tJDBCClose_1 main ] stop
				 */

				/**
				 * [tJDBCClose_1 end ] start
				 */

				currentComponent = "tJDBCClose_1";

				ok_Hash.put("tJDBCClose_1", true);
				end_Hash.put("tJDBCClose_1", System.currentTimeMillis());

				/**
				 * [tJDBCClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCClose_1 finally ] start
				 */

				currentComponent = "tJDBCClose_1";

				/**
				 * [tJDBCClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				context.jobName = "anl_beh_leverregels_per_lag_job";
				context.result = false;
				System.out
						.println("anl_beh_leverregels_per_lag_job_________________________________________________");
				System.out.println(((String) globalMap
						.get("tJDBCInput_1_QUERY")));

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context
						.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2
							.nextElement();
					Object value_tRunJob_2 = (Object) context
							.get(key_tRunJob_2);
					paraList_tRunJob_2.add("--context_param " + key_tRunJob_2
							+ "=" + value_tRunJob_2);
				}

				parentContextMap_tRunJob_2.put("CLASS", context.CLASS);

				parentContextMap_tRunJob_2.put("CONNECTIESTR",
						context.CONNECTIESTR);

				parentContextMap_tRunJob_2
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_2.put("contextName",
						context.contextName);

				parentContextMap_tRunJob_2
						.put("contextStr", context.contextStr);

				parentContextMap_tRunJob_2.put("DAGEN180", context.DAGEN180);

				parentContextMap_tRunJob_2.put("DAGEN182", context.DAGEN182);

				parentContextMap_tRunJob_2.put("DAGEN30", context.DAGEN30);

				parentContextMap_tRunJob_2.put("DAGEN93", context.DAGEN93);

				parentContextMap_tRunJob_2.put("DATABASE", context.DATABASE);

				parentContextMap_tRunJob_2.put("dataDir", context.dataDir);

				parentContextMap_tRunJob_2.put("dataFile", context.dataFile);

				parentContextMap_tRunJob_2.put("DRIVER_CLASS",
						context.DRIVER_CLASS);

				parentContextMap_tRunJob_2.put("DTB", context.DTB);

				parentContextMap_tRunJob_2.put("gemeentecode",
						context.gemeentecode);

				parentContextMap_tRunJob_2.put("HOST", context.HOST);

				parentContextMap_tRunJob_2.put("jobName", context.jobName);

				parentContextMap_tRunJob_2.put("MAANDEN3", context.MAANDEN3);

				parentContextMap_tRunJob_2.put("metadataSql",
						context.metadataSql);

				parentContextMap_tRunJob_2.put("PORT", context.PORT);

				parentContextMap_tRunJob_2.put("PWD_DEC", context.PWD_DEC);

				parentContextMap_tRunJob_2.put("PWD_ENC", context.PWD_ENC);

				parentContextMap_tRunJob_2.put("result", context.result);

				parentContextMap_tRunJob_2.put("SCHEMA", context.SCHEMA);

				parentContextMap_tRunJob_2.put("SCONNECTIESTR",
						context.SCONNECTIESTR);

				parentContextMap_tRunJob_2.put("SDATABASE", context.SDATABASE);

				parentContextMap_tRunJob_2.put("SDRIVER_CLASS",
						context.SDRIVER_CLASS);

				parentContextMap_tRunJob_2.put("SDTB", context.SDTB);

				parentContextMap_tRunJob_2.put("SHOST", context.SHOST);

				parentContextMap_tRunJob_2.put("SPORT", context.SPORT);

				parentContextMap_tRunJob_2.put("SPWD_DEC", context.SPWD_DEC);

				parentContextMap_tRunJob_2.put("SPWD_ENC", context.SPWD_ENC);

				parentContextMap_tRunJob_2.put("sql_blok", context.sql_blok);

				parentContextMap_tRunJob_2.put("sql_text", context.sql_text);

				parentContextMap_tRunJob_2.put("SSCHEMA", context.SSCHEMA);

				parentContextMap_tRunJob_2.put("SUSER", context.SUSER);

				parentContextMap_tRunJob_2.put("TABLE", context.TABLE);

				parentContextMap_tRunJob_2.put("TCONNECTIESTR",
						context.TCONNECTIESTR);

				parentContextMap_tRunJob_2.put("TDATABASE", context.TDATABASE);

				parentContextMap_tRunJob_2.put("TDRIVER_CLASS",
						context.TDRIVER_CLASS);

				parentContextMap_tRunJob_2.put("TDTB", context.TDTB);

				parentContextMap_tRunJob_2.put("THOST", context.THOST);

				parentContextMap_tRunJob_2.put("TPORT", context.TPORT);

				parentContextMap_tRunJob_2.put("TPWD_DEC", context.TPWD_DEC);

				parentContextMap_tRunJob_2.put("TPWD_ENC", context.TPWD_ENC);

				parentContextMap_tRunJob_2.put("TSCHEMA", context.TSCHEMA);

				parentContextMap_tRunJob_2.put("TUSER", context.TUSER);

				parentContextMap_tRunJob_2.put("TYPE", context.TYPE);

				parentContextMap_tRunJob_2.put("USER", context.USER);

				Object obj_tRunJob_2 = null;

				ldf.logger_2_0.Logger childJob_tRunJob_2 = new ldf.logger_2_0.Logger();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}

				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));

				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tPostgresqlClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_1", false);
				start_Hash
						.put("tPostgresqlClose_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlClose_1";

				int tos_count_tPostgresqlClose_1 = 0;

				/**
				 * [tPostgresqlClose_1 begin ] stop
				 */

				/**
				 * [tPostgresqlClose_1 main ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				java.sql.Connection conn_tPostgresqlClose_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlClose_1 != null
						&& !conn_tPostgresqlClose_1.isClosed()) {
					conn_tPostgresqlClose_1.close();
				}

				tos_count_tPostgresqlClose_1++;

				/**
				 * [tPostgresqlClose_1 main ] stop
				 */

				/**
				 * [tPostgresqlClose_1 end ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				ok_Hash.put("tPostgresqlClose_1", true);
				end_Hash.put("tPostgresqlClose_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlClose_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCClose_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlClose_1 finally ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				/**
				 * [tPostgresqlClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCClose_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCClose_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCClose_2 begin ] start
				 */

				ok_Hash.put("tJDBCClose_2", false);
				start_Hash.put("tJDBCClose_2", System.currentTimeMillis());

				currentComponent = "tJDBCClose_2";

				int tos_count_tJDBCClose_2 = 0;

				/**
				 * [tJDBCClose_2 begin ] stop
				 */

				/**
				 * [tJDBCClose_2 main ] start
				 */

				currentComponent = "tJDBCClose_2";

				java.sql.Connection conn_tJDBCClose_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				if (conn_tJDBCClose_2 != null && !conn_tJDBCClose_2.isClosed()) {

					conn_tJDBCClose_2.close();

				}

				tos_count_tJDBCClose_2++;

				/**
				 * [tJDBCClose_2 main ] stop
				 */

				/**
				 * [tJDBCClose_2 end ] start
				 */

				currentComponent = "tJDBCClose_2";

				ok_Hash.put("tJDBCClose_2", true);
				end_Hash.put("tJDBCClose_2", System.currentTimeMillis());

				/**
				 * [tJDBCClose_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCClose_2 finally ] start
				 */

				currentComponent = "tJDBCClose_2";

				/**
				 * [tJDBCClose_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCClose_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_LDF_anl_beh_leverregels_per_lag = new byte[0];
		static byte[] commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String elementid;

		public String getElementid() {
			return this.elementid;
		}

		public String entiteitnaam;

		public String getEntiteitnaam() {
			return this.entiteitnaam;
		}

		public String elementnaam;

		public String getElementnaam() {
			return this.elementnaam;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.elementid == null) ? 0 : this.elementid
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.elementid == null) {
				if (other.elementid != null)
					return false;

			} else if (!this.elementid.equals(other.elementid))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.elementid = this.elementid;
			other.entiteitnaam = this.entiteitnaam;
			other.elementnaam = this.elementnaam;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.elementid = this.elementid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDF_anl_beh_leverregels_per_lag.length) {
					if (length < 1024
							&& commonByteArray_LDF_anl_beh_leverregels_per_lag.length == 0) {
						commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[1024];
					} else {
						commonByteArray_LDF_anl_beh_leverregels_per_lag = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDF_anl_beh_leverregels_per_lag,
						0, length);
				strReturn = new String(
						commonByteArray_LDF_anl_beh_leverregels_per_lag, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDF_anl_beh_leverregels_per_lag) {

				try {

					int length = 0;

					this.elementid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.elementid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.entiteitnaam = readString(dis, ois);

				this.elementnaam = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.entiteitnaam, dos, oos);

				writeString(this.elementnaam, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("elementid=" + elementid);
			sb.append(",entiteitnaam=" + entiteitnaam);
			sb.append(",elementnaam=" + elementnaam);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.elementid, other.elementid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tPostgresqlInput_1 - inputs:(after_tJDBCInput_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(Output)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "select * from ldf_bg_elements";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = null;
				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row2.elementid = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(1);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row2.elementid = tmpContent_tPostgresqlInput_1;
							} else {
								row2.elementid = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row2.entiteitnaam = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(2);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row2.entiteitnaam = tmpContent_tPostgresqlInput_1;
							} else {
								row2.entiteitnaam = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row2.elementnaam = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(3);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row2.elementnaam = tmpContent_tPostgresqlInput_1;
							} else {
								row2.elementnaam = null;
							}
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.elementid = row2.elementid;

						row2_HashRow.entiteitnaam = row2.entiteitnaam;

						row2_HashRow.elementnaam = row2.elementnaam;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					stmt_tPostgresqlInput_1.close();

				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final anl_beh_leverregels_per_lag anl_beh_leverregels_per_lagClass = new anl_beh_leverregels_per_lag();

		int exitCode = anl_beh_leverregels_per_lagClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = anl_beh_leverregels_per_lag.class
					.getClassLoader().getResourceAsStream(
							"ldf/anl_beh_leverregels_per_lag_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.CLASS = (String) context.getProperty("CLASS");
			context.CONNECTIESTR = (String) context.getProperty("CONNECTIESTR");
			context.contextDir = (String) context.getProperty("contextDir");
			context.contextName = (String) context.getProperty("contextName");
			context.contextStr = (String) context.getProperty("contextStr");
			context.DAGEN180 = (String) context.getProperty("DAGEN180");
			context.DAGEN182 = (String) context.getProperty("DAGEN182");
			context.DAGEN30 = (String) context.getProperty("DAGEN30");
			context.DAGEN93 = (String) context.getProperty("DAGEN93");
			context.DATABASE = (String) context.getProperty("DATABASE");
			context.dataDir = (String) context.getProperty("dataDir");
			context.dataFile = (String) context.getProperty("dataFile");
			context.DRIVER_CLASS = (String) context.getProperty("DRIVER_CLASS");
			context.DTB = (String) context.getProperty("DTB");
			context.gemeentecode = (String) context.getProperty("gemeentecode");
			context.HOST = (String) context.getProperty("HOST");
			context.jobName = (String) context.getProperty("jobName");
			context.MAANDEN3 = (String) context.getProperty("MAANDEN3");
			context.metadataSql = (String) context.getProperty("metadataSql");
			context.PORT = (String) context.getProperty("PORT");
			context.PWD_DEC = (String) context.getProperty("PWD_DEC");
			context.PWD_ENC = (String) context.getProperty("PWD_ENC");
			try {
				context.result = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("result"));
			} catch (NumberFormatException e) {
				context.result = null;
			}
			context.SCHEMA = (String) context.getProperty("SCHEMA");
			context.SCONNECTIESTR = (String) context
					.getProperty("SCONNECTIESTR");
			context.SDATABASE = (String) context.getProperty("SDATABASE");
			context.SDRIVER_CLASS = (String) context
					.getProperty("SDRIVER_CLASS");
			context.SDTB = (String) context.getProperty("SDTB");
			context.SHOST = (String) context.getProperty("SHOST");
			context.SPORT = (String) context.getProperty("SPORT");
			context.SPWD_DEC = (String) context.getProperty("SPWD_DEC");
			context.SPWD_ENC = (String) context.getProperty("SPWD_ENC");
			context.sql_blok = (String) context.getProperty("sql_blok");
			context.sql_text = (String) context.getProperty("sql_text");
			context.SSCHEMA = (String) context.getProperty("SSCHEMA");
			context.SUSER = (String) context.getProperty("SUSER");
			context.TABLE = (String) context.getProperty("TABLE");
			context.TCONNECTIESTR = (String) context
					.getProperty("TCONNECTIESTR");
			context.TDATABASE = (String) context.getProperty("TDATABASE");
			context.TDRIVER_CLASS = (String) context
					.getProperty("TDRIVER_CLASS");
			context.TDTB = (String) context.getProperty("TDTB");
			context.THOST = (String) context.getProperty("THOST");
			context.TPORT = (String) context.getProperty("TPORT");
			context.TPWD_DEC = (String) context.getProperty("TPWD_DEC");
			context.TPWD_ENC = (String) context.getProperty("TPWD_ENC");
			context.TSCHEMA = (String) context.getProperty("TSCHEMA");
			context.TUSER = (String) context.getProperty("TUSER");
			context.TYPE = (String) context.getProperty("TYPE");
			context.USER = (String) context.getProperty("USER");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("CLASS")) {
				context.CLASS = (String) parentContextMap.get("CLASS");
			}
			if (parentContextMap.containsKey("CONNECTIESTR")) {
				context.CONNECTIESTR = (String) parentContextMap
						.get("CONNECTIESTR");
			}
			if (parentContextMap.containsKey("contextDir")) {
				context.contextDir = (String) parentContextMap
						.get("contextDir");
			}
			if (parentContextMap.containsKey("contextName")) {
				context.contextName = (String) parentContextMap
						.get("contextName");
			}
			if (parentContextMap.containsKey("contextStr")) {
				context.contextStr = (String) parentContextMap
						.get("contextStr");
			}
			if (parentContextMap.containsKey("DAGEN180")) {
				context.DAGEN180 = (String) parentContextMap.get("DAGEN180");
			}
			if (parentContextMap.containsKey("DAGEN182")) {
				context.DAGEN182 = (String) parentContextMap.get("DAGEN182");
			}
			if (parentContextMap.containsKey("DAGEN30")) {
				context.DAGEN30 = (String) parentContextMap.get("DAGEN30");
			}
			if (parentContextMap.containsKey("DAGEN93")) {
				context.DAGEN93 = (String) parentContextMap.get("DAGEN93");
			}
			if (parentContextMap.containsKey("DATABASE")) {
				context.DATABASE = (String) parentContextMap.get("DATABASE");
			}
			if (parentContextMap.containsKey("dataDir")) {
				context.dataDir = (String) parentContextMap.get("dataDir");
			}
			if (parentContextMap.containsKey("dataFile")) {
				context.dataFile = (String) parentContextMap.get("dataFile");
			}
			if (parentContextMap.containsKey("DRIVER_CLASS")) {
				context.DRIVER_CLASS = (String) parentContextMap
						.get("DRIVER_CLASS");
			}
			if (parentContextMap.containsKey("DTB")) {
				context.DTB = (String) parentContextMap.get("DTB");
			}
			if (parentContextMap.containsKey("gemeentecode")) {
				context.gemeentecode = (String) parentContextMap
						.get("gemeentecode");
			}
			if (parentContextMap.containsKey("HOST")) {
				context.HOST = (String) parentContextMap.get("HOST");
			}
			if (parentContextMap.containsKey("jobName")) {
				context.jobName = (String) parentContextMap.get("jobName");
			}
			if (parentContextMap.containsKey("MAANDEN3")) {
				context.MAANDEN3 = (String) parentContextMap.get("MAANDEN3");
			}
			if (parentContextMap.containsKey("metadataSql")) {
				context.metadataSql = (String) parentContextMap
						.get("metadataSql");
			}
			if (parentContextMap.containsKey("PORT")) {
				context.PORT = (String) parentContextMap.get("PORT");
			}
			if (parentContextMap.containsKey("PWD_DEC")) {
				context.PWD_DEC = (String) parentContextMap.get("PWD_DEC");
			}
			if (parentContextMap.containsKey("PWD_ENC")) {
				context.PWD_ENC = (String) parentContextMap.get("PWD_ENC");
			}
			if (parentContextMap.containsKey("result")) {
				context.result = (Boolean) parentContextMap.get("result");
			}
			if (parentContextMap.containsKey("SCHEMA")) {
				context.SCHEMA = (String) parentContextMap.get("SCHEMA");
			}
			if (parentContextMap.containsKey("SCONNECTIESTR")) {
				context.SCONNECTIESTR = (String) parentContextMap
						.get("SCONNECTIESTR");
			}
			if (parentContextMap.containsKey("SDATABASE")) {
				context.SDATABASE = (String) parentContextMap.get("SDATABASE");
			}
			if (parentContextMap.containsKey("SDRIVER_CLASS")) {
				context.SDRIVER_CLASS = (String) parentContextMap
						.get("SDRIVER_CLASS");
			}
			if (parentContextMap.containsKey("SDTB")) {
				context.SDTB = (String) parentContextMap.get("SDTB");
			}
			if (parentContextMap.containsKey("SHOST")) {
				context.SHOST = (String) parentContextMap.get("SHOST");
			}
			if (parentContextMap.containsKey("SPORT")) {
				context.SPORT = (String) parentContextMap.get("SPORT");
			}
			if (parentContextMap.containsKey("SPWD_DEC")) {
				context.SPWD_DEC = (String) parentContextMap.get("SPWD_DEC");
			}
			if (parentContextMap.containsKey("SPWD_ENC")) {
				context.SPWD_ENC = (String) parentContextMap.get("SPWD_ENC");
			}
			if (parentContextMap.containsKey("sql_blok")) {
				context.sql_blok = (String) parentContextMap.get("sql_blok");
			}
			if (parentContextMap.containsKey("sql_text")) {
				context.sql_text = (String) parentContextMap.get("sql_text");
			}
			if (parentContextMap.containsKey("SSCHEMA")) {
				context.SSCHEMA = (String) parentContextMap.get("SSCHEMA");
			}
			if (parentContextMap.containsKey("SUSER")) {
				context.SUSER = (String) parentContextMap.get("SUSER");
			}
			if (parentContextMap.containsKey("TABLE")) {
				context.TABLE = (String) parentContextMap.get("TABLE");
			}
			if (parentContextMap.containsKey("TCONNECTIESTR")) {
				context.TCONNECTIESTR = (String) parentContextMap
						.get("TCONNECTIESTR");
			}
			if (parentContextMap.containsKey("TDATABASE")) {
				context.TDATABASE = (String) parentContextMap.get("TDATABASE");
			}
			if (parentContextMap.containsKey("TDRIVER_CLASS")) {
				context.TDRIVER_CLASS = (String) parentContextMap
						.get("TDRIVER_CLASS");
			}
			if (parentContextMap.containsKey("TDTB")) {
				context.TDTB = (String) parentContextMap.get("TDTB");
			}
			if (parentContextMap.containsKey("THOST")) {
				context.THOST = (String) parentContextMap.get("THOST");
			}
			if (parentContextMap.containsKey("TPORT")) {
				context.TPORT = (String) parentContextMap.get("TPORT");
			}
			if (parentContextMap.containsKey("TPWD_DEC")) {
				context.TPWD_DEC = (String) parentContextMap.get("TPWD_DEC");
			}
			if (parentContextMap.containsKey("TPWD_ENC")) {
				context.TPWD_ENC = (String) parentContextMap.get("TPWD_ENC");
			}
			if (parentContextMap.containsKey("TSCHEMA")) {
				context.TSCHEMA = (String) parentContextMap.get("TSCHEMA");
			}
			if (parentContextMap.containsKey("TUSER")) {
				context.TUSER = (String) parentContextMap.get("TUSER");
			}
			if (parentContextMap.containsKey("TYPE")) {
				context.TYPE = (String) parentContextMap.get("TYPE");
			}
			if (parentContextMap.containsKey("USER")) {
				context.USER = (String) parentContextMap.get("USER");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlConnection_1) {
			globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

			e_tPostgresqlConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : anl_beh_leverregels_per_lag");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tJDBCConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tJDBCConnection_1",
				globalMap.get("conn_tJDBCConnection_1"));
		connections.put("conn_tPostgresqlConnection_1",
				globalMap.get("conn_tPostgresqlConnection_1"));
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 171003 characters generated by Talend Open Studio for Data Integration on the
 * August 21, 2018 4:09:02 PM CEST
 ************************************************************************************************/
